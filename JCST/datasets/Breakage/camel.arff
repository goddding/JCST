@relation camel

@attribute text string
@attribute isBreakage {0,1}

@data
'FileConfigureTest can\'t pass in Windows box   \tBecause of the File.separator is different between the unix and windows system. So the test can\'t pass in windows box.I just attached a patch for it. Please have a look at it  I tested it in windows box.   ',0
'JMSXGroupID is not copied across ActiveMQ endpoints   \tSee thread: http://www.nabble.com/MethodName-in-header-is-ignored-by-beanRef\%28\%29-tf4285009s22882.html#a12198390   ',0
'URL link broken in org.apache.camel.Processor API doc   \t\'Message Transformer\' link is broken.   ',0
'org.apache.camel.processor.UnitOfWorkWithAsyncFlowTest failure   \tRunning org.apache.camel.processor.UnitOfWorkWithAsyncFlowTestTests run: 3  Failures: 1  Errors: 0  Skipped: 0  Time elapsed: 20.345 sec &lt;&lt;&lt; FAILURE!This prevents developer from building camel under Linux platform. Thanks!   ',0
'exception clause doesn\'t proceed with pipeline   \tProblem is very similar to CAMEL-191 but this time with exception clause.As exceptions are not cleared pipeline doesn\'t proceed.   ',0
'the 1.2.0 release didnt\' seem to include the javadocs or doc directory (or manual)!   \tI wondered if this was due to your machine Hiram having some dodgy maven plugin around or something?   ',0
'Headers lost after XSLT processing   \tAfter xslt processing the message headers are lost. See attached unit test  this test fails since revision 590680.http://svn.apache.org/viewvc?view=rev&amp;revision=590680   ',0
'Fix performance counters   \t   ',0
'[Spring integration] TheadType is missing in org/apache/camel/model/jaxb.index   \tTheadType is missing in org/apache/camel/model/jaxb.index =&gt; JAXB don\'t know how to unmarshall thread.Bug description found in Camel Users forum : http://www.nabble.com/Processor-thread-pool-td13212513s22882.html   ',0
'[Spring integration] Bad urls in META-INF/spring.schemas   \thttp/://activemq.apache.org/camel/schema/spring/camel-spring-1.1.xsd becomes http/://activemq.apache.org/camel/schema/spring/camel-spring-1.1.0.xsdhttp/://activemq.apache.org/camel/schema/spring/camel-spring-1.2.xsd becomes http/://activemq.apache.org/camel/schema/spring/camel-spring-1.2.0.xsdThere\'s no camel-spring-1.1.xsd and camel-spring-1.2.xsd under http://activemq.apache.org/camel/schema/spring/   ',0
'NullPointerException in CXF routes when there is an endpoint between router and service CXF endpoints   \tWhen an endpoint is added between a cxf router and a cxf service endpoint the message exchange is interrupted by a NullPointerException.Example code:----JAVA-BEGIN---------------------------------------------------------//This code worksfrom(StringUtils.join(cxfRouterURI)).to(StringUtils.join(cxfServiceURI)); // This code crashes (same problem with seda and log endpoints)String anyEndpoint = \'activemq:someQueue\';----JAVA-END---------------------------------------------------------from(StringUtils.join(cxfRouterURI)).to(anyEndpoint).to(StringUtils.join(cxfServiceURI)); ----EXCEPTION-BEGIN-----------------------------------09/01/2008 18:32:40 org.apache.cxf.phase.PhaseInterceptorChain doInterceptINFO: Interceptor has thrown exception  unwinding noworg.apache.cxf.interceptor.Fault at org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:43) at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:207) at org.apache.camel.component.cxf.invoker.CxfClient.invokeWithMessageStream(CxfClient.java:137) at org.apache.camel.component.cxf.invoker.CxfClient.dispatch(CxfClient.java:89) at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:202) at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:152) at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:73) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:143) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:87) at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) at org.apache.camel.processor.Pipeline.process(Pipeline.java:85) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68) at org.apache.camel.component.cxf.CamelInvoker.invoke(CamelInvoker.java:71) at org.apache.camel.component.cxf.interceptors.AbstractInvokerInterceptor.handleMessage(AbstractInvokerInterceptor.java:65) at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:207) at org.apache.camel.component.cxf.CxfMessageObserver.onMessage(CxfMessageObserver.java:83) at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:284) at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:240) at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:54) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712) at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:211) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139) at org.mortbay.jetty.Server.handle(Server.java:313) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:506) at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:844) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:726) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:381) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:396) at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442)Caused by: java.lang.NullPointerException at org.apache.commons.io.IOUtils.copyLarge(IOUtils.java:1025) at org.apache.commons.io.IOUtils.copy(IOUtils.java:999) at org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:39) ... 32 more ----EXCEPTION-END-----------------------------------Known workaround:Change the code like this:----JAVA-BEGIN--------------------------------------------------------- String anyEndpoint = \'activemq:someQueue\'; from(StringUtils.join(cxfRouterURI)).process(new Processor(){ public void process(Exchange exchange) throws Exception { exchange.setOut(exchange.getIn()); } }).to(anyEndpoint).to(StringUtils.join(cxfServiceURI));----JAVA-END---------------------------------------------------------   ',0
'Multithreaded HTTP invocations doesn\'t work   \tDescription of the bug:http://www.nabble.com/Multithreaded-http-endpoint-to13646722s22882.html#a13646722   ',0
'DefaultParameterMappingStrategy doesn\'t load its defaults   \tThis is preventing BeanProcessor from using bean methods with a Message parameter  or bean methods not named \'process\' that have an Exchange as their parameter. For example  to map to a Message the it tries using the ParameterExpression bodyAs(Message.class) instead of inmessageExpression().   ',0
'spring-2.5.1.jar is twice in the camel distro   \tI downloaded the latest snapshot apache-camel-1.3-20080210.022044-67.zip fromhttp://people.apache.org/repo/m2-snapshot-repository/org/apache/camel/apache-camel/1.3-SNAPSHOT/The .zip file contains spring-2.5.1.jar twice/camel/lib/camel/lib/optionalIs Spring both mandatory and optional?And btw it includes an old version of commons-logging-1.0.4.jar. v1.1 of commons logging is out.   ',0
'bad content length header value in http response   \tBy default HttpBinding class copies all request header attributes from the request to the response including \'Content-Length\'. So the consequence is that the response is declaring the same size as the request which can lead to serious truncation problems! the workaround is simply to add the line:out.removeHeader(\'Content-Length\'); in the writeResponse method of the httpbinding class allowing jetty to set the right value.   ',0
'Mina TCP does not support InOut pattern   \tSee this thread:http://www.nabble.com/camel-mina-TCP-InOut-exchange-td15530602s22882.htmlThis builder does not support InOut when a client send a textline to localhost:8888.The client never receives a response.url = \'mina:tcp://localhost:8888?textline=true\';from(uri).process(new Processor() { public void process(Exchange e) { String in = e.getIn().getBody(String.class); // append newline at end to denote end of data for textline codec e.getOut().setBody(\'Hello \' + in + \'/n\'); } });Attached is a patch that fixes this by introducing a new parameter to the URL for fluent builder sync=true (ie is there a better name?)Using this url instead and the patch then Camel will send a response back to the client:mina:tcp://localhost:8888?textline=true&amp;sync=true   ',0
'camel-cxf component can\'t deal with the exception message in MESSAGE dataFormat   \tFrom: Willem JiangTo: camel-user@activemq.apache.orgSubject: Re: camel-cxf throwing a faultDate: Wed  05 Mar 2008 16:26:41 +0800Reply-To: camel-user@activemq.apache.orgHi Marc It looks like camel-cxf component\'s issue which can\'t deal with the exception message in MESSAGE dataFormat.Could you fill a JIRA for it ? I will fix it later this week.As usual  you just need throw the exception from the processor   CXF will try to marshal it into a soap fault.Regards WillemMarc Giger wrote:&gt; Hi &gt;&gt; I\'m trying to get the following camel route working where the&gt; dataformat is MESSAGE.&gt;&gt; &lt;from uri=\'cxf:bean:routerEndpoint?dataFormat=MESSAGE\'/&gt; &gt; &lt;process ref=\'decryptProcessor\'/&gt; &gt; &lt;choice&gt;&gt; &lt;when&gt; &gt; &lt;methodCall bean=\'endpointSelector\' method=\'matches\'/&gt;&gt; &lt;to uri=\'cxf:bean:serviceEndpoint?dataFormat=MESSAGE\'/&gt; &gt; &lt;/when&gt;&gt; &lt;otherwise&gt; &gt; &lt;to uri=\'cxf:bean:localEndpoint?dataFormat=MESSAGE\'/&gt; &gt; &lt;/otherwise&gt;&gt; &lt;/choice&gt; &gt;&gt; if the endpointSelector bean returns true the request is redirected to&gt; a remote webservice.&gt; otherwise the request is forwarded to a local cxf service (with&gt; local-transport)&gt;&gt; Now  if I invoke the routerEndpoint and somewhere in the pipeline&gt; happens an exception (in my case in the decryptProcessor)  I get the&gt; following Exception in the outFault chain:&gt;&gt; Mar 4  2008 10:48:35 PM org.apache.cxf.phase.PhaseInterceptorChain&gt; doIntercept INFO: Interceptor has thrown exception  unwinding now&gt; org.apache.cxf.interceptor.Fault&gt; at&gt; org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:43)&gt; at&gt; org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:208)&gt; at&gt; org.apache.cxf.interceptor.OutgoingChainInterceptor.handleMessage(OutgoingChainInterceptor.java:74)&gt; at&gt; org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:208)&gt; at&gt; org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:77)&gt; at&gt; org.apache.cxf.transport.servlet.ServletDestination.doMessage(ServletDestination.java:79)&gt; at&gt; org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:264)&gt; at&gt; org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:160)&gt; at&gt; org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:170)&gt; at&gt; org.apache.cxf.transport.servlet.AbstractCXFServlet.doPost(AbstractCXFServlet.java:148)&gt; at javax.servlet.http.HttpServlet.service(HttpServlet.java:727) at&gt; javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at&gt; org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487)&gt; at&gt; org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:362)&gt; at&gt; org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)&gt; at&gt; org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)&gt; at&gt; org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712)&gt; at&gt; org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405)&gt; at&gt; org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:211)&gt; at&gt; org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)&gt; at&gt; org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139)&gt; at org.mortbay.jetty.Server.handle(Server.java:313) at&gt; org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:506)&gt; at&gt; org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:844)&gt; at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:644) at&gt; org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211) at&gt; org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:381) at&gt; org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:396)&gt; at&gt; org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442)&gt; Caused by: java.lang.NullPointerException at&gt; org.apache.commons.io.IOUtils.copyLarge(IOUtils.java:1025) at&gt; org.apache.commons.io.IOUtils.copy(IOUtils.java:999) at&gt; org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:39) ...&gt; 28 more&gt;&gt; This is because the InputStream is null in&gt; RawMessageContentRedirectInterceptor:&gt;&gt; public void handleMessage(Message message) throws Fault {&gt;&gt; InputStream is = message.getContent(InputStream.class);&gt; OutputStream os = message.getContent(OutputStream.class);&gt; &gt; try { &gt; IOUtils.copy(is  os);&gt; is.close();&gt; os.flush();&gt; } catch (Exception e) {&gt; throw new Fault(e);&gt; }&gt; }&gt;&gt; How can I return a custom soap-fault in a processor/filter?&gt;&gt; Thanks &gt;&gt; Marc&gt;&gt;   ',0
'SftpConsumer is not connecting and retrieving remote files   \tSftpConsumer does not connect to server due to patch for CAMEL-251. The SftpConsumer also checks remote file modification timestamp against last poll timestamp but incorrectly converts seconds to milliseconds using integer math so the resulting conversion is always negative and will never retrieve file. I will attach the fixes to this issue.   ',1
'HttpBinding.writeResponse doesn\'t set the response status code (i.e. it\'s always 200)   \tWhen writing out an Http response  the HttpBinding should check for the existing of the header HttpProducer.HTTP_RESPONSE_CODE and set it in the response if it\'s there. This allows requests made via the http component to be output with the correct status code info. If also allows processors in the flow to control the status code by setting the header themselves.   ',0
'Support for a full customized soap-fault incl. fault-code and detail   \tDon\'t wrap a Fault in a Fault.   ',0
'Javadoc warnings   \tGet the javadoc warnings reported by the javadoc generator fixed.   ',0
'Exception handling of the ErrorHandlerSupport class   \tWhen you configure your route builder and say you want to configure two exceptions lets say: NullPointer and Exception. Now say the bean you call as your end point throws a NullPointer  wouldn\'t you think the NullPointer policy would handle that exception? Well I\'m seeing sometimes it does and sometimes it doesn\'t due to the map not keeping the exceptions in any particular order. Is there anyway this could be changed to a LinkedHashMap or a List?Issue with class: org.apache.camel.processor.ErrorHandlerSupport   ',0
'Invalid jar in binary distribution   \tThe apache-camel jar in the binary distribution misses a lot of files  including class and schema files (12k in size compared to the 1.9M released jar).   ',0
'Camel should raise an exception if parsing of xslt file fails   \tConsider a Camel route that involves an xslt component. When Camel sets up the route  the XsltBuilder ignores any errors coming from the xerces xml parser and continues constructing the route even though the xslt transformer is not initialized. Later when the route is executed Camel correctly checks if the transformer is initialized and raises an error if not:java.lang.IllegalArgumentException: No transformer configured!However in case of a parse error in the xslt file  the whole route becomes unusable and the setup routine that constructs the route should fail with an appropriate error message. A sanity check needs to be added in methodorg.apache.camel.builder.xml.XsltBuilder.setTransformerSource(javax.xml.transform.Source).   ',0
'file endpoint with noop=true does not detect old files moved into a directory   \t   ',0
'camel-core does not compile on HP-UX   \tcamel-core/src/main/java/org/apache/camel/model/ProcessorType.java:&#91;871 12&#93; inconvertible types found : org.apache.camel.model.ProcessorType&lt;Type&gt; required: org.apache.camel.model.InterceptTypecamel-core/src/main/java/org/apache/camel/model/ProcessorType.java:&#91;872 39&#93; inconvertible types found : org.apache.camel.model.ProcessorType&lt;Type&gt; required: org.apache.camel.model.InterceptTypecamel-core/src/main/java/org/apache/camel/model/ProcessorType.java:&#91;884 12&#93; inconvertible types found : org.apache.camel.model.ProcessorType&lt;Type&gt; required: org.apache.camel.model.InterceptTypecamel-core/src/main/java/org/apache/camel/model/ProcessorType.java:&#91;885 38&#93; inconvertible types found : org.apache.camel.model.ProcessorType&lt;Type&gt; required: org.apache.camel.model.InterceptType   ',0
'JMX Connector is not closed by InstrumentationAgentImpl.doStop()   \t   ',0
'Javadoc - improve summaries etc   \tThe javadoc could use to be polished for eg. summaries statis the Apache license instead of a short brief summary what the class/package does etc.It\'s all the javadoc also for the components.   ',0
'IntrumentationProcessor does properly record processing time   \tThe InstrumentationLifeCycleStrategy inserts an InstrumentationProcessor interceptor at the end of a route which is intercepted after the processing has been done. The InstrumentationProcessor does not actually record the time spent on the route. It is fixed by inserting InstrumentationProcessor at the beginning of the route and wrapping all the outputs.There two MBeans (ManagedRoute and PerformanceCounter) registered for each route eventhough ManagedRoute already extends PerformanceCounter. We probably only need to expose one MBean. The ManagedRoute MBean shows performance attributes and operations (since it extends PerformanceCoutner) but these performance related stuffs don\'t really work. This is fixed by registering only the ManagedRoute MBean and making the performance related attributes and operations functional.This patch supports exposing all processors within a route as PerformanceCounter MBeans so that users are possible to monitor performance at the processor\'s level.With this patch  the org.apache.camel.spi package no longer depends CamelNamingStrategy of the org.apache.camel.management.management package. It follows the suggestion mentioned in https://issues.apache.org/activemq/browse/CAMEL-264.Another update is to following the JMX spec convention of including a \'type\' property in the ObjectName (replacing the current \'groups\' property). This patch also simplify the ManagedRoute\'s ObjectName a bit by removing builder and group properties. If for some reasons  they need to be in the ObjectName  please add them back.   ',0
'camel-cxf component not propagating context data   \tFor POJO data formats the CxfProducer currently invokes the following method to invoke on a target serverresult = client.invoke(operation  parameters.toArray());This fails to setup the Request and Response contexts for the out (request) message and in (response) message. It should instead be copying the relevant data from the consumer and invoking the following operation on the Client interfaceObject[] invoke(BindingOperationInfo oi  Object[] params  Map&lt;String  Object&gt; context) throws Exception;Likewise the PAYLOAD and MESSAGE data formats are not setting up their contexts before they call the dispatch operation. In fact there is comments in the current codebase... // invoke the message prepare the context Map&lt;String  Object&gt; context = new HashMap&lt;String  Object&gt;(); Map&lt;String  Object&gt; requestContext = new HashMap&lt;String  Object&gt;(); Map&lt;String  Object&gt; responseContext = new HashMap&lt;String  Object&gt;(); // TODO Get the requestContext from the CamelExchange context.put(CxfClient.REQUEST_CONTEXT  requestContext); context.put(CxfClient.RESPONSE_CONTEXT  responseContext);The fix should also include a fix for all three data format types   ',0
'NPE from came:run with below route codes   \tWith the following route: from(\'timer://tutorial?fixedRate=true&amp;period=10\') .setBody( constant(\'&lt;?xml version=\'1.0\' encoding=\'UTF-8\'?&gt;&lt;greetMe&gt;Hello World&lt;/greetMe&gt;\')) .setHeader(\'CBR1\'  constant(\'No\')).choice().when( header(\'CBR1\').isEqualTo(\'Yes\')).setHeader( \'CreditcardValidation\'  constant(\'Yes\')).to( \'log:CBRBean?level=INFO\').to(\'log:XSLT for provider1?level=INFO\') .when(header(\'CBR1\').isEqualTo(\'No\')).setHeader( \'CreditcardValidation\'  constant(\'No\')).to( \'log:XSLT for provider2?level=INFO\').end().choice() .when(header(\'CreditcardValidation\').isEqualTo(\'Yes\')) .to(\'log:CCVBean?level=INFO\').to(\'log:XSLT for consumer1?level=INFO\').when( header(\'CreditcardValidation\').isEqualTo(\'No\')) .to(\'log:XSLT for consumer2?level=INFO\').otherwise() .to(\'log:test?level=INFO\').end();running mvn camel:run I get the following stack trace:java.lang.NullPointerException at org.apache.camel.view.NodeData.&lt;init&gt;(NodeData.java:136) at org.apache.camel.view.GraphGeneratorSupport.getNodeData(GraphGeneratorSupport.java:142) at org.apache.camel.view.RouteDotGenerator.printNode(RouteDotGenerator.java:101) at org.apache.camel.view.RouteDotGenerator.printNode(RouteDotGenerator.java:123) at org.apache.camel.view.RouteDotGenerator.printRoute(RouteDotGenerator.java:87) at org.apache.camel.view.RouteDotGenerator.printRoutes(RouteDotGenerator.java:64) at org.apache.camel.view.RouteDotGenerator.printRoutes(RouteDotGenerator.java:48) at org.apache.camel.view.RouteDotGenerator.generateFile(RouteDotGenerator.java:169) at org.apache.camel.view.GraphGeneratorSupport.generateFile(GraphGeneratorSupport.java:103) at org.apache.camel.view.GraphGeneratorSupport.drawRoutes(GraphGeneratorSupport.java:81) at org.apache.camel.spring.Main.generateDot(Main.java:392) at org.apache.camel.spring.Main.postProcessContext(Main.java:374) at org.apache.camel.spring.Main.doStart(Main.java:333) at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47) at org.apache.camel.spring.Main.run(Main.java:123) at org.apache.camel.spring.Main.run(Main.java:114) at org.apache.camel.spring.Main.main(Main.java:106) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:333) at java.lang.Thread.run(Thread.java:613)the error seems related to the maven camel plugin failing generating the dot file for the route.   ',0
'File component - noop does not lock the file during processing   \tThe noop=true option does not lock the file during processing as it states in its class javadoc. The parameter is false. It should be true instead. public NoOpFileProcessStrategy() { super(false); }   ',0
'camel-spring is dependent on spring-aop   \t&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aop&lt;/artifactId&gt; &lt;version&gt;${spring-version}&lt;/version&gt; &lt;/dependency&gt;is needed in pom.xml for camel-spring as its needed to let camel-spring component work out-of-the-box. Without it the camel-example-spring does not work and blows up with a ClassNotFoundException when you use camel:run   ',0
'Multicast default excecutor do not create the enough thread for parallel processing   \tWhen I added the loan broker example CAMEL-556  I found there is no performance improvement when using the parallelly mulitcast.After digging into to code  I found we should create the enough thread for the parallel processing.   ',0
'CamelTemplate should clear endpoint cache when stopping   \tOnly the producer cache is stopped and cleared // start and stop in camel template protected void doStart() throws Exception { producerCache.start(); } protected void doStop() throws Exception { producerCache.stop(); } // stop in producer cache protected void doStop() throws Exception { ServiceHelper.stopServices(producers.values()); producers.clear(); }   ',0
'[patch] Make sure streams get closed   \ta couple places streams are opened and are not closed. patch fixes this.   ',0
'Missing compile step in example readmes   \tI noticed that some examples that are run via mvn exec:java require that the example be compiled first. I\'ve updated the readmes to include this step...   ',0
'ResequencerType.createProcessor could throw NPE as stream config does not get initialized.   \tjava.lang.NullPointerException at org.apache.camel.model.ResequencerType.createStreamResequencer(ResequencerType.java:198) at org.apache.camel.model.ResequencerType.createProcessor(ResequencerType.java:163) at org.apache.camel.model.ProcessorType.createOutputsProcessor(ProcessorType.java:1584) at org.apache.camel.model.ProcessorType.createOutputsProcessor(ProcessorType.java:93) at org.apache.camel.model.InterceptorRef.createProcessor(InterceptorRef.java:61) at org.apache.camel.model.ProcessorType.makeProcessor(ProcessorType.java:1471) at org.apache.camel.model.ProcessorType.addRoutes(ProcessorType.java:97) at org.apache.camel.model.RouteType.addRoutes(RouteType.java:210) at org.apache.camel.model.RouteType.addRoutes(RouteType.java:80) at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:462) at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:454) at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47) at org.apache.camel.ContextTestSupport.startCamelContext(ContextTestSupport.java:108) at org.apache.camel.ContextTestSupport.setUp(ContextTestSupport.java:81) at org.apache.camel.processor.ResequencerTest.setUp(ResequencerTest.java:48) at junit.framework.TestCase.runBare(TestCase.java:128) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:120) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)   ',0
'DeadLetterChannel default redelivery policy eclipsed expected transactional behaviour in a transacted route   \tCamel routes get a DLC processor with a redelivery policy  which defaults to redeliverying a message to a destination processor up to 6 times. In case of a transacted route it is preferable that DLC\'s delivery policy be reset to a single attempt  so that a fan-out transacted route would not hold tx locks on destinations for too long. The DLC\'s default redelivery policy has also made transactional tests not really testing tx behavior of Camel Components backed runtimes (jms brokers  etc)  rather DLC would catch the exception and try to redeliver the message to destination processor and not letting the components to rollback native transactions initiated by components backed runtimes (jms  db)The attached patch installs a property into Camel Exchange that indicates weather a route is transacted. This is done in org.apache.camel.spring.spi.TransactionInterceptor.javaDLC then checks if the flow is transacted and sets its redelivery policy to 1With this change JMS transactions are actually rolled back and messages are put back into the queue and then consumed again  verifying that brokers support transactions and can redeliver messages into Camel routes that were previously rolled back.   ',0
'ResolverUtil can\'t resolve converter annotations in WebSphere 6.1   \tI have a simple hello world file based ESB that scans a folder for files  invoke a POJO and store the output as a file in another folder.Deployed as a WAR file in WebSphere it seems as if Camel 1.4-SNAPSHOT can not load the converters needed to converter to String to InputStream for the FileProducer when it is about to store the file.The logging output where the ResolverUtil can\'t find the annotated converters in camel jar itself[06-25 13:31:23] DEBUG ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@7ade7ade]: Searching for annotations of org.apache.camel.Converter in packages: [org.apache.camel.spring.converter  org.apache.camel.converter][06-25 13:31:23] DEBUG ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@7ade7ade]: Found: []And the stacktrace:org.apache.camel.InvalidPayloadException: No in body available of type: java.io.InputStream but has value: This is important work/temp/camel/in/README.txtDone by me. of type: java.lang.String on: Message: This is important work/temp/camel/in/README.txtDone by me. on the exchange: Exchange[Message: This is important work/temp/camel/in/README.txtDone by me.] at org.apache.camel.util.ExchangeHelper.getMandatoryInBody(ExchangeHelper.java:127) at org.apache.camel.component.file.FileProducer.process(FileProducer.java:67) at org.apache.camel.component.file.FileProducer.process(FileProducer.java:55) at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)   ',0
'jms aggregation does not work   \tI found this issue when I test Camel 1.4.0 RC2 kit  I just add a test case to show the error.https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-jms/src/test/java/org/apache/camel/component/jms/AggregratedJmsRouteTest.javaYou can reproduce the error if you remove the x character from xtestJmsMulticastAndAggregration() method.BTW the test case works with the Camel 1.4.0 RC1.   ',0
'camel-cxf example build.xml is out of date   \tNeed to update the build.xml of example-camel-cxf to support run the examples of camel transport and web service provider API.   ',0
'Bean method lost when sending a message from one JMS queue to another   \tI noticed a problem in JmsBinding.java. If Camel has read a JMS message from a queue and that message has a bean method specified in the header (\'org.apache.camel.MethodName\')  the method header will removed if that message is written to another queue. Here\'s the offending code:  protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage  String headerName   Object headerValue) { return headerValue != null &amp;&amp; !getIgnoreJmsHeaders().contains(headerName) &amp;&amp; ObjectHelper.isJavaIdentifier(headerName); } \'org.apache.camel.MethodName\' fails the check isJavaIdentifier and is excluded from the headers written to the new message. I\'m not sure the purpose of this check  but this might be an unintended side effect. The call chain is something like this: JmsProducer.process JmsBinding.makeJmsMessage JmsBinding.appendJmsProperties JmsBinding.shouldOutputHeader Update: Experimenting later with WebLogic\'s JMS  I noticed that WebLogic (9.2) does not allow this header name. Maybe this was the original motivation for this check. In order to be compatible with WebLogic  perhaps the method header name should changed to something like \'CamelMethod\'. I believe this would correct both problems.   ',0
'CXF - Feedback from Eduard on problems with CXF over JMS   \tSee user forum:http://www.nabble.com/Fwd\%3A-Using-Apache-Camel-as-Transport-for-Apache-CXF-with-SOAP-over-JMS-td18314917s22882.html   ',0
'process method of should check ExchnagePAttern before setting out   \t   ',0
'ProducerTemplate doenst honor exchange pattern when it extracts the result   \tThe code the extracts the result that is returned when you use the sendXXX  requestXXX methods on the producer template doens\'t honor the exchange pattern. protected Object extractResultBody(E result) { Object answer = null; if (result != null) { Message out = result.getOut(false); if (out != null) { answer = out.getBody(); } else { answer = result.getIn().getBody(); } } return answer; }It defaults to preferring out messages all the time. But in some circumstances the out body could be set to null but the real response is in the in body.Setting the exchange pattern to InOnly doesn\'t honor this.Maybe this ticket is a symptom of the MEP problem that we have in Camel. See the discussion on the dev forum.   ',0
'transform() doesnt propogate headers   \tThe new transform() DSL doesn\'t propogate headers so you can not do: from(\'direct:four\') .transform().constant(\'London\') .to(\'mock:result\');And expect that any headers on the exchange at direct:four is received after the transform   ',0
'JMX Instrumentation - Nodeid can be null   \tThe processors that is registered in JMX can have null in their id. So the JMX path is processor -&gt; null -&gt; 0.Either we should replace null with unknown as we do for endpoints. Or try to fix that the id is generated.   ',0
'FileProducer - consumes file instead of producing!   \tThe strange code in the FileProducer that if the exchange is out capable it will poll the file instead bites us big time.James must have had a beer and a fancy moment when he created the code. Something with a dynamic receipentlist where the endpoints should be polled from a file but the expression uses a Producer when the endpoints is created. For the file it should consume instead but it doesn\'t. Any basically it should consume instead.It also bites us when we send an InOut exchange to the FileProducer it will not produce the file but consume it and there is no file so nothing happens.This codepublic class FileBackupTest extends ContextTestSupport { public void testMailGeneration() throws Exception { MockEndpoint mock = getMockEndpoint(\'mock:result\'); mock.expectedMessageCount(1); template.requestBody(\'seda:mails\'  \'Hello World\'); mock.assertIsSatisfied(); } protected RouteBuilder createRouteBuilder() throws Exception { return new RouteBuilder() { public void configure() throws Exception { from(\'seda:mails\') .to(\'file:target/mails\') .to(\'mock:result\'); } }; }Would not create a file in target/mails folder as we are using template.request that is an InOut MEP.I will fix it by removing the strange consumer code in the FileProducer and change the fancy dynamic recepientlist test (SimulatorTest)  to not use file based endpoints.It could be a blocker for the 1.4 release and we should consider creating a new RC!   ',0
'Exception on using WS-Addressing with Apache Camel as Transport   \tNot sure if this is a bug in CXF or Camel. Please see attached sample project.--------------------------------------------------INFO: Interceptor has thrown exception  unwinding noworg.apache.cxf.binding.soap.SoapFault: A header representing a Message Addressing Property is not valid and the message cannot be processed at org.apache.cxf.ws.addressing.MAPAggregator.mediate(MAPAggregator.java:375) at org.apache.cxf.ws.addressing.MAPAggregator.handleMessage(MAPAggregator.java:159) at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221) at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78) at org.apache.camel.component.cxf.transport.CamelDestination.incoming(CamelDestination.java:148) at org.apache.camel.component.cxf.transport.CamelDestination$ConsumerProcessor.process(CamelDestination.java:172) at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:59) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:155) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:91) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66) at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:68) at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:531) at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:466) at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:435) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:322) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:260) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:944) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:875) at java.lang.Thread.run(Thread.java:595)   ',0
'Propagated CXF header\'s value should not include quotes   \tCAMEL-686 fixed the issue of not propagating transport headers (e.g. SOAPAction) but it looks like we added quotes around the value (i.e. getCustomer becomes \'getCustomer\'). I updated the CustomerServicesTest to illustrate the problem. Also  I cleaned up the client/server-application.xml.   ',1
'When getContext().addInterceptorStrategy(new Tracer());  is added in a RouteBuilder class  then the timer component does not work   \tWhen getContext().addInterceptorStrategy(new Tracer());is added in a RouteBuilder Class  then the timer component does not start.e.g. public class RouteBuilder extends RouteBuilder { getContext().addInterceptorStrategy(new Tracer()); public void configure() { from(\'timer://export\') .to(\'bean:myBean\'); }}   ',0
'After the downloading process  the layout of the remote file system doesn\'t match the local\'s one   \tWhen downloading a directory with a complex layout (mutli level directory)  the downloaded files do not reflect the local onemore info here http://www.nabble.com/FTP-component\%3A-Possible-bug-td18540318s22882.html   ',0
'CamelConduit\'s should check the TargetReference when create its instance   \tCAMEL-726 shows a ws-address error when using Camel transport for CXF.After running the code   I found there is no To address tag generated in the soap header. It was caused by the CamelConduit can set right targe reference.   ',0
'xpath expression with $header and the header doesnt exist on the in message results in NPE   \tUsing the $headerkey shorthand for xpath expression throws a NPE if the headerkey doesn\'t exists on the in message.We should try to find a better workaround for key doesn\'t exists. The NPE is thrown by SUN in their xpath engine.Check nabble:http://www.nabble.com/Camel-XPath-and-no-variables-found-in-MessageVariableResolver---What-should-Camel-do--td18603960s22882.html   ',0
'AMQP Tests are disabled   \tThe AMQP tests are currently disabled. Adding an older version of MINA (than Camel uses) &amp; commons lang to the classpath got the tests passing except for ObjectMessage type test.Sending a TextMessage and BytesMessage work fine so I\'m opening up a separate JIRA for the ObjectMessage issue.   ',0
'CamelContext\'s setErrorHandler is not effect when the jmx agent is disabled   \tThe example applications from Camel 1.4 source distribution work correctly on my machine. After comparing the sample Spring XML configuration and my Spring configuration  I noticed there is no jmxAgent element in the sample XML where my configuration has this element. The problem I noticed was that when the disabled attribute of the jmxAgent element is set to true  the redelivery policy does not work. http://www.nabble.com/DeadLetterChannel-Configuration-Camel-1.4-td18622356s22882.html#a18622356   ',0
'InstrumentationProcessor should catch Throwable   \tThe InstrumentationProcessor currently only catches exception and sets it in the exception. Runtime errors and throwables can be thrown all the way out of the DeadLetterChannel\'s process method  out of the reach of exception policy.   ',0
'Pipeline with thread() processor also redelivers following the default policy independently from the preset  errorhadling   \tWhen using the thread processor in a simple pipeline  the exchange will be redelivered 6 times (default policy) along with the preset errorhandler settings. The code below will re-deliver 6 times to the default DeadLetterChannel and once to the log:errorTester. errorHandler(deadLetterChannel(\'log:errorTester?level=ERROR\').maximumRedeliveries(1)); from(\'seda:whatEver\') .thread(2) .process(new Processor() { public void process(Exchange exchange) throws Exception { System.out.println(\'### Exchg : \' + exchange.getExchangeId()); throw new Exception(\'Kaboom 2!\'); } });   ',0
'MinaConsumerTest failure   \tThe test fails with the following error:junit.framework.ComparisonFailure: expected:&lt;&#91;Bye World&#93;&gt; but was:&lt;[]&gt; at junit.framework.Assert.assertEquals(Assert.java:81) at junit.framework.Assert.assertEquals(Assert.java:87) at org.apache.camel.component.mina.MinaConsumerTest.testSendTextlineSyncText(MinaConsumerTest.java:28)...One test sends sync the text \'World\' and the should receive \'Bye World\' in response.2008-08-08 01:35:25 589 DEBUG MinaProducer - Message received: Bye World 2008-08-08 01:35:25 589 DEBUG MinaProducer - Message received: 2008-08-08 01:35:25 589 DEBUG MinaProducer - Message received: Bye 2008-08-08 01:35:25 589 DEBUG MinaProducer - Message received: There are actually not one  but two messages received which causes the reply to be overridden by the second message. The problem is with the test itself that actually returns \'Bye \' + body + \'/n\'! Because the test uses the \'textline\' mina codec  the encoder actually adds another \'/n\'. With the textline codec there\'s one message per line  so the extra /n makes it two lines and hence the extra message. The decoder at the other end suppresses the LineDelimiter (/n)  so the extra message is actually an empty string.Removing the extra /n in the message fixes the test  but the notes above should be considered when camel-mina is used with the textline codec.   ',0
'HttpProducer premature out message creation   \tI believe there is incorrect flow in the HttpProducer which can subvert error handling in the route:in Camel 1.4.0 in HttpProducer on line 76 a \'blank\' out message is set on the exchange:Message out = exchange.getOut(true); try { int responseCode = httpClient.executeMethod(method);...1. If an IO error occurs on connect  the out message will be passed to the error handling code and if the originating endpoint was a JmsMessage it will cause an NPE when JmsMessage.getMessageId() is called. It also obscures the offending message I believe.2. A similar situation will happen if the HTTP service returned an error code; the out message will contain a reply message even though the processing resulted in an error (e.g. HTTP Status 500) 3. Also  shouldn\'t this code test whether the exchange expects an \'out\' altogether  and if not  perhaps  put just put the return HTTP status into the \'in\' message header.--Bill   ',0
'delayer pattern doesn\'t work in Spring DSL   \tYou can\'t configure the delayer pattern properly in the Spring DSL currently. I will be attaching a patch for this shortly.   ',0
'Should preserve the exchange type in the routing slip   \tCurrently  the routing slip will create a new InOut exchange for each target based on the target endpoint type. This means that someone calling from a jbi endpoint (or other endpoint with custom exchange) into the routing slip will have their exchange type changed (to mostly likely DefaultExchange). I will be including a patch to fix this issue shortly.   ',0
'Trailing slash missing in SftpConsumer   \tWhen this route  &lt;camel:route&gt; &lt;camel:from uri=\'sftp://someuser@hostname/path/to/directory/?password=secret&amp;amp;directory=true&amp;amp;binary=true&amp;amp;consumer.useFixedDelay=false&amp;amp;consumer.setNames=true&amp;amp;consumer.recursive=false\' /&gt; &lt;camel:to uri=\'file:///C:/camel/output/\' /&gt; &lt;/camel:route&gt;is configured the files in the remote directory are download  but subsequent calls of the method \'pollDir\' result in this exception:[ Thread: 1 RemoteFileComponent] SftpConsumer WARN Caught SftpException:2: No such file[ Thread: 1 RemoteFileComponent] SftpConsumer WARN Doing nothing for now  need to determine an appropriate action[ Thread: 1 RemoteFileComponent] ScheduledPollConsumer WARN An exception occured while polling: Endpoint[sftp://someuser@hostname/path/to/directory/?password=secret&amp;amp;directory=true&amp;amp;binary=true&amp;amp;consumer.useFixedDelay=false&amp;amp;consumer.setNames=true&amp;amp;consumer.recursive=false]: No such file 2: No such fileAs you can see the slash is definitely in the configured route. If I check for the missing slash and add it to the dir variable (line 115 in SftpConsumer) then the consumer works: if(!dir.startsWith(\'/\')) { dir = \'/\' + dir; }Didn\'t have the time to have a closer look. The root cause of the missing slash is somewhere else.   ',0
'Current mina component can\'t tansfer the exchange fault message body   \tI just found MinaTransferExchangeOptionTest don\'t show how to set fault message and the fault message is not a part of MinaPayloadHolder.You can\'t set the exception on the exchange in the processor   sine the camel DeadLetterChannel will try to redeliver the message.So we just need to support put the exception which need to send back to the camel client into the fault message body.   ',0
'camel-mina - codec options should fail if not possible to find i registry   \tIf you configure the codec option on camel-mina and you eg make a spelling mistake camel will default to Mina default protocol if not found. We should throw an exception instead so end user knows about this and can fix his spelling mistake.   ',0
'SftpEndpoint ignores custom ssh port   \tSftpEndpoint ignores custom ssh port. It works only if server runs on port 22.   ',0
'element should not require contextPath attribute   \tIn the Java DSL  you can say from(\'foo\').marshal().jaxb().to(\'bar\')In XML I think it would look like this:&lt;from uri=\'...\' /&gt;&lt;marshal&gt; &lt;jaxb /&gt;&lt;/marshal&gt;&lt;to uri=\'...\' /&gt;The problem is that you can\'t use the &lt;jaxb /&gt; element without the contextPath attribute  which the XSD says is required.   ',0
'The should throw the exception if there is some thing wrong with  type attribute   \tIf you specify an invalided class name in the convertBodyTo@type  you will get a NPE error  but no detail log information for the type attribute.We need to throw the exception for user to locate the error.   ',0
'JmsProducer - option requestTimeout isn\'t configured properly   \tWhen sending a JMS message to a destination using camel-jms (JMSProducer) I can\'t get it to use my requestTimeout option in the endpoint configuration. It always default to 20000.template.requestBody(\'activemq:queue:slow?requestTimeout=1000\'  \'Hello World\');This doesn\'t work as expected with a timeout of only 1 sec.   ',0
'camel-cxf component is not passing request context through correctly   \tCxfProducer.process() is not setting up the request context correctly during createCxfMessage  so later in that method propagateContext has no request data to propagate. Also  we need the exchange properties to be added to the request context  so that non-camel components can pass properties into the cxf request context.I have coded a fix for this  along with a unit test of course. I\'ll attach the patch to this JIRA.   ',0
'file component consumer.regexPattern does not work as expected (matching is applied not only to file  but also to directory)   \tfile component consumer.regexPattern does not work as expectedexample : from(\'file://d:/the_input_dir?consumer.regexPattern=.*/.xml$\'.to(whatever)(should match only files  that has extention .xml)the result of the above regexPattern is  that no file will be proccessed  regardless if an existing filename matches the pattern.FileConsumer.pollFileOrDirectory() applies the regexPattern on the starting directory (the_input_dir) which will not match.   ',0
'Remove deps on persistence-api jar  non compliant with the spec   \tI mentioned a while ago a warning I couldn\'t explain in eclipse related to the use of @UniqueConstraint in camel-jpa.It turned out to be due to the fact that camel-jpa has a dependency on persistence api  but used for testing openjpa that has a dependency on geronimo-jpa_3.0_spec. So camel-jpa pulls in two different implementation of the same spec. So far so good. It also turns out that the definition of the @UniqueConstraint annotation is different in the two jars  the persistence-api (and the camel-jpa code as implemented) being non spec compliant. I found other inconsistencies in the persistence-api impl and it seems to be based on an older version of the spec.(More precisely persistence api annotates the @interface UniqueConstraint with @Target({TYPE}) whereas the spec and the geronimo impl use: @Target({}))My recommendation is to replace the dependency on persistence-api with the geronimo version. I will commit a change for this in the next hour or so  but leave this issue open. If anybody has any objections please shout and I will revert the change.   ',0
'camel-spring/rest does not build on HP-UX   \tI\'m getting the following error from camel-spring on the HP-UX platform. I should be able to reuse a fix I made to a similar problem in CAMEL-939&#91;18:53:50&#93;: &#91;ERROR&#93; FATAL ERROR&#91;18:53:50&#93;: &#91;INFO&#93; ------------------------------------------------------------------------&#91;18:53:50&#93;: &#91;INFO&#93; com/sun/mirror/apt/AnnotationProcessorFactory&#91;18:53:50&#93;: &#91;INFO&#93; ------------------------------------------------------------------------&#91;18:53:50&#93;: &#91;INFO&#93; Trace&#91;18:53:50&#93;: java.lang.NoClassDefFoundError: com/sun/mirror/apt/AnnotationProcessorFactory&#91;18:53:50&#93;: at com.sun.tools.jxc.maven2.SchemaGenMojo.execute(SchemaGenMojo.java:143)&#91;18:53:50&#93;: at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:451)   ',0
'Inconsistency in recipient list documentation?   \tThe mail thread at http://tinyurl.com/47bqre seems to contradict the documentation at http://activemq.apache.org/camel/recipient-list.html &#8211; not sure if this is a doc issue  or a camel behavioural issue.   ',0
'CamelContext.setRoutes() documentation is misleading   \tThe javaDoc for CamelContext.setRoutes() states:\'Sets the routes for this context  replacing any current routes\'Yet when used  and the context started  startRouteDefinitions() is used first  causing any existing routes created through the definitions (such as those from RouteBuilders) to be re-created and started before the new routes provided to setRoutes() are started.   ',0
'createConnector attribute for CamelJMXAgentType should default to \'true\'   \t   ',0
'TypeConverter Exception is thrown in the latest build of camel   \tI have upgraded to the latest of Camel and when I attempt to use the content based router pattern - its now throwing an error.The contents of the Message passed is a StringSource object and from debugging camel - the BodyType is a StringSource but it is attempting to convert from a StreamCache to a StringSource. I will try and put a testcase together but if anyone has any ideas of its cause in the meantime ?The error it throws it below.thanks  Edell.No type converter available to convert from type: class org.apache.servicemix.camel.JbiMessage to the required type: org.w3c.dom.Document with value JbiMessage: org.apache.servicemix.jbi.runtime.impl.NormalizedMessageImpl@1d03b5borg.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: class org.apache.servicemix.camel.JbiMessage to the required type: org.w3c.dom.Document with value JbiMessage: org.apache.servicemix.jbi.runtime.impl.NormalizedMessageImpl@1d03b5b at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:117) at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:65) at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:69) at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:51) at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:528) at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420) at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98) at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63) at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:75) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:174) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:96) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:63) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:47) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66) at org.apache.servicemix.camel.CamelProviderEndpoint.handleActiveProviderExchange(CamelProviderEndpoint.java:115) at org.apache.servicemix.camel.CamelProviderEndpoint.process(CamelProviderEndpoint.java:73) at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:600) at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:554) at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchangeInTx(AsyncBaseLifeCycle.java:456) at org.apache.servicemix.common.AsyncBaseLifeCycle$2.run(AsyncBaseLifeCycle.java:341) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) at java.lang.Thread.run(Thread.java:595)   ',1
'BeanInfo - should consider overridden methods when selecting method from operations list   \tSee nabble:http://www.nabble.com/BeanInfo.chooseMethodWithMatchingBody-throws-an-AmbiguousMethodCallException-when-there\%27s-no-ambiguity-td19959124s22882.html   ',0
'Component spring \'event\' is not auto registered by Camel. Add a Event file in the folder META-INF/services/org/apache/camel/compoment of camel-spring   \tComponent spring \'event\' is not auto registered by Camel. Add a Event file in the folder META-INF/services/org/apache/camel/compoment of camel-spring.   ',0
'camel:dot - pipeline is drawn as a multicast   \tAnd it has a few other areas as well that could be polished.   ',0
'spring integration xsd change breaks component   \tThread is here http://www.nabble.com/-HEADS-UP--camel-spring-integration-issue-td20331450s22882.html   ',0
'XQuery creates an empty out message that makes it impossible to chain more processors behind it   \tWhen using XQuery the getOut() function is called on the message so if it is not used at a place where the out is filled an empty out message will be created. With this xquery cannot be used for example in setBody  setHeader... and anywhere where the out is not filled.An example where this causes real trouble:&lt;choice&gt; &lt;when&gt; &lt;xquery&gt;...&lt;/xquery&gt; &lt;to uri=\'direct:follow\' /&gt; &lt;/when&gt;&lt;/choice&gt;...&lt;from uri=\'direct:follow\'&gt;&lt;to ...&gt;&lt;to ...&gt;In the patch the out property in the xquery context is filled only if it is not null. With it all of my pipelines seem to work well for me.   ',0
'PipelineConcurrentTest.java fails randomly   \tThe test fails with an IllegalStateException: Queue full. I believe the reason for this is that there are 10000 messages sent  but the default queue size is 1000. On a fast machine  the queue fills up before the consumer gets a chance to pop the messages from the queue.   ',0
'org.apache.camel.Message - hasAttachments is buggy   \tI must use if (exchange.getIn().getAttachments().size() &gt; 0) {Instead of if (exchange.getIn().hasAttachments()) {As the latter always returns false. Or at least returns false even though the size is &gt; 0   ',0
'.unmarshal(new JaxbDataFormat(\'com.foo.bar\')) returning JAXBElement   \tusing .unmarshal(new JaxbDataFormat(\'com.foo.bar\') is returning a JAXBElement instead of the desired object that was generated by xjc.   ',0
'Can\'t get the soap header when the camel-cxf endpoint working in the PAYLOAD data fromat   \tWhen I added a unit test to show how to get the SOAP header from a PAYLOAD camel-cxf endpoint   I found the soap header stuff is not working.   ',0
'ThroughputLogger incorrectly reports duration 0   \tfrom the apache-camel-load test:2008-11-14 15:27:01 114 &#91;mponent@1296d1d&#93; INFO aset:myDataSet?produceDelay=10 - Sent: 600 messages so far. Last group took: 0 millis which is: 85.106 messages per second. average: 80.128The ThroughputLogger used by DataSet resets the duration before reporting it.   ',0
'jetty endpoints ignore host specified in URI and expose an endpoint on all interfaces   \thttp://www.nabble.com/Jetty-and-Mina\%3A-how-to-bind-to-\%22anylocal\%22-AKA-\%22wildcard\%22-address--tp20475674s22882p20494645.html   ',0
'camel-jetty - Exchange failures should not be returned as 200   \tThe code below: protected RouteBuilder createRouteBuilder() throws Exception { return new RouteBuilder() { public void configure() throws Exception { errorHandler(noErrorHandler()); from(\'jetty:http://localhost:8080/myapp/myservice\').process(new MyBookService()); } }; } public class MyBookService implements Processor { public void process(Exchange exchange) throws Exception { throw new IllegalArgumentException(\'Damm\'); } }Will return http response code 200. We should let end users easily set what response code they want and in case of route failures we should probably return 500 and return the stracktrace in the body   ',0
'Delayer not working as expected.   \tThe delayer expression is not evaluated in my route builder:from(waitQueueName).delayer(header(HEADER_EXECUTION_TIME)).bean(routerBean).recipientList(header(HEADER_TARGET_ROUTE));While the recipientList expression is working the header expression is always ignored. I stepped through the code and saw that in DelayerType.createAbsoluteTimeDelayExpression() \'expr.getLanguage()\' is always null: private Expression createAbsoluteTimeDelayExpression(RouteContext routeContext) { ExpressionType expr = getExpression(); if (expr != null) { if (ObjectHelper.isNotNullAndNonEmpty(expr.getLanguage())) { return expr.createExpression(routeContext); } } return null; }I have seen that this was changed in 1.5.0 (http://issues.apache.org/activemq/browse/CAMEL-811).   ',0
'camel-http - does not remove httpClient.xxx URI options   \tWhen using the options to configure httpClient using URI option  they should be removed from the uri that is left over to the HTTPProducer.http://someserver?httpClient.soTimeOut=5000should remove the httpClient.xxx so it\'shttp://someserver   ',0
'ParallelProcessing and executor flags are ignored in Multicast processor   \tThe parallelProcessing and executor arguments are ignored in the constructor of MulticastProcessor. Here is a call that MulticastType makesorg.apache.camel.model.MulticastType.java return new MulticastProcessor(list  aggregationStrategy  isParallelProcessing()  threadPoolExecutor);MulticastProcessor ignores parallelProcessing and executor arguments and invokes a chain constructor with \'.. false  null ..\'org.apache.camel.processor.MulticastProcessor.java public MulticastProcessor(Collection&lt;Processor&gt; processors  AggregationStrategy aggregationStrategy  boolean parallelProcessing  ThreadPoolExecutor executor) { this(processors  aggregationStrategy  false  null  false); } public MulticastProcessor(Collection&lt;Processor&gt; processors  AggregationStrategy aggregationStrategy  boolean parallelProcessing  ThreadPoolExecutor executor  boolean streaming) { notNull(processors  \'processors\'); this.processors = processors; this.aggregationStrategy = aggregationStrategy; this.isParallelProcessing = parallelProcessing; if (isParallelProcessing) { if (executor != null) { this.executor = executor; } else { // setup default Executor this.executor = new ThreadPoolExecutor(processors.size()  processors.size()  0  TimeUnit.MILLISECONDS  new ArrayBlockingQueue&lt;Runnable&gt;(processors.size())); } } this.streaming = streaming; }Attached a patch but have not tested it. Also need a unit test for this.   ',0
'Camel should propagate exception cause in InOnly scenarios   \tIn the case an exception is handled by the DeadLetterChannel  Camel will currently set the exception to null and add an exchange property containing the exception. We should also add this as a message header so that it will be propagated to external services  like a JBI service.   ',0
'CxfExchange does not copy unit of work and thus its null and thus NPE is thrown   \tWilliam could you check this error reported by end userSee nabble:http://www.nabble.com/UnitOfWork-td20829434s22882.html   ',0
'camel-mina adds two versions of slf4j on the classpath   \tOne version comes from camel-mina (version 1.5.5) and one from mina-core (version 1.4.3). This causes problems as seen when trying to use camel-mina at runtime or in my case deploying to ServiceMix. This is the error I getorg.apache.xbean.kernel.ServiceRegistrationException: java.lang.NoSuchFieldError: name at org.apache.xbean.kernel.standard.ServiceManagerRegistry.registerService(ServiceManagerRegistry.java:424) at org.apache.xbean.kernel.standard.StandardKernel.registerService(StandardKernel.java:220) at org.apache.xbean.server.spring.loader.SpringLoader.load(SpringLoader.java:152) at org.apache.servicemix.common.xbean.AbstractXBeanDeployer.deploy(AbstractXBeanDeployer.java:83) at org.apache.servicemix.camel.CamelSpringDeployer.deploy(CamelSpringDeployer.java:83) at org.apache.servicemix.common.BaseServiceUnitManager.doDeploy(BaseServiceUnitManager.java:88) at org.apache.servicemix.common.BaseServiceUnitManager.deploy(BaseServiceUnitManager.java:69) at org.apache.servicemix.jbi.framework.DeploymentService.deployServiceAssembly(DeploymentService.java:508) at org.apache.servicemix.jbi.framework.AutoDeploymentService.checkPendingSAs(AutoDeploymentService.java:482) at org.apache.servicemix.jbi.framework.AutoDeploymentService.checkPendingComponents(AutoDeploymentService.java:535) at org.apache.servicemix.jbi.framework.AutoDeploymentService.updateSharedLibrary(AutoDeploymentService.java:317) at org.apache.servicemix.jbi.framework.AutoDeploymentService.updateArchive(AutoDeploymentService.java:254) at org.apache.servicemix.jbi.framework.AutoDeploymentService.monitorDirectory(AutoDeploymentService.java:667) at org.apache.servicemix.jbi.framework.AutoDeploymentService.access$800(AutoDeploymentService.java:62) at org.apache.servicemix.jbi.framework.AutoDeploymentService$1.run(AutoDeploymentService.java:631) at java.util.TimerThread.mainLoop(Timer.java:512) at java.util.TimerThread.run(Timer.java:462)Caused by: java.lang.NoSuchFieldError: name at org.slf4j.impl.SimpleLogger.&lt;init&gt;(SimpleLogger.java:83) at org.slf4j.impl.SimpleLoggerFactory.getLogger(SimpleLoggerFactory.java:67) at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:103) at org.apache.mina.util.NamePreservingRunnable.&lt;init&gt;(NamePreservingRunnable.java:32) at org.apache.mina.transport.socket.nio.SocketAcceptor.startupWorker(SocketAcceptor.java:165) at org.apache.mina.transport.socket.nio.SocketAcceptor.bind(SocketAcceptor.java:141) at org.apache.camel.component.mina.MinaConsumer.doStart(MinaConsumer.java:60) at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47) at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:421) at org.apache.camel.impl.DefaultCamelContext.startRoutes(DefaultCamelContext.java:659) at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:632) at org.apache.camel.spring.SpringCamelContext.maybeDoStart(SpringCamelContext.java:167) at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:162) at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47) at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:97) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:116) at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:77) at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:75) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:246) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:617) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:355) at org.apache.xbean.server.spring.configuration.SpringConfiguration.&lt;init&gt;(SpringConfiguration.java:63) at org.apache.xbean.server.spring.configuration.SpringConfigurationServiceFactory.createService(SpringConfigurationServiceFactory.java:106) at org.apache.xbean.kernel.standard.ServiceManager.start(ServiceManager.java:420) at org.apache.xbean.kernel.standard.ServiceManager.initialize(ServiceManager.java:200) at org.apache.xbean.kernel.standard.RegistryFutureTask$RegisterCallable.call(RegistryFutureTask.java:110) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269) at java.util.concurrent.FutureTask.run(FutureTask.java:123) at org.apache.xbean.kernel.standard.ServiceManagerRegistry.registerService(ServiceManagerRegistry.java:409)   ',0
'The Mina VM protocol is not recognising codec and other options   \tUse of the vm protocol appears to ignore any codec options. There could be other options that are missed also.Using the same URI but for tcp works fine.   ',0
'camel-velocity - log4j is needed at runtime   \tSee nabble:http://www.nabble.com/velocity\%3A-Couldn\%27t-find-class-org.apache.velocity.runtime.log.SimpleLog4JLogSystem-td21036449s22882.htmlJon do you mind taking a look at this  you are are good at maven pom\'s   ',0
'MockEndpoint - sleep for empty test doesnt work   \tSee nabble:http://www.nabble.com/MockEndpoint---sleep-for-empty-tests-is-flawed--td21067367s22882.html   ',0
'Throttler appears to \'throttle\' per thread instead of throttling across multiple threads   \t   ',0
'@EndpointInject can not lookup bean if endpoint is defined directly as a consumer (from)   \tI was messing with camel-spring and routes using spring DSLI had this part of unit test code @EndpointInject(name = \'myFileEndpoint\') protected Endpoint inputFile;To lookup an endppoint with the given name myFileEndpointBut if I define it directly then it cannot be found &lt;route&gt; &lt;from id=\'myFileEndpoint\' uri=\'file://target/antpathmatcher?consumer.recursive=true&amp;amp;filter=#myFilter\'/&gt; &lt;to uri=\'mock:result\'/&gt; &lt;/route&gt;So I have to define it as a loose endpoint as: &lt;endpoint id=\'myFileEndpoint\' uri=\'file://target/antpathmatcher?consumer.recursive=true&amp;amp;filter=#myFilter\'/&gt; &lt;route&gt; &lt;from ref=\'myFileEndpoint\'/&gt; &lt;to uri=\'mock:result\'/&gt; &lt;/route&gt;   ',0
'ConcurrentModificationException when stop the camel-osgi bundle   \tERROR: Error stopping mvn:org.apache.camel/camel-osgi/1.5.0 (org.osgi.framework.BundleException: Activator stop error.)java.util.ConcurrentModificationException at java.util.HashMap$HashIterator.nextEntry(HashMap.java:841) at java.util.HashMap$ValueIterator.next(HashMap.java:871) at org.apache.camel.osgi.Activator.mayBeRemoveComponentFor(Activator.java:85) at org.apache.camel.osgi.Activator.stop(Activator.java:120) at org.apache.felix.framework.util.SecureAction.stopActivator(SecureAction.java:613) at org.apache.felix.framework.Felix._stopBundle(Felix.java:1995) at org.apache.felix.framework.Felix.stopBundle(Felix.java:1952) at org.apache.felix.framework.Felix.setFrameworkStartLevel(Felix.java:1151) at org.apache.felix.framework.StartLevelImpl.run(StartLevelImpl.java:267) at java.lang.Thread.run(Thread.java:595)   ',0
'Pipeline could change the MEP unintended   \tWhen exchanges is processed from pipeline they result is copyed as input to the next exchange. However during this copy Camel could potentially change the MEP to InOut. It should respect the original MEP.The flaw is in ExchangeHelper#copyResultsFixing this also forces end users to use the correct send/request method on ProducerTemplate. Now Camel will keep the MEP.So if you are using send then its inOnly and then you the there is no result. Use request for InOut MEP\'s.This breaks a few of our own unit testing that was using the wrong method.   ',0
'SFTP : Polling - Cannot list directory Error   \thttp://www.nabble.com/SFTP-\%3A-Polling---Cannot-list-directory-to21413159s22882.html   ',0
'Starting Camel using Main from camel:run or Main.class - countdown latch is hanging   \tThe countdown latch in MainSupport is not completed when Main is stopping.Then we have a hanging thread. Can bee seen using ctrl + /   ',0
'Can only interact with servicemix-http if logging is at DEBUG   \tGiven the following camel DSL:from(\'activemq:queue.testJms.in\')  .to(\'jbi:service:urn:oms:testHttp?mep=in-out\')  .to(\'activemq:queue.testJms.out\'); and the following xbean.xml for the smx (3.3) SU:&lt;http:endpoint  service=\'oms:testHttp\'  endpoint=\'testHttp\'  role=\'provider\'  locationURI=\'http://localhost:8080/testP1\'&gt; &lt;/http:endpoint&gt; then Camel operates correctly (or at least as desired) only if DEBUG logging is enabled in the org.apache.servicemix.http package. This seems to be because a DOMSource is returned (which Camel can convert). If the log level is reduced (say to WARN) then a StreamSource object is returned instead which Camel appears unable to convert. This results in stack traces such as:ERROR - DeadLetterChannel - Failed delivery for exchangeId: ID-davisond-laptop/53380-1232099798317/0-0. On delivery attempt: 0 caught: org.apache.camel.RuntimeCamelException: javax.xml.transform.TransformerException: java.io.IOException: Attempted read on closed stream. org.apache.camel.RuntimeCamelException: javax.xml.transform.TransformerException: java.io.IOException: Attempted read on closed stream.  at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:441)  at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeCo+nverter.java:57)   ',0
'Jetty HTTP SelectChannelConnector is not closed when CamelContext is stopped   \tWhen the camel-jetty component is shut down  it leaves Jetty SelectChannelConnector instances active.   ',0
'Apache camel example reportincident dependency removed from pom.xml   \tHi Someone has removed the following dependency from the camel pom.xml file : &lt;dependency&gt; &lt;groupId&gt;org.apache.camel&lt;/groupId&gt; &lt;artifactId&gt;camel-example-reportincident&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt;   ',1
'SQL component doesn\'t handle wrong number of parameters   \tNPE thrown when null body sent to to SQL endpoint. When to many parameters are set then exception is thrown but nothing wrong happens when to less parameters are set.It should be possible to set null as a body as there might be parameterless statement to execute. There should be consistent Exception thrown when wrong number of parameters is set.   ',0
'camel-ftp : uri set on endpoint has stripped all parameters  that is wrong as they should be there as well   \tSee nabblehttp://www.nabble.com/Camel-Remote-File-Producer---Recipient-List-Password-Issue-td21678952s22882.htmlThe bug is introduced with CAMEL-941   ',1
'Two more NullPointerExceptions when context classloader is null   \tWhen I applied the CAMEL-1301 fix (thanks Claus) I hit two more NullPointerExceptions caused by code that assumes that the context classloader will never be null.Here\'s the relevant part of one stack trace:java.lang.NullPointerException at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.findPackages(AnnotationTypeConverterLoader.java:97) at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.findPackageNames(AnnotationTypeConverterLoader.java:91)And the other:java.lang.NullPointerException at org.apache.camel.util.ResolverUtil.getResources(ResolverUtil.java:402) at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:313) at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:290)A patch is attached.   ',0
'EndpointMessageListener should respect ExchangePattern   \tIn all current releases  org.apache.camel.component.jms.EndpointMessageListener.onMessage() has the following logic (line 90 in 1.6.0 code):// send the replyif (rce == null &amp;&amp; body != null &amp;&amp; !disableReplyTo) { sendReply(replyDestination  message  exchange  body);}This logic should also respect ExchangePattern of the exchange  so I propose a change to:// send the replyif (rce == null &amp;&amp; body != null &amp;&amp; exchange.isOutCapable()) { sendReply(replyDestination  message  exchange  body);}This change allows a processing pattern where the route may change the ExchangePattern using methods like RouteBuilder.inOnly() to switch the MEP at will so that the reply is send at a later time (true asynchronous exchange). This processing pattern is particularly useful for integrating long running services. For example // Java DSLfrom(\'activemq:my_queue?exchangePattern=InOnly\').to(\'predict_weather://?reply_later=true\');// orfrom(\'activemq:my_queue2\').inOnly().to(\'predict_weather://?reply_later=true\');The flaw of the current logic makes it impossible to do true asynchronous exchange  because 1) it does not respect the ExchangePattern; 2) if property \'disableReplyTo\' is used  the \'org.apache.camel.jms.replyDestination\' property will not be set (see method createExchange in the same file)  thus downstream cannot find the reply destination.The proposed change can also deprecate the disableReplyTo property and put the MEP concept into good use.   ',0
'ExchangeHelper should respect ExchangePattern.InOptionalOut   \tThe utility method org.apache.camel.util.ExchangeHelper.copyResults() is use by many core classes. However  this method does not properly support MEP InOptionalOut.Assuming in an InOptionalOut exchange  having no out message means just that &#8211; no out message should be sent  then the following lines in this method// Message out = source.getOut(false); if (out != null) { result.getOut(true).copyFrom(out); } else { // no results so lets copy the last inputshould be changed to:// Message out = source.getOut(false); if (out != null) { result.getOut(true).copyFrom(out); } else if (result.getPattern() == ExchangePattern.InOptionalOut) { result.setOut(null); } else { // no results so lets copy the last input   ',0
'JaxbDataFormat is not thread-safe   \tJaxbDataFormat reuses the Marshaller/Unmarshaller instances.However  according to the https://jaxb.dev.java.net/faq/index.html#threadSafety  Marshaller/Unmarshaller instances are NOT thread safe  so you can\'t use them from separate threads at the same time.Due to this we are getting exceptions from the JAXB implementation (like ClassCastException or \'org.xml.sax.SAXException: FWK005 parse may not be called while parsing.\'). Everything works nice with our custom JaxbDataFormat that creates new Unmarshaller/Marshaller instance on every request.Also  lazy-creating instances (like JAXBContext) in getter methods is not thread-safe as well (because explicit synchronization is required).   ',0
'File component - better support for absolute path   \tSee nabble:http://www.nabble.com/File\%3A-using-absolute-file-paths-with-moveExpressions-td22253199.html   ',0
'CamelContext - Add ClassResolver to be used when you need to load a class instead of ObjectHelper.loadClass to work in OSGi environments   \tAdd the skeleton and let Willem add the stuff in camel-osgi   ',0
'Can not load the QueueBrowserStrategy in OSGI environment   \tHere is the mail thread which discusses about it.http://www.nabble.com/Classloading-and-OSGI-to22303475.html#a22303475   ',0
'JMSMessage vanishes attachments   \tWhen using this kind of route&lt;from uri=\'activemq:queue:test\'/&gt;&lt;camel:process ref=\'mailProcessor\' /&gt;&lt;to uri=\'smtp://localhost:25?to=user@localhost\' /&gt;and trying to enrich the message in the mailProcessor withexchange.getIn().addAttachment(\'attachement.txt\'  new DataHandler(\'Hello world\'  \'text/plain\'));The received mail doesn\'t contains any attachment.If the input \'from\' is a \'direct\' instead of activemq  it works fine.Inspecting source code  MessageSupport.copyFrom(Message that) doesgetAttachments().putAll(that.getAttachments());but the child class JmsMessage doesn\'t.   ',0
'StreamCache causes to many type converters not possible   \tSince StreamCache is default turned on it cause to many convters attempt that fails in MessageSupport.No type converter available to convert from type: java.lang.Integer to the required type: org.apache.camel.StreamCache with value 1It hurts performance to much. See nabble:http://www.nabble.com/Performance-and-MessageSupport.getBody-\%281.6.0\%29-td22291841s22882.html   ',0
'unmarshaling of data always send the last occurence of the stream   \tThe unmarshaling method of BindyDataFormat (CSV or Key Value Pair) does not create a new model object for each new line of the stream readed   ',0
'Unable to resolve scripting languages in OSGi environment   \tThe OsgiLanguageResolver.java created since CAMEL-1221 does not resolve scripting languages by using the default resolver declared in camel-script. The DefaultLanguageResolver  however in the non-osgi context  handles it properly.This leads to NullPointerException while launching a route in an OSGi container using a scripting language  e.g. javascript.Exception in thread \'SpringOsgiExtenderThread-2\' java.lang.NullPointerException at org.apache.camel.model.language.ExpressionType.createPredicate(ExpressionType.java:145) at org.apache.camel.model.ExpressionNode.createFilterProcessor(ExpressionNode.java:95) at org.apache.camel.model.WhenType.createProcessor(WhenType.java:57) at org.apache.camel.model.ChoiceType.createProcessor(ChoiceType.java:73)...   ',1
'A request route with a topic node incurs a 20 second wait and refers to the wrong MEP.   \tIf a route contains a node that publishes to a topic  the route is incorrectly suspended for a default 20 seconds at the topic node. Further  JmsProducer.java checks the MEP of the original request Exchange and not the endpoint of the topic.For example  say I have a route built like this:from(\'activemq:queue:request\'). to(\'generate_news\'). to(\'activemq:topic:news\'). to(\'do_something_else\');The original request is expecting a reply. However  after the \'news\' is pumped into the news topic  there is a default 20 second wait (requestTimeout). This wait always results in the exception: \'The OUT message was not received within: 20000 millis on the exchange...\' After reading the JmsProducer code  I changed the route to the following:from(\'activemq:queue:request\'). to(\'generate_news\'). to(\'activemq:topic:news?exchangePattern=InOnly\'). to(\'do_something_else\');This reveals the root of the bug  which is in the first few lines of method org.apache.camel.component.jms.JmsProducer.process(Exchange):// public void process(final Exchange exchange) { final org.apache.camel.Message in = exchange.getIn(); if (exchange.getPattern().isOutCapable()) {The above if statement checks the MEP of the original request\'s Exchange and not the new endpoint of the news topic. This makes the above \'?exchangePattern=InOnly\' configuration useless  because the original request MEP is InOut. The result is that after that 20 second time-out  the temporary queue for the original request has expired  so the whole request failed. Note that the next node \'do_something_else\' is never reached due to the time-out exception.   ',0
'JMX instrumentation - will add DeadLetterChannel even if you have defined to use NoErrorHandler   \tSee nabble:http://www.nabble.com/StreamCaching-in-Camel-1.6-td22305654s22882.htmlI will add an unit test that demonstrates this:org.apache.camel.processor.ChoiceNoErrorHandlerTestThe route should at all time not contain any error handler at all  regardless wether JMX is enabled or not.   ',0
'JMS - Sending a message with jmsTemplate102=true fails   \tSee nabble:http://www.nabble.com/Apache-Camel-2.0-M1-java.lang.ClassCastException\%3A-org.apache.camel.component.jms.JmsConfiguration\%24CamelJmsTeemplate102-td22665483s22882.htmlThe ClassCastException is because of the old JMS API is used.Camel should test whether the template is 1.1 or 1.0.2 and cast to correct type.   ',1
'Allow parementer append for jms bindings with no endpoint   \tSee test failures in https://issues.apache.org/activemq/browse/AMQ-2182   ',0
'JmsPollingConsumer - receive does not work   \tThe timeout values to set on Spring JmsTemplate is wrong. We should uses the provided constants on JmsTemplate for this /** * Timeout value indicating that a receive operation should * check if a message is immediately available without blocking. */ public static final long RECEIVE_TIMEOUT_NO_WAIT = -1; /** * Timeout value indicating a blocking receive without timeout. */ public static final long RECEIVE_TIMEOUT_INDEFINITE_WAIT = 0;Is the correct values. Looks like the values was reverted in the camel-jms code   ',0
'HTTP_URI and HTTP_PATH message headers not concatenated when sending messages to http endpoint   \tWhen a message is sent to an http endpoint  the path specified in the HTTP_PATH header is ignored.In the HttpProducer.createMethod() of the camel-http component  the URI is taken from the HTTP_URI header or the endpoint  but the HTTP_PATH header is not concatenated. See also the discussion on the mailing list: http://www.nabble.com/Setting-a-path-in-message-header-with-Camel-http-2.0M1-td22781504.html   ',0
'deploy the CamelContext with velocity endpoint into the Servicemix 4.0 will get the  NoClassDefFoundError   \t&#91;trace&#93; ******************************************************************* &#91;debug&#93; Starting Apache Velocity v1.5 (compiled: 2007-02-22 08:52:29) &#91;trace&#93; RuntimeInstance initializing. &#91;debug&#93; Default Properties File: org/apache/velocity/runtime/defaults/velocity.properties &#91;debug&#93; Trying to use logger class org.apache.velocity.runtime.log.Log4JLogChute &#91;debug&#93; Couldn\'t find class org.apache.velocity.runtime.log.Log4JLogChute or necessary supporting classes in classpath.org/apache/log4j/Layoutjava.lang.NoClassDefFoundError: org/apache/log4j/Layout at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:164) at org.apache.velocity.util.ClassUtils.getClass(ClassUtils.java:76) at org.apache.velocity.util.ClassUtils.getNewInstance(ClassUtils.java:95) at org.apache.velocity.runtime.log.LogManager.createLogChute(LogManager.java:147)We can get around this issue by replacing the org.apache.velocity.runtime.log.Log4JLogChute withorg.apache.velocity.runtime.log.Log4JLogChute  and also need to update the Servicemix Velocity bundle to 1.6.   ',0
'Recursively scan multipart nodes of an email for attachments - not just top level nodes   \tThe current code will only scan the top level of a multipart message. This misses any attachments that are under another node.All unit tests still run for me after applying this patch.   ',0
'ErrorHandler to be wrapped at every node incl children   \t   ',0
'Converting from stream/reader to string changes line breaks other than \'/n\'   \tThe IOConverter#toString(Reader/Stream) copies the input data line by line. A line is considered to be terminated by any one of a line feed (\'/n\')  a carriage return (\'/r\')  or a carriage return followed immediately by a linefeed. Unfortunately  the lines are always concatenated with \'/n\'  so that HL7 messages (which use \'/r\') become unusable after conversion.Also see http://www.nabble.com/HL7-messages-become-unusable-after-convertBodyTo\%28String.class\%29-td23219748.html   ',0
'ClassCastException when using camel-cxf and camel-jms in the InOut same flow   \tAs per thread on FUSE forum http://fusesource.com/forums/thread.jspa?threadID=834&amp;tstart=0:[[I have a camel route that listens on a CXFEndpoint (for MESSAGE data as DOMSource) and routes the message to a JMS queue. Something like:&lt;route&gt;&lt;from uri=\'cxf:bean:passportRequestWS?dataFormat=MESSAGE\'/&gt;&lt;to uri=\'soapProcessor\'/&gt;&lt;convertBodyTo type=\'java.lang.String\'/&gt;&lt;to uri=\'activemq:queue:blah\'/&gt;&lt;convertBodyTo type=\'javax.xml.transform.dom.DOMSource\'/&gt;&lt;/route&gt;My understanding is that the JMS producer will realize that the exchange is InOut  create a temporary queue for the response  and then wait for the response to arrive on the temporary queue before sending the original CXFExchange on along the pipeline. Indeed  this is what I observe! However  I?ve discovered a little nasty.When the JMSProducer gets in the incoming message  it sets the Out message of the original CXFExchange to a JmsMessage. Then  the pipeline processor calls exchange.getOut on the CXFExchange and BANG! we get a class-cast exception. Turns out that the CXFExchange.getOut() method always casts the message to a CxfMessage. Ouch. Surely this means then that camel-cxf can?t talk to any producer that does not produce a CXFMessage - very limiting.]]The response on the form from davsclaus was:[[Well spotted.If just the damn Exchange was final so we had one implementation of it. But I guess we have to thank Java generics for that so the first API had generics for per component.Could you create a ticket in JIRA for this?As a workaround you can add a processor where you have full access to the Exchange so you can set a CxfMessage as the payload.]]   ',0
'SFTP GenericFileProducer.createFileName produces OS normalized file name  that doesn\'t work with SFTP   \tThe use of File.separator and FileUtil.normalizePath in GenericFileProducer.createFileName produce a OS normalized file name  that doesn\'t work with SFTPe.g. outboundout_20090501_091940_ACC.txt which will not work produce a file called outboundout_20090501_091940_ACC.txtThe proper name should be outbound/out_20090501_091940_ACC.txt   ',0
'camel-cxf producer loses the content-type   \tcamel-cxf doesn\'t put the Protocol-Header into the camel message header  so we lost the content-type message.Here is the mail thread for the discussion.http://www.nabble.com/camel-cxf-content-type-response-header-tt23370337.html   ',0
'Warning \'Disabling JMSReplyTo as this Exchange is not OUT capable\' on false positives in JBossAS5   \tsee: http://www.nabble.com/Disabling-JMSReplyTo-as-this-Exchange-is-not-OUT-capable-td23524909s22882.html   ',0
'Race condition in IdempotentConsumer   \tA possible possible race condition exists in the IdempotentConsumer implementation:The code first checks in the MessageIdRepository if the message was already processed. If not then it processes the message andafterwards adds the id to the repository. (See also http://issues.apache.org/activemq/browse/CAMEL-1451). There is no lockingbetween the check with \'contains\' and the insert with \'add\'. So if multiple threads/instances try this in parallel for the same id  thenit might happen that more than one finds the id not yet contained in the repository and the same message is processed multipletimes.I enclose an extended version of IdempotentConsumerTest which illustrates the problem.It is important to note that even if the test demonstrates the issue with an MemoryIdempotentRepository a solution should alsoaddress the case of a database based respository in a clustered environment. So this might imply that some locking mechanism on thedatabase is required.   ',0
'JMS-Headers are ignored in Producer   \tCamel jms producer ignores some JMSHeaders. For example the header JMSPriority is ignored - due to the comment in the code  because it is set by the producer. But it should not only be set by the produer due to the received message  it should also be possible to set a priority using the JMSPriority header on the consumer. (See also the option preserveMessageQos on the jms endpoint - if every JMSHeader is ignored by the producer it is impossible to set Qos-Properties on the message.)The reason for the bug is in org.apache.camel.component.jms.JmsBinding#appendJmsProperty. The follwoing JMS message headers are useful for sending messages and therefore should be copied to the jms message: JMSDestination JMSDeliveryMode JMSExpiration JMSPriority JMSMessageID JMSTimestamp   ',0
'Java DSL for multicast  split  aggregate does not use block explicit   \tWhen using one of the EIP that uses a nested route for sub processing  typically EIPs that does some sort of aggregation such as multicast (for aggregating a response) split aggregateAnd maybe a few othersThey should use pushBlock so the end() DSL to indicate end of sub route works correctly in Java DSL.   ',0
'Simple language support for AND / OR to concat multiple expressions fails if string constants are enclosed in single quotation marks   \tThe current implementation for CAMEL-1637 fails if the string constants in the two expressions are enclosed in single quotation marks as given in the following example ${in.header.foo} == \'abc\' and ${in.header.bar} == \'123\'This is due to an issue with the GROUP_PATTERN regular expression in SimpleLanguageSupport.java. The matching pattern in between the single quotes is greedy and thus does not match correctly.   ',1
'bean component should thrown NoTypeConverterException when bean parameter binding cannot convert to method signature type   \tSee nabble:http://www.nabble.com/Error-not-raised-by-Camel-if-the-\%40Header-type-define-in-a-bean-is-not--correct-td24051086s22882.html   ',0
'camel-example-etl - bug in sample about type converter   \t   ',0
'camel-cxf defaultHeaderFilterStrategy doesn\'t filter the Camel releates headers   \tHere is the mailing thread&#91;1&#93; which discuss this issue.&#91;1&#93; http://www.nabble.com/-camel-cxf--Stripping-headers-td24143323.html   ',0
'SpringCamelContext will get into endless loop of calling start method if the route service calling the ApplicationContext refresh method in it\'s initial method   \tHere is the mail thread which discusses this issue.http://www.nabble.com/StackOverFlow-error-with-Camel-1.6.1-tp24172060p24172060.html   ',0
'Failover load balancer - should prepare exchange before failover   \tWhen the failover load balancer does a fail over it only clears the exception.When you use dead letter channel or default error handler with redeliveries enabled they will have such information.This should also be cleared before failover. So we have a clean and fresh start.   ',0
'Unable to read post params from request   \tIf consuming messsages from jetty endpoint there is no way to read post parameters from HttpServletRequest. In example getting HttpServletRequest from body :HttpServletRequest req = exchange.getIn().getBody(HttpServletRequest.class);req.getParameterMap() returns allways empty mapThe problem is that jetty Request.extractParameters() method is trying to read post parameters from Request.getInputStream(). But unfortunately someone strips the input stream before and req.getInputStream() returns allways 0 bytesThe workaround for me is to extend DefaultHttpBinding as described in: http://camel.apache.org/jetty.htmlMyHttpBinding .javapublic class MyHttpBinding extends DefaultHttpBinding { public void readRequest(HttpServletRequest request  HttpMessage message) { request.getParameterMap(); super.readRequest(request message); }}calling request.getParameterMap() will cache parameters inside jetty Request and it\'s possible to query params later  without having inputStream   ',0
'Camel builds should not use platform specific encoding   \tThe builds on my Mac use the platform specific encoding thus leading to the following warngin:[WARNING] Using platform encoding (MacRoman actually) to copy filtered resources  i.e. build is platform dependent!We should use the &lt;project.build.sourceEncoding&gt; property to specify a project specific encoding (UTF-8).   ',0
'License for One-JAR classes not included in camel-example-spring one-jar artifact. Also apache legal files missing   \tThe license for the com/simontuffs/onejar files is at http://one-jar.sourceforge.net/index.php?page=documents&amp;file=license.When I build camel-example-spring neither this license nor the apache license nor apache notice file is in the one-jar.jar artifact.I\'d suggest disabling the one-jar plugin until someone can figure out how to include these files.   ',0
'camel-irc parsing of channel name and parameters is incorrect   \tIf you try and pass some parameters to camel-irc it turns out that camel joins a different IRC channel than expected  for example a URI like:irc://camel-con@irc.codehaus.org:6667/#camel-test?nickname=camel-concauses camel to join #camel-test?nickname=camel-con and not #camel-test with a nickname of camel-con. Will attach a patch that addresses this and updates the unit test.   ',0
'CustomerServicesWsAddressingTest hangs sometimes   \tSometimes I get the following error&#91;23:59:55&#93;: Running org.apache.camel.itest.customerrelations.CustomerServicesWsAddressingTest&#91;00:00:06&#93;: Exception in thread \'DefaultMessageListenerContainer-4\' java.lang.NullPointerException&#91;00:00:06&#93;: at java.lang.String.indexOf(String.java:1564)&#91;00:00:06&#93;: at java.lang.String.indexOf(String.java:1546)&#91;00:00:06&#93;: at org.springframework.jms.support.JmsUtils.buildExceptionMessage(JmsUtils.java:255)&#91;00:00:06&#93;: at org.springframework.jms.listener.DefaultMessageListenerContainer.handleListenerSetupFailure(DefaultMessageListenerContainer.java:745)&#91;00:00:06&#93;: at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:897)&#91;00:00:06&#93;: at java.lang.Thread.run(Thread.java:595)... which then causes a hang. Its a known issue in spring-jms 2.5.6 (http://jira.springframework.org/browse/SPR-5470). Happens when we try to do a shutdown of the context. Reverting back to 2.5.5 fixes this issue  but we probably don\'t want to do that   ',1
'camel-jms - wrong defaults causes message listener to use new thread when receiving a message   \tJmsConfiguratiuon have a bad defaultmaxMessagesPerTask=1It should be -1 as we do not want to strict the DefaultMessageListenerContainer to only handle 1 message per thread.   ',0
'jaxb prettyPrint does not work   \tHere is the mail thread with discuss about it. http://www.nabble.com/JAXB-pretty-print-marshaling-td24449564.html   ',0
'camel-ftp - Recover from lost connection issue   \tSee nabblehttp://www.nabble.com/FTP-Component-Network-Failure-Recovery-Problem-td24517828.html   ',0
'camel-web can\'t process the endpoint with \'://\' schema  like /endpoints/mock://results   \tAfter improving the endpoint URI schema on http://issues.apache.org/activemq/browse/CAMEL-1756  camel-web\'s endpoint request URL is changed from http://localhost:8080/endpoints/mock:results into http://localhost:8080/endpoints/mock://results while \'//\' is a separator for URL  so camel-web will use only the \'mock:\' to get the expected endpoint  which will throw an exception:org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: mock: due to: Expected scheme-specific part at index 5: mock: at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:367) at org.apache.camel.web.resources.EndpointsResource.getEndpoint(EndpointsResource.java:75) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at com.sun.jersey.server.impl.uri.rules.SubLocatorRule.invokeSubLocator(SubLocatorRule.java:135) at com.sun.jersey.server.impl.uri.rules.SubLocatorRule.accept(SubLocatorRule.java:89) at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:111) at com.sun.jersey.server.impl.uri.rules.SubLocatorRule.accept(SubLocatorRule.java:105) at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:111) at com.sun.jersey.server.impl.uri.rules.ResourceClassRule.accept(ResourceClassRule.java:71) at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:111) at com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:63) at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:654) at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:612) at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:603) at com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:309) at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:425) at com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:737) at com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:689) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1148) at com.opensymphony.module.sitemesh.filter.PageFilter.parsePage(PageFilter.java:119) at com.opensymphony.module.sitemesh.filter.PageFilter.doFilter(PageFilter.java:55) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1148) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:387) at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765) at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:417) at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) at org.mortbay.jetty.Server.handle(Server.java:324) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:535) at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:865) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:539) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409) at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)Caused by: java.net.URISyntaxException: Expected scheme-specific part at index 5: mock: at java.net.URI$Parser.fail(URI.java:2816) at java.net.URI$Parser.failExpecting(URI.java:2822) at java.net.URI$Parser.parse(URI.java:3025) at java.net.URI.&lt;init&gt;(URI.java:578) at org.apache.camel.util.URISupport.normalizeUri(URISupport.java:354) at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:365) ... 39 more   ',1
'CachedOutputStream not cleaning up tmp files when using file based caching   \tA recent feature of Camel\'s CachedOutputStream is to serialize any messages over 64k to disk. In some cases the *tmp message files are not being cleaned up.   ',0
'Route JMX attributes not being updated   \tSome routes are not getting instrumented using JMX and we get the following WARN for those on startup;InstrumentationLifecycleStrategy: Route has not been instrumented for endpoint: ...It turns out that its only those routes that have an onException handler as the first processor in the route  e.g.&lt;route id=\'per-msg-route\' errorHandlerRef=\'RouteErrorHandler\'&gt; &lt;from uri=\'jms:MSG_IN\'/&gt; &lt;onException&gt; &lt;exception&gt;can.retry.Exception&lt;/exception&gt; &lt;redeliveryPolicy ref=\'UnlimitedRedeliveryPolicyConfig\'/&gt; &lt;handled&gt;&lt;constant&gt;true&lt;/constant&gt;&lt;/handled&gt; &lt;/onException&gt; &lt;bean ref=\'Formatter\' method=\'formatInput\'/&gt;...8&lt;... More info and proposed fix at http://www.nabble.com/Routes-JMX-attributes-not-updated-in-2.0-M2-td24631265.html#a24639433   ',0
'camel-cxf bundle doesn\'t specify any Import-Package version   \tThe camel-cxf component is currently generated against CXF version 2.2.2.As a result  the camel-cxf module as well as the camel-cxf bundle require CXF 2.2. More importantly  that bundle does not work correctly with CXF 2.0 (note that this is an expected behavior  CXF has had API changes with its 2.2 version).Now  the trouble is that the camel-cxf JAR\'s MANIFEST has an Import-Package on org.apache.cxf.* components without specifying any version! As a result  when it looks for CXF and both CXF 2.0 and 2.2 are present on the platform  it sometimes chooses the wrong one.To solve this issue  version specifiers should be added to the Import-Package declarations of the camel-cxf bundle. I guess an import on version 2.2 would be enough (we don\'t need to specify 2.2.2 explicitely).CheersS. Ali Tokmenhttp://ali.tokmen.com/   ',0
'NPE thrown when DEBUG logging on   \tStack trace;org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: doSplit on MySplitter due to: java.lang.NullPointerException at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:82) at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:87) at org.apache.camel.processor.Splitter.createProcessorExchangePairs(Splitter.java:72)...Caused by: java.lang.NullPointerException at org.apache.camel.util.MessageHelper.extractBodyForLogging(MessageHelper.java:129) at org.apache.camel.impl.DefaultMessage.toString(DefaultMessage.java:38) at java.lang.String.valueOf(String.java:2827) at java.lang.StringBuilder.append(StringBuilder.java:115) at java.util.AbstractCollection.toString(AbstractCollection.java:422) at java.lang.String.valueOf(String.java:2827) at java.lang.StringBuilder.append(StringBuilder.java:115) at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:139)Steps to reproduce;1. Create simple route with splitter pattern; e.g.&lt;route&gt; &lt;from uri=\'jms:IN_QUEUE\'/&gt; &lt;split&gt;&lt;method bean=\'MySplitter\' method=\'doSplit\'/&gt; &lt;to uri=\'log:route.log\'/&gt; &lt;/split&gt;&lt;/route&gt;2. Set DEBUG logging on for org.apache.camel classes  e.g.log4j.logger.org.apache.camel=DEBUG3. Fire message into route - message fails with NPE inside Camel   ',0
'JmsKeyFormatStrategy not used consistently and JmsMessage.getHeader() not returning correct value   \tOn entry to a route from a JMS endpoint configured with PassthroughJmsKeyFormatStrategy the headers with underscores (_) are passed through correctly.However  when any header value in the message is then changed  the original headers are added back into the message using the DefaultJmsKeyFormatStrategy. For example  sending a JMS message with headers;HEADER_1=VALUE_1HEADER_2=VALUE_1we do see just these two headers in the message received into the route.However  if we then set a header value in the route  say HEADER_1=VALUE_2  we now see the headers;HEADER.1=VALUE_1HEADER.2=VALUE_1HEADER_1=VALUE_2HEADER_2=VALUE_1For some reason in the set header process the original message headers and values get added into the message after being passed through the DefaultJmsKeyFormatStrategy. This has the implication of unnecessary duplication of the headers.Also  when a message header is accessed using the getHeader(key) method it also goes through the DefaultJmsKeyFormatStrategy to decode the key that is passed. In the example above  if after we have updated \'HEADER_1\' to \'VALUE_2\'  we do;message.getHeader(\'HEADER_1\') this goes through the DefaultJmsKeyFormatStrategy and actually gets executed as message.getHeader(\'HEADER.1\') which returns VALUE_1 (wrong!).Note: if instead we lookup the header through message.getHeaders() which returns the all headers in a Map  we can correctly access the \'HEADER_1\' key. (Why is getHeader(key) even going through the KeyFormatStrategy anyway if setHeader() isn\'t?)   ',0
'template   consumerTemplate  service  proxy can\'t be set with right camel context if there are more than one camel context in the spring application context   \tCurrent camel support to define a producer template OUTSIDE a camel context  I think it works well just like the autowire function which is provided in Spring.If there more than two Camel context in the Spring Application context   the user should specify the camel context which the template should use.But I have a concern that even we put the template INSIDE the camel context  the template will not be set with a right version of camel context  since we use a CamelPostProcessor to inject CamelContext.So I did a quick test on the current Camel code and found there is a bug if there are more one CamelContext &#8211; CamelPostProcessor will inject the last create camel context into the CamelContextAware object. Since it is not easy to add the camelContext referece id into the template element attribute  we\'d better just support to parser these elements inside the camel context.   ',0
'Bean component - invokes onMessage from javax.jms.MessageListener even though a specific method name have been provided   \tThis is only an issue when your bean implements javax.jms.MessageListener and then specify a specific method to use  then Camel will still prefer to use the onMessage method.   ',0
'Xmpp consumer stops consuming after some time   \tNoticed after creating some more complicated routes that my xmpp consumers would stop receiving messages. This patch sorts that out  I also improved some of the logging in the producer and consumer classes and tweaked the XmppRouteChatTest to work properly.   ',0
'Unit test failures on Windows in 2.0.0 release   \t3 failures in camel-core that do not seem to occur on linux and mac.Failure Details testCannotDeleteFile junit.framework.AssertionFailedError: Should have thrown an exceptionorg.apache.camel.component.file.strategy.GenericFileDeleteProcessStrategyTest:125 testCacheStreamToFileAndNotCloseStream junit.framework.AssertionFailedError: we should have no temp file expected:&lt;1&gt; but was:&lt;0&gt;org.apache.camel.converter.stream.CachedOutputStreamTest:117 testRouteIsCorrectAtRuntime junit.framework.AssertionFailedError: expected:&lt;4&gt; but was:&lt;1&gt;org.apache.camel.processor.ChoiceWithEndTest:39   ',0
'HTTP component throwing IllegalArgumentException in M3 release while bridging between jetty and http   \tThe CamelHttpUri header is not set to the right value while routing between jetty and http components. Because of which the construction of the HttpMethod in the http component fails and throws up an IllegalArgumentException.Detailed discussion regarding this issue can be found in this following thread.http://www.nabble.com/HTTP-component-throwing-IllegalArgumentException-in-M3-release.-tt25057133.html#a25057133   ',0
'Unit test failure in Windows for StreamCache. Temp file is not deleted   \tThe temporary file is not deleted. I think the file is still open in some other stream. The problem is I have no idea how to find this place. Like in issue CAMEL-1924 this only happens on windows as on unix you can delete a file even if there are open streams.testStreamCacheToFileShouldBeDeletedInCaseOfException java.lang.AssertionError: There should be no files expected:&lt;1&gt; but was:&lt;0&gt;org.apache.camel.component.jetty.HttpStreamCacheFileTest:71   ',0
'ServiceSupport - incorrect state after restart   \tThis hampers restart of services by example the overhauled JMX in CAMEL-1933.When a service was restarted it had the following incorrect state: started = true starting = false stopped = true stopping = falseThe stopped should have been changed to false as its started.   ',1
'Graceful shutdown problem   \tWhile running camel-example-spring-jms in 2.0M3  I\'ve noticed that GracefulShutdownService can\'t stop Camel. It calls Main.getInstance().stop();but this call blocks and never returns. With enabled debug logging for org.springframework.jms  console outputs&#91;aultMessageListenerContainer-1&#93; efaultMessageListenerContainer DEBUG Waiting for shutdown of message listener invokers&#91;aultMessageListenerContainer-1&#93; efaultMessageListenerContainer DEBUG Still waiting for shutdown of 1 message listener invokersRelated forum thread:http://www.nabble.com/Garceful-shutdown-bug-in-2.0M3--td25113519.htmlDado   ',0
'camel-jpa exports the org.apache.camel.processor.interceptor which leads to a split package   \tThe package is already exported by camel-core  so the class in this package needs to be moved to another package.   ',0
'NPE when the bundle is camel-osgi bundle is inactive   \tThe stack trace. java.lang.NullPointerException atorg.apache.camel.osgi.OsgiFactoryFinder.getResource(OsgiFactoryFinder.java:85) atorg.apache.camel.osgi.OsgiFactoryFinder.findClass(OsgiFactoryFinder.java:51) atorg.apache.camel.component.file.GenericFileEndpoint.createGenericFileStrategy(GenericFileEndpoint.java:130) atorg.apache.camel.component.file.GenericFileEndpoint.getGenericFileProcessStrategy(GenericFileEndpoint.java:114) atorg.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:162) atorg.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:120) atorg.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:93) atorg.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) atjava.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) atjava.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) atjava.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181) atjava.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205) atjava.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) atjava.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)Here is the mail thread&#91;1&#93; which discusses about this issue.&#91;1&#93;http://www.nabble.com/Error-using-camel-file-with-windows-tt25475829.html#a25486384   ',0
'XmppMessages don\'t get converted to strings   \tThis has been bugging me for awhile  when you have a route using XMPP you get instances of XmppMessage in your route rather than just a string containing the body of the XmppMessage. Tracked that down and took out the work arounds I had previously put in my contributed xmpp tests.   ',0
'Improper configuration of MINA connector and acceptor instances; Better producer   \tA sample scenario where both MINA producer(s) and consumer(s) are used in the same route (e.g. some kind of dispatching or proxying):from(\'mina:tcp://localhost:8888?lazySessionCreation=true&amp;sync=true\') .to(\'mina:tcp://localhost:7777?lazySessionCreation=true&amp;sync=true\');from(\'mina:tcp://localhost:7777?lazySessionCreation=true&amp;sync=true\') .process(/prepare answer/);Due to improper configuration of MINA acceptor and connector instances in MinaComponent#createSocketEndpoint()  no more than 15 incoming threads can be served at port 8888 &#8211; the producer becomes unable to open an outgoing session. This is actually an issue of MINA  not of Camel &#8211; a test application written using \'raw\' MINA shows the same behaviour.A solution is to apply configuration rules described  e.g.  at http://mina.apache.org/configuring-thread-model.html  as done in the attached patch.Moreover  the standard Camel-MINA producer is not thread-safe &#8211; actually a well-known point. A second attached file contains a thread pool-based reentrant version  which can be efficiently used for TCP endpoints with both parameters \'lazySessionCreation\' and \'sync\' set to true.   ',0
'Camel Bean component should not remember the last called method name if the bean\'s method name is not explicitly specified.   \tHere is the mail thread which discuses this issue. http://www.nabble.com/Bean-endpoint-in-a-route-is-holding-reference-to-the-last-used-methodName-and-does-not-invoke-Camel\%27s-Bean-binding-tp25838095p25838095.html   ',0
'Redundant interceptions when using interceptSendToEndpoint   \tSee http://www.nabble.com/Issue-with-interceptSendToEndpoint-to25859201s22882.html   ',0
'Dynamic Recipient List - Comma is always delimiter even if custom specified   \tSee nabblehttp://www.nabble.com/Dynamic-RecipientList-delimeter-issue-td25917854.html   ',0
'camel-mail - extracting mails with headers using multi values inserts duplicates   \tSending a message with headers that contains 2 values such a String[] with 2 values will result on the other side when consuming that mail message to contain a header with 2 entries. There should only be 1 entry with the 2 values.   ',0
'http polling consumer does not support timeout   \tWhen using the consumer template to receive from a remote http service using camel-http the method receive(5000) that uses a 5 sec timeout does not work as expected.Camel does not use the 5000 value.   ',0
'velocity endpoint should not remember the last used template uri   \tIf there are two velocity endpoint linked with the pipeline  you will find the last velocity will not effect anymore.   ',0
'Support Issue: Routing a TextMessage from a  to a JMS queue   \tI did not find any example or documentation for using the &lt;camel:proxy&gt; with a simple send(String textMessage) method and a route sending the textMessage String as body to a JMS queue (for example).The thing is that &lt;camel:proxy&gt; creates a messages with body of type BeanInvocation. I would expect that Camel provides some builtin transformer/converter to change the body to the String argument  so that the message on the queue is of type TextMessage.Did I miss something?   ',0
'camel-jms - Sending Object message should fail if payload cannot be converted to serializable   \tIf not a null message is created and send.See nabble:http://old.nabble.com/JPA\%3A-Could-not-pass-Object-from-jpa-to-jms-to26160124.html   ',0
'The converter\'s MandatoryConvert method doesn\'t throw the exception when the value is null   \t   ',0
'Some methods of SftpOperations create streams that are never closed   \tWhere SftpOperations creates streams for storing or retrieving files via ChannelSftp  these streams are not always closed. For example  the retrieveFileToStreamInBody method creates an OutputStream object  but never closes it.   ',0
'Type converter - Should respect Future ExecutionException as not failed to convert but some other error   \t   ',0
'RSS Component - parameter filtering not working   \tI have tried to sort RRS feeds or to split the entries as described in the documentation. The problem is that the parameters that are to be consumed by Camel are passed through to the endpoint  who does not understand the parameters.Here is my code: from(\'rss:\' + feedLocation+ \'?sortEntries=true&amp;feedHeader=true\').marshal().rss()...where feedLocation = \'http://www.iafrica.com/pls/cms/grapevine.xml\'It results in:java.io.FileNotFoundException: http://www.iafrica.com/pls/cms/grapevine.xml?feedHeader=true&amp;sortEntries=true at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1311) at java.net.URL.openStream(URL.java:1010) at org.apache.camel.component.rss.RssUtils.createFeed(RssUtils.java:32) at org.apache.camel.component.rss.RssEntryPollingConsumer.createFeed(RssEntryPollingConsumer.java:54) at org.apache.camel.component.feed.FeedEntryPollingConsumer.poll(FeedEntryPollingConsumer.java:42) at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:99) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:637)   ',0
'FTP Component issue with tempPrefix or tempFileName   \tusing FTP component to push files via FTP I am facing issues pushing a file on subfolder when using tempPrefix or tempFileName. route sample: from(\'direct:start\').to(\'ftp://username@ipaddress?password=mypass&amp;fileName=./camel/test/message.txt&amp;tempFileName=${file:name.noext}.tmp\');no errors are raised if the final destination file doesn\'t exists  if it exists following error is raised: Exception in thread \'main\' org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange&#91;Message: Message content&#93;  at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1055)  at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:446)  at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:431)  at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:427)  at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:112)  at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:117)  at com.opta.camel.test.FTPTester.main(FTPTester.java:30) Caused by: java.lang.NullPointerException  at org.apache.camel.component.file.remote.FtpOperations.existsFile(FtpOperations.java:372) at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:92)  at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:52)  at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:86)  at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:84)  at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:146)  at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:83)  at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)  at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)  at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)  at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:85)  at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)  at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:232)  at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:162)  at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:91)  at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)  at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:201)  at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54)  at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)  at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)  at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:45)  at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:179)  at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:161)  at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:146)  at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:160)  at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:98)  at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:97)  at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:110)  ... 2 more   ',0
'ActivityMonitorEngine uses ?1 parameters in JPAQL  which don\'t work with (at least) the hibernate JPA provider.   \tTrying to just replace my RouteBuilder with a ProcessBuilder to start moving towards using BAM. I converted everything over to JPA  to make bam happy  but then found that it still explodes  (Full stack trace below)Line 80 of ActivityMonitorEngine has this JPAQL  List&lt;ActivityState&gt; list = template.find(\'select x from \' + ActivityState.class.getName() + \' x where x.timeOverdue &lt; ?1\'  timeNow);The ?1 named/numbered parameter seems to not be supported by hibernate\'s JPA provider.I can\'t find much of any documentation on this  could this just be made a normal positional? I can\'t even try out the BAM module without this 2009-11-11 01:33:53 815 ERROR &#91;org.apache.camel.bam.processor.ActivityMonitorEngine:ActivityMonitorEngine&#93; - &lt;Caught: org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.QueryParameterException: could not locate named parameter &#91;1&#93;; nested exception is java.lang.IllegalArgumentException: org.hibernate.QueryParameterException: could not locate named parameter &#91;1&#93;&gt;org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.QueryParameterException: could not locate named parameter &#91;1&#93;; nested exception is java.lang.IllegalArgumentException: org.hibernate.QueryParameterException: could not locate named parameter &#91;1&#93; at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:271) at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:97) at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:212) at org.springframework.orm.jpa.JpaAccessor.translateIfNecessary(JpaAccessor.java:152) at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:189) at org.springframework.orm.jpa.JpaTemplate.executeFind(JpaTemplate.java:151) at org.springframework.orm.jpa.JpaTemplate.find(JpaTemplate.java:311) at org.apache.camel.bam.processor.ActivityMonitorEngine$1.doInTransactionWithoutResult(ActivityMonitorEngine.java:80) at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:128) at org.apache.camel.bam.processor.ActivityMonitorEngine.run(ActivityMonitorEngine.java:77) at java.lang.Thread.run(Thread.java:619)Caused by: java.lang.IllegalArgumentException: org.hibernate.QueryParameterException: could not locate named parameter &#91;1&#93; at org.hibernate.ejb.QueryImpl.setParameter(QueryImpl.java:206) at org.hibernate.ejb.QueryImpl.setParameter(QueryImpl.java:261) at org.springframework.orm.jpa.JpaTemplate$9.doInJpa(JpaTemplate.java:316) at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:184) ... 7 moreCaused by: org.hibernate.QueryParameterException: could not locate named parameter &#91;1&#93; at org.hibernate.engine.query.ParameterMetadata.getNamedParameterDescriptor(ParameterMetadata.java:99) at org.hibernate.engine.query.ParameterMetadata.getNamedParameterExpectedType(ParameterMetadata.java:105) at org.hibernate.impl.AbstractQueryImpl.determineType(AbstractQueryImpl.java:437) at org.hibernate.impl.AbstractQueryImpl.setParameter(AbstractQueryImpl.java:407) at org.hibernate.ejb.QueryImpl.setParameter(QueryImpl.java:201) ... 10 moreLine 80   ',0
'ftp uploads can fail: File operation failed:  Connection closed without indication.. Code: 421   \tLooks like something that was fixed for CAMEL-444 didn\'t make it into 2.0?On 2.0.0  this is not a warning  this is a fatal.SEVERE: Exception occured during execution on the exchange: Exchange&#91;Message: XXXXXX&#93;org.apache.camel.CamelExecutionException: Exception occured during execution on the exchange: Exchange&#91;Message: XXXXX&#93; at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1027) at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:479) at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:431) at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:106) at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:122) at org.apache.camel.impl.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:266) at... into my code here...Caused by: org.apache.camel.component.file.GenericFileOperationFailedException: File operation failed: Connection closed without indication.. Code: 421 at org.apache.camel.component.file.remote.FtpOperations.disconnect(FtpOperations.java:167) at org.apache.camel.component.file.remote.RemoteFileProducer.disconnect(RemoteFileProducer.java:77) at org.apache.camel.component.file.remote.RemoteFileProducer.handleFailedWrite(RemoteFileProducer.java:66) at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:104) at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:52) at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:81) at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:79) at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:141) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:78) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:61) at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:186) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:155) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88) at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49) at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:148) at org.apache.camel.processor.Pipeline.process(Pipeline.java:74) at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54) at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48) at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:45) at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:170) at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:156) at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:141) at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:155) at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:111) at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:101) at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:105) ... 37 moreCaused by: org.apache.commons.net.ftp.FTPConnectionClosedException: Connection closed without indication. at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:297)This is \'not what I want\' and there doesn\'t seem to be any keep alive or other option on the ftp2 component.   ',1
'Logger logs INFO level messages at DEBUG level   \tThe Camel logger logs INFO level messages at the DEBUG level. CAMEL-1048 fixed the problem in one of two cases (logging without an exception)  but it is still broken for logging with an exception. Patch to fix this is attached.   ',0
'camel-cxf - Empty body causes http error 500 even for GET when using cxfbean   \tCxfSoapBinding has a bug that it mandates a body to exist. But when you send a GET then there is of course no body.The code below fixed this in the method getCxfInMessage // body can be empty in case of GET etc. InputStream body = message.getBody(InputStream.class); if (body != null) { answer.setContent(InputStream.class  body); } else if (message.getBody() != null) { // fallback and set the body as what it is answer.setContent(Object.class  body); }Willem Tam can you review if that is okay? Maybe the code can be more finer to check the HTTP method and in cases of GET etc. it allows no body.I will commit my fix to get the unit tests passing.   ',0
'JcrProducer node creation throws javax.jcr.PathNotFoundException when using exchange ID as node name   \tTo reproduce  use the camel-jcr component without specifying a node name in the message properties. JcrProducer will attempt to use the exchange ID as the node name  but in ServiceMix 4  this ID contains path separator characters  which results in a PathNotFound exception when the producer attempts to create the node. IMHO  the producer should attempt to create parent nodes as needed when the value of either the exchange ID or the property named JcrConstants.JCR_NODE_NAME contain path separators.   ',0
'RedeliveryPolicy - Setting delay > maxDelay should should also set max value   \tSee nabblehttp://old.nabble.com/maximumRedeliveryDelay-applies-even-if-you-are-not-using-exponential-back-off-to26415728.html   ',0
'CaseInsensitiveMap should be serializable   \tCaseInsensitiveMap should be fully serializableSee nabblehttp://old.nabble.com/DataSet-header-\%7BCamelDataSetIndex\%3D0\%7D-causes-failure-to26487985.html   ',0
'camel-bean - Classes enhanced by CGLIB should skip cglib methods   \tSee nabblehttp://old.nabble.com/AmbiguousMethodCallException-on-transactional-spring-bean-to26496269.html   ',0
'Mock component - expectedBodiesReceived(List) does not work as expected   \tJava chooses the varargs methods always instead of the List method.   ',0
'Exception during mail connection requires folder to be reset   \tI think that this problem may still be around with 2.1-SNAPSHOT:http://fusesource.com/forums/thread.jspa?threadID=746&amp;tstart=0I noticed that I had a pop3 server outage and then subsequently had a similar problem i.e. IllegalStateException  folder not open.Here\'s when the outage started.2009-11-26 11:57:55 316 [: MailComponent] WARN ultPollingConsumerPollStrategy - Consumer Consumer[pop3://...] could not poll endpoint: pop3://... caused by: Connect failedjavax.mail.MessagingException: Connect failed; nested exception is: java.net.NoRouteToHostException: No route to host at com.sun.mail.pop3.POP3Store.protocolConnect(POP3Store.java:161) at javax.mail.Service.connect(Service.java:288) at org.apache.camel.component.mail.MailConsumer.ensureIsConnected(MailConsumer.java:241) at org.apache.camel.component.mail.MailConsumer.poll(MailConsumer.java:79) at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:108) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)Caused by: java.net.NoRouteToHostException: No route to host at java.net.PlainSocketImpl.socketConnect(Native Method) at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:333) at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:195) at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:182) at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:366) at java.net.Socket.connect(Socket.java:519) at java.net.Socket.connect(Socket.java:469) at com.sun.mail.util.SocketFetcher.createSocket(SocketFetcher.java:233) at com.sun.mail.util.SocketFetcher.getSocket(SocketFetcher.java:189) at com.sun.mail.pop3.Protocol.&lt;init&gt;(Protocol.java:94) at com.sun.mail.pop3.POP3Store.getPort(POP3Store.java:214) at com.sun.mail.pop3.POP3Store.protocolConnect(POP3Store.java:157) ... 13 moreThis went on for about a minute or so and there was no more in the log file until several hours later - in fact when an email appeared in the INBOX. I know this because my personal email account was copied on the email and so I have the timestamp.I then get the following message every time I poll the server and have to re-start my application to get over it:2009-11-26 19:19:57 293 [: MailComponent] ERROR MailConsumer - Folder not openjava.lang.IllegalStateException: Folder not open at javax.mail.Folder.getMessages(Folder.java:938) at javax.mail.Folder.search(Folder.java:1226) at org.apache.camel.component.mail.MailConsumer.poll(MailConsumer.java:107) at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:108) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)I took a look at MailConsumer.java and note the following code:236 if (!connected) {237 if (LOG.isDebugEnabled()) {238 LOG.debug(\'Connecting to MailStore: \' + endpoint.getConfiguration().getMailStoreLogInformation());239 }240 store = sender.getSession().getStore(config.getProtocol());241 store.connect(config.getHost()  config.getPort()  config.getUsername()  config.getPassword());242 }If you\'re not connected then how is it possible to have a folder? Following this logic my recommendation is to insert the following at line 242:241 store.connect(config.getHost()  config.getPort()  config.getUsername()  config.getPassword()); folder = null;242 }   ',0
'Improper ordering of MINA filters   \tWhen we want to use SSL on the consumer side  MINA\'s SSLFilter must be inserted as the very first filter into the chain (or  at least  as the second one after an ExecutorFilter)  but it is currently not possible  because MinaComponent#createSocketEndpoint() always inserts a ProtocolCodecFilter at the very beginning by calling configureCodecFactory().A proposed workaround is to introduce an additional URL parameter noDefaultCodec which prohibits the installation of the default protocol codec filter. The protocol codec must be then configured manually  e.g. using Spring:&lt;bean id=\'sslFilter\' class=\'org.apache.mina.filter.SSLFilter\'&gt; &lt;constructor-arg&gt; &lt;bean class=\'javax.net.ssl.SSLContext\' factory-method=\'getDefault\' /&gt; &lt;/constructor-arg&gt;&lt;/bean&gt;&lt;bean id=\'codecFilter\' class=\'org.apache.mina.filter.codec.ProtocolCodecFilter\'&gt; &lt;constructor-arg ref=\'hl7codec\' /&gt;&lt;/bean&gt;&lt;bean id=\'hl7codec\' class=\'org.apache.camel.component.hl7.HL7MLLPCodec\' /&gt;&lt;bean id=\'minaFilters\' class=\'java.util.ArrayList\'&gt; &lt;constructor-arg&gt; &lt;list value-type=\'org.apache.mina.common.IoFilter\'&gt; &lt;ref bean=\'sslFilter\' /&gt;  &lt;ref bean=\'codecFilter\' /&gt;  &lt;/list&gt; &lt;/constructor-arg&gt;&lt;/bean&gt;After that  the consumer endpoint URL can look likefrom(\'mina:tcp://0.0.0.0:8888?sync=true&amp;lazySessionCreation=true&amp;noDefaultCodec=true&amp;filters=#minaFilters\').I am not sure whether this approach is optimal  therefore I call it \'workaround\' and not \'solution\'. The corresponding patch is attached.   ',0
'Routing slip does not stop when Exchange is failed   \t   ',1
'camel-example-etl throw error when running it.   \tHere is the stack trace.[ Camel thread 0: JpaComponent] JuelExpression DEBUG Noimpl class for juel ExpressionFactory defined in\'META-INF/services/org/apache/camel/component/el\'org.apache.camel.NoFactoryAvailableException: Could not find factory classfor resource: META-INF/services/org/apache/camel/component/juel atorg.apache.camel.impl.DefaultFactoryFinder.doFindFactoryProperties(DefaultFactoryFinder.java:135) atorg.apache.camel.impl.DefaultFactoryFinder.findClass(DefaultFactoryFinder.java:77) atorg.apache.camel.language.juel.JuelExpression.getExpressionFactory(JuelExpression.java:81) atorg.apache.camel.language.juel.JuelExpression.evaluate(JuelExpression.java:70) atorg.apache.camel.builder.ProcessorBuilder$4.process(ProcessorBuilder.java:94) atorg.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) atorg.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53) atorg.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82) atorg.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:93) atorg.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) atorg.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:223) atorg.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:153) atorg.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:91) atorg.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49) atorg.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:206) at org.apache.camel.processor.Pipeline.process(Pipeline.java:74) atorg.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54) atorg.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48) atorg.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) atorg.apache.camel.component.jpa.JpaConsumer.processBatch(JpaConsumer.java:133) atorg.apache.camel.component.jpa.JpaConsumer$1.doInJpa(JpaConsumer.java:86) atorg.apache.camel.component.jpa.JpaTemplateTransactionStrategy$1$1.doInJpa(JpaTemplateTransactionStrategy.java:81) atorg.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:184) atorg.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:147) atorg.apache.camel.component.jpa.JpaTemplateTransactionStrategy$1.doInTransaction(JpaTemplateTransactionStrategy.java:79) atorg.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:128) atorg.apache.camel.component.jpa.JpaTemplateTransactionStrategy.execute(JpaTemplateTransactionStrategy.java:77) atorg.apache.camel.component.jpa.JpaConsumer.poll(JpaConsumer.java:70) atorg.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:108) atjava.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) atjava.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) atjava.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) atjava.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181) atjava.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205) atjava.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) atjava.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)   ',0
'doCatch() - Without any exception given should report that as a problem   \tCode like this .doTry() .to(\'mock:b\') .throwException(new IllegalArgumentException(\'Damn\')) .doCatch() .to(\'mock:catch\') .end();Should report a failure in the route as doCatch must have at least 1 exception as parameter.It should correctly be .doCatch(Exception.class)We could also consider using Excpetion.class as default but in Java you must also provide the exception to catch and thus its more intuitive if its 100\% like Java   ',0
'RejectedExecutionException after restarting camel context   \tUser reported over the #camel channel the following exception trying to send a message after the context was stopped and restarted \'Failed to create Producer for endpoint:\'. Thats the exception I\'m gettingReason: java.util.concurrent.RejectedExecutionExceptionException in thread \'core\' org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[activemq://queue:request.lavaOrderProducer.powerTraderServer]. Reason: java.util.concurrent.RejectedExecutionException at org.apache.camel.component.jms.JmsProducer.testAndSetRequestor(JmsProducer.java:116) at org.apache.camel.component.jms.JmsProducer.processInOut(JmsProducer.java:175) at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:147) at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:179) at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:161) at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:146) at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:160) at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:98) at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:97) at com.wjb.producer.lavaData.dispatcher.ServerRequestDispatcher.requestSymbolSectorArray(ServerRequestDispatcher.java:122) at com.wjb.producer.core.LavaDataManager.initialize(LavaDataManager.java:64) at com.wjb.producer.core.ProducerCore.run(ProducerCore.java:98) at java.lang.Thread.run(Thread.java:619)Caused by: java.util.concurrent.RejectedExecutionException at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:1760) at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:767) at java.util.concurrent.ScheduledThreadPoolExecutor.delayedExecute(ScheduledThreadPoolExecutor.java:216) at java.util.concurrent.ScheduledThreadPoolExecutor.schedule(ScheduledThreadPoolExecutor.java:366) at org.apache.camel.util.DefaultTimeoutMap.schedulePoll(DefaultTimeoutMap.java:156) at org.apache.camel.util.DefaultTimeoutMap.&lt;init&gt;(DefaultTimeoutMap.java:52) at org.apache.camel.component.jms.requestor.Requestor.&lt;init&gt;(Requestor.java:68) at org.apache.camel.component.jms.JmsProducer.testAndSetRequestor(JmsProducer.java:107)The following unit tests seems to reproduce the problem:ublic final class StartStopTest { private final GenericApplicationContext applicationContext = new GenericApplicationContext(); private final int testCount = 3; @Test public void test() throws Exception { //Initialize final File propertiesFile = new File(Constants.RESOURCE_DIRECTORY_NAME  Constants.PROPERTIES_FILE_NAME); PropertyConfigurator.configure(propertiesFile.getPath()); final File applicationContextFile = new File(Constants.RESOURCE_DIRECTORY_NAME  Constants.CONTEXT_FILE_NAME); final Resource applicationContextResource = new FileSystemResource(applicationContextFile); final AbstractBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(this.applicationContext); beanDefinitionReader.loadBeanDefinitions(applicationContextResource); this.applicationContext.refresh(); //Begin Testing for (int i = 0; i &lt; this.testCount; i++) { this.startSendStop(); Thread.sleep(3000); } } private void startSendStop() throws Exception { final SpringCamelContext springCamelContext = (SpringCamelContext)this.applicationContext.getBean(Constants.CAMEL_CONTEXT_NAME); final ProducerTemplate producerTemplate; final Endpoint serverRequestQueue; springCamelContext.start(); producerTemplate = springCamelContext.createProducerTemplate(); serverRequestQueue = springCamelContext.getEndpoint(\'serverRequestQueue\'); final Exchange exchange = producerTemplate.send(serverRequestQueue  new Processor() { public void process(final Exchange exchange) throws Exception { exchange.setPattern(ExchangePattern.InOut); exchange.getIn().setHeader(ServerJmsServices.REQUEST  ServerJmsServices.GET_SYMBOL_INFO); exchange.getIn().setBody(\'\'); } }); final String responseString = (String)exchange.getOut().getBody(); Assert.assertTrue(responseString.length() &gt; 0); springCamelContext.stop(); }}&lt;?xml version=\'1.0\' encoding=\'UTF-8\'?&gt;&lt;beans xmlns=\'http://www.springframework.org/schema/beans\'  xmlns:xsi=\'http://www.w3.org/2001/XMLSchema-instance\' xmlns:camel=\'http://camel.apache.org/schema/spring\' xsi:schemaLocation=\'http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd\'&gt; &lt;!-- ActiveMQ component for Camel to use --&gt; &lt;bean id=\'activemq\' class=\'org.apache.activemq.camel.component.ActiveMQComponent\' &gt; &lt;property name=\'connectionFactory\'&gt; &lt;bean class=\'org.apache.activemq.ActiveMQConnectionFactory\'&gt; &lt;property name=\'brokerURL\' value=\'tcp://192.168.5.10:61616?daemon=true\' /&gt; &lt;/bean&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!-- Camel Context --&gt; &lt;camelContext id=\'camelContext\' xmlns=\'http://camel.apache.org/schema/spring\' autoStartup=\'false\'&gt;  &lt;camel:endpoint id=\'serverRequestQueue\' uri=\'activemq:queue:request.lavaOrderProducer.powerTraderServer\' /&gt; &lt;/camelContext&gt;&lt;/beans&gt;   ',0
'GroupedExchange in Aggregator is not working correctly   \tSee nabblehttp://old.nabble.com/Help\%21-org.apache.camel.impl.GroupedExchange-does-not-exist-in-the-latest-download-ts26841584.html   ',1
'camel-bindy dataformat KeyValue DSL can\'t work   \tWhen you set the bindy dataformat with below DSL   you will get the error that camel can\'t find the DataFormat.   public void configure() { from(\'direct:start\').marshal() .bindy(BindyType.KeyValue  \'org.apache.camel.dataformat.bindy.model.fix.simple\') .to(\'mock:result\'); }   ',0
'camel-cache - Missing some classes in .jar   \tSee nabblehttp://old.nabble.com/Camel-Cache\%3A-Processors-not-released--ts26908653.html   ',0
'JDBC component doesn\'t preserve headers   \tJDBC component doesn\'t preserve any of the headers that are sent into it   ',0
'The NP check of the remote service is wrong in CamelServiceExporter   \tWe should check the export service instead of the camelContext.&#8212; components/camel-spring/src/main/java/org/apache/camel/spring/remoting/CamelServiceExporter.jav(revision 895109)+++ components/camel-spring/src/main/java/org/apache/camel/spring/remoting/CamelServiceExporter.jav(working copy)@@ -83 7 +83 7 @@ } Endpoint endpoint = CamelContextHelper.getMandatoryEndpoint(camelContext  uri); notNull(camelContext  \'service\');+ notNull(getService()  \'service\'); Object proxy = getProxyForService(); consumer = endpoint.createConsumer(new BeanProcessor(proxy  camelContext));   ',0
'Remove sample caches from Camel Cache component   \tCamel Cache has sample caches created by the component via its ehCache settings.These should not be created in order to avoid unnecessary taking up of ports by the sample caches.   ',0
'file component - Using fileName option should better detect constant vs dynamic name   \teg using fileName=header.txt makes Camel think its header with the name txt you want to use.   ',0
'BeanProcessor - Should differentiate between void and method returning null values   \tWhen invoking a bean method it should better detect whether the bean is a void or has a return type.And if it returns null it should be regarded as a valid response and set as body.See nabblehttp://old.nabble.com/filtering-messages-ts27403559.html   ',0
'cxfbean should  propagate CONTENT_TYPE for other camel component to use   \tThere is no \'content-type\' header return from the below route &lt;route&gt; &lt;from uri=\'jetty:http://localhost:9006/employeesBase?matchOnUriPrefix=true\'/&gt; &lt;to uri=\'cxfbean:EmployeesPOJO\'/&gt; &lt;/route&gt;   ',0
'HttpHeaderFilterStrategy dosn\'t filters out \'Cache-Control\'  \'Connection\'  \'Pragma\'  \'Trailer\'  \'Transfer-Encoding\'  \'Upgrade\'  \'Via\' and \'Warning\' in method applyFilterToCamelHeaders   \tHttpHeaderFilterStrategy uses the HTTP headers with upper case characters on the beginning (e. g. \'Transfer-Encoding\' instead of \'transfer-encoding\').   ',0
'WARNING log of JmsTemporaryTopicEndpoint   JmsTemporaryQueueEndpoint don\'t have the ManagedResource annotation   \tHere is the mail thread which discusses about this issue.http://old.nabble.com/Attemp-to-send-message-to-activemq-temporary-queue-using-producerTemplate\%3A-InvalidMetadataException-tp27520096p27520096.html   ',0
'HttpHeaderFilterStrategy should filter the HTTP \'Date\' header when applyFilterToCamelHeaders is called   \tSee rfc2616.   ',0
'Camel Velocity: change the case of all fields properties Header   \tUsing the velocity component doesn\'t respect the case matching of all fields of the header.For example: the exchange of properties CorrelationID change the case matching  after using velocity component  it puts the property in lowercase correlationid.   ',0
'Camel Freemarker: change the case of all fields properties Header   \tUsing the Freemarker component doesn\'t respect the case matching of all fields of the header.For example: the exchange of properties CorrelationID change the case matching  after using Freemarker component  it puts the property in lowercase correlationid.   ',0
'DefaultCamelContext throws NPE in start() for route with no destination   \tNot easy to track down when you have a lot of routes. This might be new with the introduction of StartupRouteHolder (I think that was introduced in 2.1  right?)public class TriggerNPETest extends CamelTestSupport { @Override protected RouteBuilder createRouteBuilder() throws Exception { return new RouteBuilder() { public void configure() { // This will generate an NPE on DefaultCamelContext.start() (line 973) // If this is an invalid route a proper message should be given far before  // this and/or NPE should be tested on line 973 from(\'direct:psd.nowhere\'); } }; } @Test public void testme() throws Exception { Thread.sleep(10000); }}java.lang.NullPointerException at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:973) at org.apache.camel.test.junit4.CamelTestSupport.startCamelContext(CamelTestSupport.java:145) at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:98) // now start the inputs for all the route services as we have prepared Camel // yeah open the floods so messages can start flow into Camel for (Map.Entry&lt;Integer  StartupRouteHolder&gt; entry : inputs.entrySet()) { Integer order = entry.getKey(); Route route = entry.getValue().getRoute(); // &lt;&lt;&lt;------- Right here.   ',0
'karaf features.xml  should use servicemix commons-pool bundle   \tas commons-pool/commons-pool/1.5.4 osgi manifest header isn\'t correct  which shouldn\'t import org.apache.commons.pool package.SMX4-491&#91;1&#93; create servicemix wrapper bundle to fix this issue  so the karaf features.xml should use servicemix wrapper bundle&#91;1&#93;https://issues.apache.org/activemq/browse/SMX4-491   ',0
'should use servicemix jaxws 2.1 spec bundle but not the geronimo one   \totherwise will see the exception like javax.xml.ws.spi.FactoryFinder$ConfigurationError: Provider org.apache.axis2.jaxws.spi.Provider not foundat javax.xml.ws.spi.FactoryFinder$2.run(FactoryFinder.java:135)at javax.xml.ws.spi.FactoryFinder.doPrivileged(FactoryFinder.java:264)at javax.xml.ws.spi.FactoryFinder.newInstance(FactoryFinder.java:122)at javax.xml.ws.spi.FactoryFinder.access$200(FactoryFinder.java:42)at javax.xml.ws.spi.FactoryFinder$3.run(FactoryFinder.java:255)at javax.xml.ws.spi.FactoryFinder.doPrivileged(FactoryFinder.java:264)at javax.xml.ws.spi.FactoryFinder.find(FactoryFinder.java:165)at javax.xml.ws.spi.Provider.provider(Provider.java:39)at javax.xml.ws.Service.&lt;init&gt;(Service.java:36)   ',0
'ConsumerTemplate don\'t support the jms uri with selector   \tThis unit test can shows the issue that selector option don\'t work for ConsumerTemplate@Test public void testConsumerTemplate() throws Exception { template.sendBodyAndHeader(\'activemq:queue:consumer\'  \'Message1\'  \'SIZE_NUMBER\'  1505); template.sendBodyAndHeader(\'activemq:queue:consumer\'  \'Message3\'  \'SIZE_NUMBER\'  1300); template.sendBodyAndHeader(\'activemq:queue:consumer\'  \'Message2\'  \'SIZE_NUMBER\'  1600); // process every exchange which is ready. If no exchange is left break // the loop while (true) { Exchange ex = consumer.receiveNoWait(\'activemq:queue:consumer?selector=SIZE_NUMBER&lt;1500\'); if (ex != null) { Message message = ex.getIn(); int size = message.getHeader(\'SIZE_NUMBER\'  int.class); assertTrue(\'The message header SIZE_NUMBER should be less than 1500\'  size &lt; 1500); assertEquals(\'The message body is wrong\'  \'Message3\'  message.getBody()); } else { break; } } }And here is mail thread which discusses about it.   ',0
'async route not working with Mina   \there is my route: from(\'mina:tcp://localhost:6202?textline=true&amp;sync=true\').process(new Processor() { public void process(Exchange exchange) throws Exception { String body = exchange.getIn().getBody(String.class); Thread.sleep(5000); exchange.getOut().setBody(\'Bye 1\' + body); } }); from(\'file:///test/test/response\') .convertBodyTo(String.class)//.threads(1) .toAsync(\'mina:tcp://localhost:6202?sync=true&amp;textline=true\' 10) .to(\'log:+++ reply++++\'); here is the output  you can see all reply logs have a same message body and async process is releasing all threads at the first response  this is probably Mina component bug in the context of aync route.2010-03-11 10:21:16 405 &#91;Camel thread 11: FileComponent&#93; FileConsumer DEBUG Total 3 files to consume2010-03-11 10:21:16 405 &#91;Camel thread 11: FileComponent&#93; FileConsumer DEBUG About to process file: GenericFile&#91;C:/test/test/response/Copy (2) of New Text Document (3).txt&#93; using exchange: Exchange[GenericFileMessage with file: GenericFile&#91;C:/test/test/response/Copy (2) of New Text Document (3).txt&#93;]2010-03-11 10:21:16 452 &#91;Camel thread 11: FileComponent&#93; DefaultManagementAgent DEBUG Registered MBean with objectname: org.apache.camel:context=tamlft0spj1/cameltest type=producers name=MinaProducer(0x2e6c66)2010-03-11 10:21:16 452 &#91;Camel thread 11: FileComponent&#93; MinaProducer DEBUG Starting producer: Producer&#91;mina://tcp://localhost:6202?sync=true&amp;textline=true&#93;2010-03-11 10:21:16 452 &#91;Camel thread 11: FileComponent&#93; ProducerCache DEBUG Adding to producer service pool with key: Endpoint&#91;mina://tcp://localhost:6202?sync=true&amp;textline=true&#93; for producer: Producer&#91;mina://tcp://localhost:6202?sync=true&amp;textline=true&#93;2010-03-11 10:21:16 452 &#91;2: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Creating connector to address: localhost/127.0.0.1:6202 using connector: org.apache.mina.transport.socket.nio.SocketConnector@16cefa8 timeout: 30000 millis.2010-03-11 10:21:16 452 &#91;Camel thread 11: FileComponent&#93; FileConsumer DEBUG About to process file: GenericFile&#91;C:/test/test/response/Copy of New Text Document (3).txt&#93; using exchange: Exchange[GenericFileMessage with file: GenericFile&#91;C:/test/test/response/Copy of New Text Document (3).txt&#93;]2010-03-11 10:21:16 467 &#91;3: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Creating connector to address: localhost/127.0.0.1:6202 using connector: org.apache.mina.transport.socket.nio.SocketConnector@16cefa8 timeout: 30000 millis.2010-03-11 10:21:16 467 &#91;Camel thread 11: FileComponent&#93; FileConsumer DEBUG About to process file: GenericFile&#91;C:/test/test/response/New Text Document (3).txt&#93; using exchange: Exchange[GenericFileMessage with file: GenericFile&#91;C:/test/test/response/New Text Document (3).txt&#93;]2010-03-11 10:21:16 467 &#91;4: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Creating connector to address: localhost/127.0.0.1:6202 using connector: org.apache.mina.transport.socket.nio.SocketConnector@16cefa8 timeout: 30000 millis.2010-03-11 10:21:16 499 &#91;SocketConnectorIoProcessor-0.1&#93; ExecutorFilter DEBUG Launching thread for localhost/127.0.0.1:62022010-03-11 10:21:16 499 [ SocketAcceptorIoProcessor-0.0] ExecutorFilter DEBUG Launching thread for /127.0.0.1:33622010-03-11 10:21:16 499 [ SocketAcceptorIoProcessor-0.1] ExecutorFilter DEBUG Launching thread for /127.0.0.1:33632010-03-11 10:21:16 499 &#91;SocketConnectorIoProcessor-0.0&#93; ExecutorFilter DEBUG Launching thread for localhost/127.0.0.1:62022010-03-11 10:21:16 499 [ SocketAcceptorIoProcessor-0.2] ExecutorFilter DEBUG Launching thread for /127.0.0.1:33742010-03-11 10:21:16 499 &#91;SocketConnectorIoProcessor-0.2&#93; ExecutorFilter DEBUG Launching thread for localhost/127.0.0.1:62022010-03-11 10:21:16 514 &#91;amel thread 22: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for /127.0.0.1:33632010-03-11 10:21:16 514 &#91;amel thread 24: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for /127.0.0.1:33622010-03-11 10:21:16 514 &#91;amel thread 23: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for localhost/127.0.0.1:62022010-03-11 10:21:16 514 &#91;2: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Writing body : hello22010-03-11 10:21:16 514 &#91;3: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Writing body : hello32010-03-11 10:21:16 514 &#91;amel thread 26: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for /127.0.0.1:33742010-03-11 10:21:16 514 &#91;amel thread 25: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for localhost/127.0.0.1:62022010-03-11 10:21:16 514 &#91;amel thread 27: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for localhost/127.0.0.1:62022010-03-11 10:21:16 514 &#91;4: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Writing body : hello12010-03-11 10:21:16 514 &#91;SocketConnectorIoProcessor-0.2&#93; ExecutorFilter DEBUG Launching thread for localhost/127.0.0.1:62022010-03-11 10:21:16 514 &#91;3: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Waiting for response2010-03-11 10:21:16 530 &#91;2: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Waiting for response2010-03-11 10:21:16 530 &#91;4: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Waiting for response2010-03-11 10:21:16 530 [ SocketAcceptorIoProcessor-0.2] ExecutorFilter DEBUG Launching thread for /127.0.0.1:33742010-03-11 10:21:16 530 &#91;amel thread 27: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for localhost/127.0.0.1:62022010-03-11 10:21:16 530 &#91;amel thread 26: MinaThreadPool&#93; MinaConsumer DEBUG Received body: hello22010-03-11 10:21:21 530 &#91;amel thread 26: MinaThreadPool&#93; MinaConsumer DEBUG Writing body: Bye 1hello22010-03-11 10:21:21 530 &#91;SocketConnectorIoProcessor-0.2&#93; ExecutorFilter DEBUG Launching thread for localhost/127.0.0.1:62022010-03-11 10:21:21 530 &#91;amel thread 27: MinaThreadPool&#93; MinaProducer DEBUG Message received: Bye 1hello22010-03-11 10:21:21 530 &#91;amel thread 27: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for localhost/127.0.0.1:62022010-03-11 10:21:21 530 &#91;amel thread 26: MinaThreadPool&#93; MinaConsumer DEBUG Received body: hello32010-03-11 10:21:21 530 &#91;:6202?sync=true&amp;textline=true&#93;] SendProcessor DEBUG Async reply received now routing the Exchange: Exchange&#91;Message: Bye 1hello2&#93;2010-03-11 10:21:21 530 &#91;:6202?sync=true&amp;textline=true&#93;] SendProcessor DEBUG Async reply received now routing the Exchange: Exchange&#91;Message: Bye 1hello2&#93;2010-03-11 10:21:21 530 &#91;:6202?sync=true&amp;textline=true&#93;] SendProcessor DEBUG Async reply received now routing the Exchange: Exchange&#91;Message: Bye 1hello2&#93;2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] DefaultManagementAgent DEBUG Registered MBean with objectname: org.apache.camel:context=tamlft0spj1/cameltest type=producers name=Producer(0x16321e6)2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] ProcessorEndpoint$1 DEBUG Starting producer: Producer&#91;log://+++ reply++++&#93;2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] ProducerCache DEBUG Adding to producer cache with key: Endpoint&#91;log://+++ reply++++&#93; for producer: Producer&#91;log://+++ reply++++&#93;2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] +++ reply++++ INFO Exchange&#91;BodyType:String  Body:Bye 1hello2&#93;2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] GenericFileOnCompletion DEBUG Done processing file: GenericFile&#91;C:/test/test/response/Copy (2) of New Text Document (3).txt&#93; using exchange: Exchange&#91;Message: Bye 1hello2&#93;2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] +++ reply++++ INFO Exchange&#91;BodyType:String  Body:Bye 1hello2&#93;2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] GenericFileOnCompletion DEBUG Done processing file: GenericFile&#91;C:/test/test/response/Copy of New Text Document (3).txt&#93; using exchange: Exchange&#91;Message: Bye 1hello2&#93;2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] FileUtil DEBUG Tried 1 to delete file: C:/test/test/response/Copy (2) of New Text Document (3).txt.camelLock with result: true2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] +++ reply++++ INFO Exchange&#91;BodyType:String  Body:Bye 1hello2&#93;2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] GenericFileOnCompletion DEBUG Done processing file: GenericFile&#91;C:/test/test/response/New Text Document (3).txt&#93; using exchange: Exchange&#91;Message: Bye 1hello2&#93;2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] FileUtil DEBUG Tried 1 to delete file: C:/test/test/response/Copy of New Text Document (3).txt.camelLock with result: true2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile&#91;C:/test/test/response/Copy (2) of New Text Document (3).txt&#93; to: GenericFile&#91;C:/test/test/response/.camel/Copy (2) of New Text Document (3).txt&#93;2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] FileUtil DEBUG Tried 1 to delete file: C:/test/test/response/New Text Document (3).txt.camelLock with result: true2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile&#91;C:/test/test/response/Copy of New Text Document (3).txt&#93; to: GenericFile&#91;C:/test/test/response/.camel/Copy of New Text Document (3).txt&#93;2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile&#91;C:/test/test/response/New Text Document (3).txt&#93; to: GenericFile&#91;C:/test/test/response/.camel/New Text Document (3).txt&#93;2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] FileUtil DEBUG Tried 1 to rename file: C:/test/test/response/Copy (2) of New Text Document (3).txt to: C:/test/test/response/.camel/Copy (2) of New Text Document (3).txt with result: true2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] FileUtil DEBUG Tried 1 to rename file: C:/test/test/response/Copy of New Text Document (3).txt to: C:/test/test/response/.camel/Copy of New Text Document (3).txt with result: true2010-03-11 10:21:21 577 &#91;:6202?sync=true&amp;textline=true&#93;] FileUtil DEBUG Tried 1 to rename file: C:/test/test/response/New Text Document (3).txt to: C:/test/test/response/.camel/New Text Document (3).txt with result: true2010-03-11 10:21:26 530 &#91;amel thread 26: MinaThreadPool&#93; MinaConsumer DEBUG Writing body: Bye 1hello32010-03-11 10:21:26 530 &#91;amel thread 26: MinaThreadPool&#93; MinaConsumer DEBUG Received body: hello12010-03-11 10:21:26 530 &#91;SocketConnectorIoProcessor-0.2&#93; ExecutorFilter DEBUG Launching thread for localhost/127.0.0.1:62022010-03-11 10:21:26 530 &#91;amel thread 27: MinaThreadPool&#93; MinaProducer DEBUG Message received: Bye 1hello32010-03-11 10:21:26 530 &#91;amel thread 27: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for localhost/127.0.0.1:62022010-03-11 10:21:31 531 &#91;amel thread 26: MinaThreadPool&#93; MinaConsumer DEBUG Writing body: Bye 1hello12010-03-11 10:21:31 531 &#91;SocketConnectorIoProcessor-0.2&#93; ExecutorFilter DEBUG Launching thread for localhost/127.0.0.1:62022010-03-11 10:21:31 531 &#91;amel thread 26: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for /127.0.0.1:33742010-03-11 10:21:31 531 &#91;amel thread 27: MinaThreadPool&#93; MinaProducer DEBUG Message received: Bye 1hello12010-03-11 10:21:31 531 &#91;amel thread 27: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202   ',0
'IndexOutOfBoundsException occur in UnsafeUriCharactersEncoder.class   \tHere is the mail thread for the detail discussion.   ',0
'camel-http component should set Transfer-Encoding as chunked header for response message when checkChunked is true   \tso that the client side which send request will know this is a chunked message.It\'s important when the response http headers is more than 4096 and we want to use chunked response message   ',0
'CXFRS Routing in 2.2.0 does not behave like in 2.0.0   \tCXFRS Routing in Camel 2.0.0 works well with these endPoints:&lt;cxf:rsServer id=\'restRouter\' address=\'/restRouter/\'  serviceClass=\'com.project.service.impl.ServiceManagerImpl\' /&gt; &lt;cxf:rsClient id=\'restEndpoint\' address=\'http://localhost:8080/services/rest\' serviceClass=\'com.project.service.impl.ServiceManagerImpl\' /&gt;In Camel 2.2.0  Routing fails with error causing the CXF Client to invoke a 404 not found Rest Service which is \'http://localhost:8080/services/rest/restRouter/Path\'.The address of cxf:rsClient is being appended by the cxf:rsServer\'s address   ',1
'Invocation of hasNext() on org.apache.camel.util.ObjectHelper.createIterator(...).new Iterator() {...} return different results   \tpublic boolean hasNext() { // empty string should not be regarded as having next return ++idx == 0 &amp;&amp; ObjectHelper.isNotEmpty(s); } public String next() { return s; }This is incorrect. Should be: public boolean hasNext() { // empty string should not be regarded as having next return idx+1 == 0 &amp;&amp; ObjectHelper.isNotEmpty(s); } public String next() { idx++; return s; }   ',0
'Aggregator - Completion by batch consumer should trigger completion for the batch group if multiple correlation keys was used   \tYeah its really an odd use case if you use multiple correlation keys for the same batch consumer  but its still possible to do.   ',0
'IOException: Bad file descriptor and FileNotFoundException   \tWhen I try to stream BINARY (pdf) file using camel-http I get the java.io.IOException: Bad file descriptorThe pdf isn\'t recieved succesfully by reciever (0kb)This seems to be caused by a bug in java (on linux systems)  closing inputstream twice causes problems. It seemed to me this is exactly what is happening  see also link:http://256.com/gray/docs/misc/java_bad_file_descriptor_close_bug.shtmlI fixed this by (checking out apache camel-core and camel-http 2.2.0):In FileInputStreamCache.java:In method close() wrapped getInputStream().close() in if:if (stream != null &amp;&amp; stream instanceof FileInputStream &amp;&amp; ((FileInputStream) stream).getChannel().isOpen()) {getInputStream().close() ;}In method reset() also:if (stream != null &amp;&amp; stream instanceof FileInputStream &amp;&amp; ((FileInputStream) stream).getChannel().isOpen()) {getInputStream().close() ;}Second I needed to fix a filenotfoundexception  the tempfile created by camel was deleted to early.I changed CachedOutputStream.java Reimplemented constructor:public CachedOutputStream(Exchange exchange) { String hold = exchange.getContext().getProperties().get(THRESHOLD); String dir = exchange.getContext().getProperties().get(TEMP_DIR); if (hold != null) { this.threshold = exchange.getContext().getTypeConverter().convertTo(Long.class  hold); } if (dir != null) { this.outputDir = exchange.getContext().getTypeConverter().convertTo(File.class  dir); } // add on completion so we can cleanup after the exchange is done such // as deleting temporary files exchange.addOnCompletion(new SynchronizationAdapter() { @Override public void onDone(Exchange exchange) { try { // close the stream and FileInputStreamCache // close(); // for (FileInputStreamCache cache : fileInputStreamCaches) // { // cache.close(); // } // cleanup temporary file if (tempFile != null) { System.err.println(\'####################################################\'); System.err.println(\'DISABLED tempFile.delete:89\'); System.err.println(\'####################################################\'); // boolean deleted = tempFile.delete(); // if (!deleted) { // LOG.warn(\'Cannot delete temporary cache file: \' + // tempFile); // } else if (LOG.isTraceEnabled()) { // LOG.trace(\'Deleted temporary cache file: \' + // tempFile); // } tempFile = null; } } catch (Exception e) { LOG.warn(\'Error deleting temporary cache file: \' + tempFile  e); } } @Override public String toString() { return \'OnCompletion[CachedOutputStream]\'; } }); }Reimplemented close():public void close() throws IOException { System.err.println(\'####################################################\'); System.err.println(\'outputStream.close:119 -&gt; delete tempFile\'); System.err.println(\'####################################################\'); new Exception().printStackTrace(); currentStream.close(); boolean deleted = tempFile.delete(); if (!deleted) { LOG.warn(\'Cannot delete temporary cache file: \' + tempFile); } else if (LOG.isTraceEnabled()) { LOG.trace(\'Deleted temporary cache file: \' + tempFile); } }   ',0
'Inconsistency between IntrospectionSupport.getProperties() and IntrospectionSupport.getProperty()   \tIntrospectionSupport.getProperties() and IntrospectionSupport.getProperty() work in an inconsistency way:ExampleBean bean = new ExampleBean();Date date = new Date(0);bean.setDate(date);assertSame(date  IntrospectionSupport.getProperty(bean  \'date\')); // succeedMap&lt;String  Object&gt; map = new HashMap&lt;String  Object&gt;();IntrospectionSupport.getProperties(bean  map  null);assertSame(date  map.get(\'date\')); // fails   ',0
'DefaultPackageScanClassResolver can\'t read entries in an eclipse rcp app because it can\'t handle bundleresource - protocol   \tscenario:I have an eclipse rcp based app and use the apache camel libs within my plugin  i.e. the libs are one classpath of the plugin. I use a route using camel-mail to process some mailqueues.CamelContext context = new DefaultCamelContext();context.addRoutes(new RouteBuilder() { public void configure() { from(\'imaps://mailserver?username=user&amp;password=password&amp;consumer.delay=5000&amp;delete=false&amp;unseen=true\') .to(\'log: new mail\'); }}); context.start();When I start my app all seems to be ok. But in my log I get a lot of error messages regarding the loading of converters. If I ask my context to find a converter f.i. to converty to byte[] form inputstream (as I did see in another mail example reagding attachments) I get null because the context can\'t find one.I debugged deeper into the camel code and it seems that the DefaultPackageScanClassResolver can\'t load from urls starting with bundleresource like \'bundleresource://109.fwk32380043:4/org/apache/camel/component/file/\'using camel-osgi didn\'t worked because all camel libs are loaded as inner libs of my single plugin and not as plugins. (loading as plugins didn\'t worked but thats another problem/bug)LOG Messages:2010-04-21 11:15:34 829 DEBUG org.apache.camel.impl.converter.DefaultTypeConverter loadTypeConverters - Loading type converters ...2010-04-21 11:15:34 829 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver findAnnotated - Searching for annotations of org.apache.camel.Converter in packages: &#91;org.apache.camel.component.file  org.apache.camel.component.bean  org.apache.camel.converter  org.apache.camel.component.mail  org.apache.camel.component.spring.integration.converter&#93;2010-04-21 11:15:34 829 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver getClassLoaders - The thread context class loader: org.eclipse.core.runtime.internal.adaptor.ContextFinder@1a76eff is used to load the class2010-04-21 11:15:34 829 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Searching for: annotated with @Converter in package: org/apache/camel/component/file using classloader: org.eclipse.core.runtime.internal.adaptor.ContextFinder2010-04-21 11:15:39 954 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver getResources - Getting resource URL for package: org/apache/camel/component/file with classloader: org.eclipse.core.runtime.internal.adaptor.ContextFinder@1a76eff2010-04-21 11:16:44 970 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - URL from classloader: bundleresource://109.fwk32380043:4/org/apache/camel/component/file/2010-04-21 11:17:01 642 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Decoded urlPath: /org/apache/camel/component/file/ with protocol: bundleresource2010-04-21 11:23:59 814 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - isLocalFileSystem: false2010-04-21 11:24:00 470 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Scanning for classes in &#91;/org/apache/camel/component/file/&#93; matching criteria: annotated with @Converter2010-04-21 11:24:16 079 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Loading from jar using http/https: /org/apache/camel/component/file/2010-04-21 11:24:26 626 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Cannot read entries in url: bundleresource://109.fwk32380043:4/org/apache/camel/component/file/java.net.MalformedURLException: no protocol: /org/apache/camel/component/file/ at java.net.URL.&lt;init&gt;(URL.java:567) at java.net.URL.&lt;init&gt;(URL.java:464) at java.net.URL.&lt;init&gt;(URL.java:413) at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:264) at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:180) at org.apache.camel.impl.DefaultPackageScanClassResolver.findAnnotated(DefaultPackageScanClassResolver.java:100) at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:63) at org.apache.camel.impl.converter.DefaultTypeConverter.loadTypeConverters(DefaultTypeConverter.java:361) at org.apache.camel.impl.converter.DefaultTypeConverter.doStart(DefaultTypeConverter.java:384) at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:53) at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49) at org.apache.camel.impl.DefaultCamelContext.startServices(DefaultCamelContext.java:1174) at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:644) at org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:691) at org.apache.camel.util.CamelContextHelper.convertTo(CamelContextHelper.java:68)   ',0
'HttpEntityConverter should not create a InputStreamEntity by using the GZIPHelper.toGZIPInputStream()   \tGZIPHelper.toGZIPInputStream() is used for uncompress the zip date and not for compress the data.   ',0
'cxfbean component should ignore the wsdlLocation in the POJO   \tcxfbean component should ignore the wsdlLocation in the annotation in the POJO when starting the service. It should be using the JAXWS bean to create the service. Came across this bug when I (mistakenly) set the wsdlLocation to the http one published by the service  which of course wasn\'t up yet and I got the exception below. Fix for this coming soon.For Googlers out there  this ticket may fix this error message you may be getting:Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxfbean://jaxwsBean due to: Failed to create service. at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:437) at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:46) at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:154) at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:109) at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:115) at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:63) at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:57) at org.apache.camel.model.ToDefinition.createProcessor(ToDefinition.java:87) at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:286) at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:114) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:640) ... 32 moreCaused by: org.apache.cxf.service.factory.ServiceConstructionException: Failed to create service. at org.apache.cxf.wsdl11.WSDLServiceFactory.&lt;init&gt;(WSDLServiceFactory.java:93) at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:396) at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:521) at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:271) at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:177) at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:100) at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:105) at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:167) at org.apache.camel.component.cxf.cxfbean.CxfBeanEndpoint.createServer(CxfBeanEndpoint.java:104) at org.apache.camel.component.cxf.cxfbean.CxfBeanEndpoint.init(CxfBeanEndpoint.java:86) at org.apache.camel.component.cxf.cxfbean.CxfBeanComponent.createEndpoint(CxfBeanComponent.java:48) at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:78) at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:416) ... 42 moreCaused by: javax.wsdl.WSDLException: WSDLException: faultCode=PARSER_ERROR: java.lang.IllegalArgumentException: InputSource must have a ByteStream or CharacterStream at org.apache.cxf.wsdl11.WSDLManagerImpl.loadDefinition(WSDLManagerImpl.java:226) at org.apache.cxf.wsdl11.WSDLManagerImpl.getDefinition(WSDLManagerImpl.java:179) at org.apache.cxf.wsdl11.WSDLServiceFactory.&lt;init&gt;(WSDLServiceFactory.java:91) ... 54 moreCaused by: java.lang.IllegalArgumentException: InputSource must have a ByteStream or CharacterStream at org.apache.cxf.staxutils.StaxUtils.createXMLStreamReader(StaxUtils.java:983) at org.apache.cxf.wsdl11.WSDLManagerImpl.loadDefinition(WSDLManagerImpl.java:217) ... 56 more   ',0
'File name lost when it starts with the same characters as the relative directory on the endpoint   \tWhen polling file from a directory using a relative file URI  the file name gets lost when it starts with the same characters as the directory name.E.g. a directory \'orders\' containing \'orders-1719.xml\' and \'orders-1819.xml\'from(\'file:orders\').process(new Processor() { public void process(Exchange exchange) { // there\'s no file name on the message here (exchange.getIn().getHeader(Exchange.FILE_NAME) returns null) }});   ',0
'Incomplete cleanup of jmx mbeans after context stop   \tThere is a fair amount of cleanup on context stop  but it is incomplete. Most of it has to do with JMX and if one creates and starts a new CamelContext she may end up with managed objects pointing nowhere or have duplicates or other minor side-effects. One of the nasty side effects is that we are pretty much forced to use \'&lt;forkMode&gt;pertest&lt;/forkMode&gt;\' in our surefire plugin configuration  ensuring a clean slate for every test.For long running apps in which you may have multiple CamelContext running at various times during the lifetime of the application we must properly cleanup when stopping the context. I have a series of patches fixing that which I hope to finish before 2.3. Once we\'re comfortable and tested with multiple jdk implementations and versions  I\'d change the forkMode to \'once\'. In my local copy this reduces the test time in core from 40+ mins to under 15 mins. Since interactions between tests is still possible and might lead us on a wild-goose we could add another profile that uses the safer yet time consuming \'pertest\' forkMode.   ',0
'HttpProducer should not sending the Http headers with low case   \tHere is the mail thread which discusses about it.http://old.nabble.com/camel-http-converts-headers-to-lower-case-tp28620717p28620717.html   ',0
'AggregationStrategy returning null causes NPE   \tWhen the AggregationStrategy\'s aggregate method returns null  the AggregateProcessor throws an NPE. While this is a result of user error  I think it would be easy to provide a more useful error indicating what the true problem is. This is the (not very helpful) error the user sees:ERROR | Caused by: [org.apache.camel.RuntimeCamelException - java.lang.NullPointerException]org.apache.camel.RuntimeCamelException: java.lang.NullPointerException at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1117) at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:104) at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:543) at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:482) at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:451) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:323) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:261) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:982) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:974) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:876) at java.lang.Thread.run(Thread.java:619)Caused by: java.lang.NullPointerException at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:227) at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:182) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53) at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:97) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:185) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:151) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:89) at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49) at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228) at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70) at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:84) ... 9 more   ',0
'camel-cxf feature doesn\'t include all cxf needs bundles   \tCurrent camel-cxf features doesn\'t include wss4j  saaj-imple  opensaml  fastinfoset bundle.We need to add these bundle into camel-cxf features.   ',0
'VM endpoints with same name do not communicate if args don\'t match   \tIf you send to a VM endpoint from one route and consume from the same endpoint in another route  but include an argument on only one of the routes  Camel sees them as two different routes. Therefore  the messages are never consumed. For example:&lt;camelContext id=\'sendNotifyContext\' xmlns=\'http://camel.apache.org/schema/spring\' errorHandlerRef=\'errorHandler\'&gt; &lt;route id=\'sendToNotify\'&gt; &lt;from uri=\'...\' /&gt; .... &lt;to uri=\'vm:myNotify\' /&gt; &lt;/route&gt;&lt;/camelContext&gt;&lt;camelContext id=\'receiveNotifyContext\' xmlns=\'http://camel.apache.org/schema/spring\' errorHandlerRef=\'errorHandler\'&gt; &lt;route id=\'receiveNotify\'&gt; &lt;from uri=\'vm:myNotify?size=2500\' /&gt; .... &lt;to uri=\'...\' /&gt; &lt;/route&gt;&lt;/camelContext&gt;The producer appears to send to vm:myNotify while the consumer is listening to a separate endpoint named vm:myNotify?size=2500  so the messages build up and are never received.   ',0
'MailBinding can\'t handle the subject header with NO_ASCII code rightly.   \tHere is the mail thread which discusses about it.   ',0
'Bindy - No @Section causes a null key being generated which causes a NumberFormatException   \tSee nabblehttp://old.nabble.com/Bindy-CSV-not-Marshaling-ts28719942.html   ',0
'Escaped characters in http4 URLs do not work   \tThere is a bug in http4 HttpProducer that is unescaping URL query and path components too early. Patch fix attached.   ',0
'Aggregation raises NullPointerException if last file in batch is not to be aggregated.   \tWhen trying to aggregate files from a directory  it seems that camel-core raises a NullPointerException if the last file of the batch is a single file. That is it doesn\'t match the correlationExpression with any other files and therefore should just pass through. If such a file is the first file or in the middle of the files (alphabetically) this issue is not present.See:http://old.nabble.com/Aggregator-problem-with-files-(Camel-2.3)-td28778641.html#a28780522   ',0
'It is impossible to put # sign in SQL statement in camel-sql   \tSqlProducer implementation turns all # characters into ? making it impossible to have # in the SQL statement.   ',0
'camel-castor relies on specific  out of date version of Castor   \tcamel-castor specifies a non-flexible version dependency on Castor 1.2.0. Ideally should be changed to [1.2.0 2.0) to allow later versions of Castor to be deployed. Castor 1.2 was released in Feb 2008  1.3 was first released in Feb 2009   ',0
'camel-ftp - SFTP in fileExists should handle exception being thrown with id code stating no such file   \tSee nabblehttp://camel.465427.n5.nabble.com/camel-ftp-cannot-create-directory-using-sftp-tp479092p479092.html   ',0
'Deadlock in org.apache.camel.util.DefaultTimeoutMap   \tAfter running a camel route with a camel Aggregator for a while  I get a deadlock in org.apache.camel.util.DefaultTimeoutMap. A full processdump is attached to this bug.I have also tried to recreate this as failing testcase  but without any luck so far.   ',0
'No consumers available on \'direct://xyz\' endpoint   \tThe following warning in log4j log shows up with no predictable reason:2010-06-24 14:07:01 090 WARN &#91;DefaultMessageListenerContainer-7:DirectProducer.java:42&#93; No consumers available on endpoint: Endpoint&#91;direct://UserCancelJobRequest&#93; to process: Exchange[JmsMessage: RunnerBase{locationToRunId=\'DV02YcABTE43HTRPATEGCBFk0m0\'  jobrun_id=1234  requestOrigId=\'null\'  secretKey=\'null\'  replyToQueueOrTopic=\'null\'  corrolationId=\'null\'  requestCreationTime=Thu Jun 24 14:07:01 PDT 2010}]The endpoint &#91;direct://UserCancelJobRequest&#93; could be a number of different endpoints in our application and all of them are of \'direct:\' type. When this happens  all messages that run through that endpoint will fail  and it will never recover unless the application is restarted.Also  if I restart the application and use that route immediately  that warning will not occur and the request will finish successfully. It seems to happen to routes that have not been used for a while after startup.When this happens  I can find the exact Camel endpoint/route/processor in JConsole  and nothing seems to be wrong. How can a \'direct:\' endpoint runs out of consumer? Isn\'t the thread that product this warning THE thread to process the message?We recently upgraded from 5.2 to 5.3.2 and this starts to show up randomly. It is a show stopper!--Michael   ',0
'convertBodyTo should handle null bodies   \tIf the body is null and you use convertBodyTo you will get a no type converter exception due body is null. Instead it should accept the null body and continue routing.   ',0
'Oracle AQ does not support the JMSReplyTo property and therefore throws a \'JMS-102: Feature not supported\' exception when the JMS provider tries to get it.   \tOracle AQ does not support the JMSReplyTo property and therefore throws a \'JMS-102: Feature not supported\' exception when the JMS provider tries to get it.   ',0
'Broken failure reporting via DefaultProucerTemplate.asyncCallback and Synchronization.onFailure   \tThe recent change in ProducerCache.sendProducerCache.java public void send(Endpoint endpoint  Exchange exchange) { try { sendExchange(endpoint  null  null  exchange); // RECENT CHANGE HERE: // ensure that CamelExecutionException is always thrown if (exchange.getException() != null) { exchange.setException(wrapCamelExecutionException(exchange  exchange.getException())); } } catch (Exception e) { throw wrapCamelExecutionException(exchange  e); } }that throws a CamelExecutionException if exchange.getException is not null  makes it impossible for DefaultProducerTemplate.asyncCallback to report failures (other than fault messages) asynchronously via Synchronization.onFailureDefaultProducerTemplate.java public Future&lt;Exchange&gt; asyncCallback(final Endpoint endpoint  final Exchange exchange  final Synchronization onCompletion) { Callable&lt;Exchange&gt; task = new Callable&lt;Exchange&gt;() { public Exchange call() throws Exception { // FIXME: exception is thrown in Camel 2.4 where a normal return with answer.getException != null was done in Camel 2.3 Exchange answer = send(endpoint  exchange); if (answer.isFailed()) { onCompletion.onFailure(answer); } else { // ... } return answer; } }; // ... }This was working in Camel 2.3 (but unfortunately there wasn\'t any test case for it). I attached a patch for DefaultProducerTemplateAsyncTest that demonstrates the problem. I didn\'t commit a fix yet because I\'m unsure at the moment about the best way to fix that. Of course I tried a naive fix in the DefaultProducerTemplate.asyncCallback methods which causes the test (in the patch) to pass but I\'d like to hear other opinions before I continue.   ',1
'StreamProducer does not close stream in camel-stream   \tSince the stream could be System.out or System.err  the producer does not close the stream ever. It should close all streams with the noted exceptions.   ',0
'org.apache.camel.component.test package is imported in camel-spring component - generates error on OSGI platform   \t[ 86] [Installed ] [ ] [ 60] camel-spring (2.5.0.SNAPSHOT)karaf@root&gt; start 86Error executing command: Unresolved constraint in bundle org.apache.camel.camel-spring [86]: Unable to resolve 86.0: missing requirement [86.0] package; (&amp;(package=org.apache.camel.component.test)(version&gt;=2.5.0)(!(version&gt;=2.5.1))) - [86.0] package; (&amp;(package=org.apache.camel.component.test)(version&gt;=2.5.0)(!(version&gt;=2.5.1)))karaf@root&gt; headers 86camel-spring (86)-----------------Bnd-LastModified = 1278946400750Build-Jdk = 1.6.0_20Built-By = CharlesmBundle-Activator = org.apache.camel.osgi.ActivatorBundle-Description = Camel Spring supportBundle-DocURL = http://www.apache.org/Bundle-License = http://www.apache.org/licenses/LICENSE-2.0.txtBundle-ManifestVersion = 2Bundle-Name = camel-springBundle-SymbolicName = org.apache.camel.camel-springBundle-Vendor = The Apache Software FoundationBundle-Version = 2.5.0.SNAPSHOTCreated-By = Apache Maven Bundle PluginExport-Package = org.apache.camel.spring.spi;uses:=\'org.springframework.context org.apache.camel.spi org.springframework.beans.factory org.apache.camel org.springframework.beans.factory.config org.apache.camel.builder org.springframework.transaction org.apache.commons.logging org.apache.camel.processor.exceptionpolicy org.apache.camel.processor org.apache.camel.util org.apache.camel.model org.springframework.transaction.support\';version=\'2.5.0.SNAPSHOT\' org.apache.camel.spring.util;uses:=\'org.apache.camel org.springframework.context org.apache.camel.util org.apache.commons.logging org.springframework.beans.factory org.springframework.util\';version=\'2.5.0.SNAPSHOT\' org.apache.camel.spring.remoting;uses:=\'org.apache.camel.util org.springframework.remoting.support org.apache.camel.component.bean org.apache.camel org.springframework.beans org.springframework.context org.apache.camel.spi org.apache.camel.spring.util org.springframework.beans.factory\';version=\'2.5.0.SNAPSHOT\' org.apache.camel.spring;uses:=\'org.apache.camel.impl org.apache.camel.util org.apache.commons.logging org.apache.camel org.springframework.beans org.springframework.context org.springframework.util org.springframework.beans.factory.config org.apache.camel.spring.util javax.xml.bind.annotation org.springframework.beans.factory org.apache.camel.builder org.apache.camel.model.dataformat org.springframework.context.event org.apache.camel.model.config org.apache.camel.model org.apache.camel.spi org.apache.camel.spring.spi org.apache.camel.view org.springframework.context.support org.apache.camel.spring.handler javax.xml.bind org.apache.camel.component.bean org.apache.camel.component.event org.springframework.transaction org.springframework.transaction.support\';version=\'2.5.0.SNAPSHOT\' org.apache.camel.spring.handler;uses:=\'org.springframework.beans.factory.support org.springframework.core org.springframework.util org.springframework.beans.factory.xml org.w3c.dom org.springframework.beans org.springframework.beans.factory.config org.springframework.beans.factory.parsing org.apache.camel.model.dataformat org.apache.camel.model.config org.apache.camel.util org.apache.camel.model org.apache.camel.spring javax.xml.bind org.springframework.beans.factory org.apache.camel.view org.apache.commons.logging org.apache.camel.model.loadbalancer org.apache.camel.builder.xml org.apache.camel.spring.remoting org.apache.camel.spi org.apache.camel org.apache.camel.model.language org.apache.camel.processor\';version=\'2.5.0.SNAPSHOT\' org.apache.camel.osgi;uses:=\'org.osgi.framework org.apache.camel.impl org.springframework.osgi.context org.apache.commons.logging javax.xml.bind.annotation org.springframework.context org.apache.camel.spring org.apache.camel.model org.apache.camel.model.loadbalancer org.apache.camel org.apache.camel.model.language org.springframework.beans.factory.xml org.apache.camel.model.dataformat org.apache.camel.spring.handler org.apache.camel.model.config org.apache.camel.spi\';version=\'2.5.0.SNAPSHOT\' org.apache.camel.component;uses:=\'org.apache.camel.impl org.apache.commons.logging org.springframework.core.io org.apache.camel org.apache.camel.converter org.apache.camel.spi\';version=\'2.5.0.SNAPSHOT\' org.apache.camel.component.event;uses:=\'org.apache.camel org.springframework.context org.apache.camel.impl org.springframework.beans org.apache.camel.util org.apache.camel.processor.loadbalancer\';version=\'2.5.0.SNAPSHOT\' org.apache.camel.component.test;uses:=\'org.apache.camel.impl org.apache.camel.util org.apache.camel org.apache.commons.logging org.apache.camel.component.mock\';version=\'2.5.0.SNAPSHOT\' org.apache.camel.component.validator;uses:=\'javax.xml.transform org.springframework.core.io javax.xml.transform.stream org.apache.camel.processor.validation org.apache.camel.impl org.apache.camel.component org.apache.commons.logging org.apache.camel\';version=\'2.5.0.SNAPSHOT\' org.apache.camel.component.xslt;uses:=\'org.apache.camel.impl org.apache.camel.component org.apache.commons.logging org.apache.camel org.springframework.core.io org.apache.camel.builder.xml org.apache.camel.util javax.xml.transform org.apache.camel.converter.jaxp org.apache.camel.spi\';version=\'2.5.0.SNAPSHOT\'Ignore-Package = org.apache.camel.spring.remoting org.apache.camel.component org.apache.camel.component.validator org.apache.camel.component.xslt org.apache.camel.spring.spi org.apache.camel.spring org.apache.camel.osgi org.apache.camel.spring.handler org.apache.camel.component.event org.apache.camel.spring.utilImplementation-Title = Camel :: SpringImplementation-Vendor = The Apache Software FoundationImplementation-Vendor-Id = org.apache.camelImplementation-Version = 2.5-SNAPSHOTImport-Package = javax.xml.bind javax.xml.bind.annotation javax.xml.bind.annotation.adapters javax.xml.transform javax.xml.transform.stream org.apache.camel;version=\'[2.5.0 2.5.1)\' org.apache.camel.builder;version=\'[2.5.0 2.5.1)\' org.apache.camel.builder.xml;version=\'[2.5.0 2.5.1)\' org.apache.camel.component.bean;version=\'[2.5.0 2.5.1)\' org.apache.camel.component.mock;version=\'[2.5.0 2.5.1)\' org.apache.camel.component.properties;version=\'[2.5.0 2.5.1)\' org.apache.camel.component.test;version=\'[2.5.0 2.5.1)\' org.apache.camel.converter;version=\'[2.5.0 2.5.1)\' org.apache.camel.converter.jaxp;version=\'[2.5.0 2.5.1)\' org.apache.camel.impl;version=\'[2.5.0 2.5.1)\' org.apache.camel.impl.converter;version=\'[2.5.0 2.5.1)\' org.apache.camel.management;version=\'[2.5.0 2.5.1)\' org.apache.camel.model;version=\'[2.5.0 2.5.1)\' org.apache.camel.model.config;version=\'[2.5.0 2.5.1)\' org.apache.camel.model.dataformat;version=\'[2.5.0 2.5.1)\' org.apache.camel.model.language;version=\'[2.5.0 2.5.1)\' org.apache.camel.model.loadbalancer;version=\'[2.5.0 2.5.1)\' org.apache.camel.processor;version=\'[2.5.0 2.5.1)\' org.apache.camel.processor.exceptionpolicy;version=\'[2.5.0 2.5.1)\' org.apache.camel.processor.interceptor;version=\'[2.5.0 2.5.1)\' org.apache.camel.processor.loadbalancer;version=\'[2.5.0 2.5.1)\' org.apache.camel.processor.validation;version=\'[2.5.0 2.5.1)\' org.apache.camel.spi;version=\'[2.5.0 2.5.1)\' org.apache.camel.util;version=\'[2.5.0 2.5.1)\' org.apache.camel.view;version=\'[2.5.0 2.5.1)\' org.apache.commons.logging org.osgi.framework;version=\'[1.3 2)\' org.osgi.util.tracker;version=\'[1.3 2)\' org.springframework.beans;version=\'[2.5 4)\' org.springframework.beans.factory;version=\'[2.5 4)\' org.springframework.beans.factory.config;version=\'[2.5 4)\' org.springframework.beans.factory.parsing;version=\'[2.5 4)\' org.springframework.beans.factory.support;version=\'[2.5 4)\' org.springframework.beans.factory.xml;version=\'[2.5 4)\' org.springframework.context;version=\'[2.5 4)\' org.springframework.context.event;version=\'[2.5 4)\' org.springframework.context.support;version=\'[2.5 4)\' org.springframework.core;version=\'[2.5 4)\' org.springframework.core.io;version=\'[2.5 4)\' org.springframework.osgi.context;version=\'[1.2 2)\' org.springframework.remoting.support;version=\'[2.5 4)\' org.springframework.transaction;version=\'[2.5 4)\' org.springframework.transaction.support;version=\'[2.5 4)\' org.springframework.util;version=\'[2.5 4)\' org.w3c.domManifest-Version = 1.0Specification-Title = Camel :: SpringSpecification-Vendor = The Apache Software FoundationSpecification-Version = 2.5-SNAPSHOTTool = Bnd-0.0.357   ',0
'java.util.ConcurrentModificationException in Method org.apache.camel.util.CaseInsensitiveMap.putAll()   \tEvery now and then I\'m facing the ConcurrentModificationException. It very hard to reproduce. This is my stack trace:Failed delivery for exchangeId: ba969718-9044-4261-bc57-ca10aafb0a03. Exhausted after delivery attempt: 1 caught: java.util.ConcurrentModificationExceptionjava.util.ConcurrentModificationException: null at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793) &#91;na:1.6.0_20&#93; at java.util.HashMap$KeyIterator.next(HashMap.java:828) &#91;na:1.6.0_20&#93; at org.apache.camel.util.CaseInsensitiveMap.putAll(CaseInsensitiveMap.java:86) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.impl.MessageSupport.copyFrom(MessageSupport.java:142) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.impl.DefaultMessage.copyFrom(DefaultMessage.java:52) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.util.ExchangeHelper.copyResults(ExchangeHelper.java:199) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.Pipeline.process(Pipeline.java:114) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:51) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:97) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:185) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:151) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:89) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.Pipeline.process(Pipeline.java:75) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.component.http.CamelServlet.service(CamelServlet.java:71) &#91;camel-http-2.3.0.jar:2.3.0&#93; at javax.servlet.http.HttpServlet.service(HttpServlet.java:831) &#91;javaee.jar:9.1&#93;...Looks like CaseInsensitiveMap isn\'t enough thread save. But I have no idea what other thread is modifies the map. Most of the time everything is ok.   ',0
'onException not working correctly when using routeContext   \tWhen using a routeContext  the last (in the xml-file) defined route-scoped &lt;onException&gt; configuration is shared by the other routes in the context.http://camel.465427.n5.nabble.com/possible-onException-bug-when-using-routeContext-td1616244.html#a1616244   ',0
'java.net.SocketException: Too many open files with Apache Camel(Netty TCP) 2.4.0.   \tI\'ve got a unit test that works fine with Apache Camel 2.3.0  but as soon as I upgraded to 2.4.0 it consistently started to fail.It performs a number of concurrent requests using this url:netty:tcp://localhost:2048?sync=trueIn both the client and server side of the unit test.There\'s also a sister test which does the same thing with Netty directly and that works in isolation  so it would appear something has been broken in the transition to 2.4.0. Previously this code was also using a beta version of Netty  but even updating that specific dependency has made no difference.   ',1
'FtpComponent: If login fails and disconnect=true another connection is opened.   \tIn a route such as below a second connection to the ftp server is opened if the login fails.&lt;route&gt;  &lt;from uri=\'ftp:localhost/inbox/?username=usr&amp;password=pwd&amp;disconnect=true&amp;consumer.delay=60s&amp;maximumReconnectAttempts=0\' /&gt;  &lt;to uri=\'file:test_data\' /&gt; &lt;/route&gt; Further description: http://camel.465427.n5.nabble.com/FTP-Try-login-once-and-disconnect-if-failure-td1692660.html#a1692660   ',0
'camel-jpa doesn\'t use EntityManager.merge(entity) in the right way   \tThe EntityManager.merge(entity) method returns the merged entity. The exchange in message body should be updated with the merged entity (what camel-jpa currently not do).I running into this problem  because after saving an entity in the database  the id field was still null. So  we don\'t know  which entity in the database is the corresponding to this entity... Have a look in the process method of JpaProducer and the Java doc from the EntityManager.Christian   ',0
'IllegalStateException in CamelContinuationServlet under heavy load   \tReason is a race between continuation.suspend() and continuation.resume(). It can occur that continuation.resume() is executed before continuation.suspend() leading to an IllegalStateException thrown by Jetty:java.lang.IllegalStateException: DISPATCHED initial at org.eclipse.jetty.server.AsyncContinuation.dispatch(AsyncContinuation.java:364) at org.eclipse.jetty.server.AsyncContinuation.resume(AsyncContinuation.java:769) at org.apache.camel.component.jetty.CamelContinuationServlet$1.done(CamelContinuationServlet.java:85) at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78) at org.apache.camel.processor.UnitOfWorkProcessor$1.done(UnitOfWorkProcessor.java:104) at org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:262) at org.apache.camel.processor.RedeliveryErrorHandler$1.done(RedeliveryErrorHandler.java:302) at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78) at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)This is the case when an async completion callback is faster than the thread that is concurrently executing the if (continuation.isInitial()) block. I\'ll commit a fix soon that also follows the recommendations in http://wiki.eclipse.org/Jetty/Feature/Continuations to always call continuation.suspend() before registering the continuation with a callback handler.   ',0
'Flatpack component : unable to set the delimiter parameter in spring config file   \tIt\'s not possible to set the delimiter parameter in spring configuration file or I don\'t find the way to do it !For example : &lt;route id=\'routeA\'&gt; &lt;from uri=\'file:src/test/resources/csv?move=done/&amp;fileName=testfileRouteA.csv\' /&gt; &lt;to uri=\'flatpack:delim:META-INF/Delimited.pzmap.xml?delimiter=;\' /&gt;&lt;/route&gt;I get the following error :Exception in thread \'main\' org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route routeA at: &gt;&gt;&gt; To&#91;flatpack:delim:META-INF/Delimited.pzmap.xml?ignoreFirstRecord=false&amp;splitRows=true&amp;delimiter=;&#93; &lt;&lt;&lt; in route: Route[[From[file:src/test/resources/csv?move=done/&amp;fileName=... because of Failed to resolve endpoint: flatpack://delim:META-INF/Delimited.pzmap.xml?delimiter=\%3B&amp;ignoreFirstRecord=false&amp;splitRows=true due to: Could not find a suitable setter for property: delimiter as there isn\'t a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: char with value ; at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1126) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103) at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:231) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:428) at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:139) at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:93) at org.apache.camel.spring.Main.createDefaultApplicationContext(Main.java:219) at org.apache.camel.spring.Main.doStart(Main.java:173) at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:56) at org.apache.camel.impl.MainSupport.run(MainSupport.java:114) at org.apache.camel.impl.MainSupport.run(MainSupport.java:291) at org.apache.camel.spring.Main.main(Main.java:97)If it\'s a bug  to solve it  it\'s just necessary to change the class org.apache.camel.component.flatpack.DelimitedEndpoint as below : change the flied definition like this (and getter/setter to): private String delimiter = \' \'; private String textQualifier = \'/\'\'; and the the method createParser like this : public Parser createParser(Exchange exchange) throws InvalidPayloadException  IOException Unknown macro: { Reader bodyReader = ExchangeHelper.getMandatoryInBody(exchange  Reader.class); Resource resource = getResource(); if (delimiter == null || delimiter.equals(&quot;&quot;)) delimiter = &quot; &quot;; if (textQualifier == null || textQualifier.equals(&quot;&quot;)) textQualifier = &quot;&quot;&quot;; if (resource == null) { return getParserFactory().newDelimitedParser(bodyReader  delimiter.charAt(0)  textQualifier.charAt(0)); } else { return getParserFactory().newDelimitedParser(new InputStreamReader(resource.getInputStream())  bodyReader  delimiter.charAt(0)  textQualifier.charAt(0)  ignoreFirstRecord); } }   ',0
'JettyHttpComponent.doStop() shuts down all servers in the VM  not just those associated with the component   \tWe are running several bundles in Karaf with separate Camel contexts  each of which uses the camel-jetty component to expose services over HTTP. Each bundle has an assigned port and may listen on multiple URIs. We noticed that when we updated or shut down one of these bundles  all of the Jetty servers in the other bundles would stop listening on their respective ports.The problem is that the map of ConnectorRef objects in JettyHttpComponent is static  and therefore shared across the entire VM. Changing this from static to an instance variable fixed the issue for us.   ',0
'RouteBuilderRef should work out of the box with Spring 3 and dependency injection   \tSpring 3 changed internally how dependency resolution works. Its now worse as we have to play tricks in the Camel namespace handler to tell Camel the various pieces you can ref  should depend on Camel. Otherwise the dependency resolution in Spring is not working properly.This used to work like a charm in Spring 2.5.6.   ',0
'Out of Heap memory issues with Camel-File processing large files   \tCamel-File component throws heap memory issue when processing csv file which is about 45MB with 218k Lines. http://camel.465427.n5.nabble.com/Java-heap-space-issue-with-reading-large-CSV-file-tt2638903.html#a2638903   ',0
'Cache Component needs to check for null values during GET operations   \tEhCache often has a bit of lag time when invalidating expired cache elements  first setting the Element value to null and then removing the key. If you are hitting a cache rapidly one often will run across a key that is present in the cache that still has a null element entry.The logic for successfully key retrieval just needs to be slightly tweaked to check for null values.   ',0
'netty timeout exception   \teventhough message was received by netty procuder  it thows a timeout exception after 30 secs. here is the route and log. as this is a basic functionality I think this is critical priority. from(\'netty:tcp://localhost:6205?textline=true&amp;sync=true\').process(new Processor() { int i=0; public void process(Exchange exchange) throws Exception { String body = exchange.getIn().getBody(String.class); Thread.sleep(5000); exchange.getOut().setBody(\'Bye 1\' + body); // if(i++\%2==1) throw new IOException(\'custom exception\'); } }); from(\'file:///test/test/response\') .convertBodyTo(String.class) .threads(1) .to(ExchangePattern.InOut \'netty:tcp://localhost:6205?textline=true&amp;sync=true\') .to(\'log:+++ reply++++\');2010-08-25 11:33:29 963 &#91;1 - file:///test/test/response&#93; FileConsumer DEBUG Total 1 files to consume2010-08-25 11:33:29 963 &#91;1 - file:///test/test/response&#93; FileConsumer DEBUG About to process file: GenericFile&#91;C:/test/test/response/hello1.txt&#93; using exchange: Exchange[GenericFileMessage with file: GenericFile&#91;C:/test/test/response/hello1.txt&#93;]2010-08-25 11:33:31 510 [ Camel Thread 6 - Threads] SendProcessor DEBUG &gt;&gt;&gt;&gt; Endpoint&#91;tcp://localhost:6205&#93; Exchange&#91;GenericFileMessage with body: hello1&#93;2010-08-25 11:33:31 682 [ Camel Thread 6 - Threads] NettyProducer DEBUG Creating connector to address: localhost:62052010-08-25 11:33:31 682 [ Camel Thread 6 - Threads] NettyProducer DEBUG Writing body: hello12010-08-25 11:33:31 697 [ New I/O client worker #1-1] NettyProducer DEBUG Operation complete org.jboss.netty.channel.DefaultChannelFuture@944dbd2010-08-25 11:33:31 697 [ New I/O server worker #1-1] ServerChannelHandler DEBUG Incoming message: hello12010-08-25 11:33:36 697 [ New I/O server worker #1-1] ServerChannelHandler DEBUG Writing body: Bye 1hello12010-08-25 11:33:36 697 [ New I/O client worker #1-1] ClientChannelHandler DEBUG Message received: Bye 1hello12010-08-25 11:33:36 697 [ New I/O client worker #1-1] SendProcessor DEBUG &gt;&gt;&gt;&gt; Endpoint&#91;log://+++ reply++++&#93; Exchange&#91;GenericFileMessage with body: Bye 1hello1&#93;2010-08-25 11:33:36 713 [ New I/O client worker #1-1] +++ reply++++ INFO Exchange&#91;ExchangePattern:InOut  BodyType:String  Body:Bye 1hello1&#93;2010-08-25 11:33:36 713 [ New I/O client worker #1-1] GenericFileOnCompletion DEBUG Done processing file: GenericFile&#91;C:/test/test/response/hello1.txt&#93; using exchange: Exchange&#91;GenericFileMessage with body: Bye 1hello1&#93;2010-08-25 11:33:36 713 [ New I/O client worker #1-1] FileUtil DEBUG Tried 1 to delete file: C:/test/test/response/hello1.txt.camelLock with result: true2010-08-25 11:33:36 713 [ New I/O client worker #1-1] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile&#91;C:/test/test/response/hello1.txt&#93; to: GenericFile&#91;C:/test/test/response/.camel/hello1.txt&#93;2010-08-25 11:33:36 713 [ New I/O client worker #1-1] FileUtil DEBUG Tried 1 to rename file: C:/test/test/response/hello1.txt to: C:/test/test/response/.camel/hello1.txt with result: true2010-08-25 11:34:06 886 [ Hashed wheel timer #1] DefaultErrorHandler DEBUG Failed delivery for exchangeId: f5eb372d-a214-4418-a60f-62c0557768d2. On delivery attempt: 0 caught: org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 30000 millis. Exchange&#91;GenericFileMessage with body: Bye 1hello1&#93;2010-08-25 11:34:06 886 [ Hashed wheel timer #1] DefaultErrorHandler ERROR Failed delivery for exchangeId: f5eb372d-a214-4418-a60f-62c0557768d2. Exhausted after delivery attempt: 1 caught: org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 30000 millis. Exchange&#91;GenericFileMessage with body: Bye 1hello1&#93;org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 30000 millis. Exchange&#91;GenericFileMessage with body: Bye 1hello1&#93;   ',0
'BeanConveter didn\'t try to covert the bean invocation argument rightly   \tHere is the mail thread about it.http://camel.465427.n5.nabble.com/Bug-in-the-BeanConverter-class-td2653552.html#a2653552   ',0
'QuartzEndpoint does not set the job name properly   \tLooks like the job.name argument is not se properly on the endpoint and defaults to the uri path.Another nastier issue (for which I should have probably created a separate issue) is that the uri gets messed up if it does not have the double slashes after the scheme (as in \'quartz:&lt;uri&gt;\' vs \'quartz://&lt;uri&gt;\') and the @cron argument contains \'?\'. The workaround (arguably) is to start the uri with \'quartz://...\'.See nabble thread. Many thanks to SK for reporting this.   ',0
'@QueryParam doesn\'t work for CxfBeans   \tCharle report an issue&#91;1&#93;  after tracing the code I found the DefaultCxfBeanBinding doesn\'t put the http query string into the cxf message.So the @QueryParam will not take effect on the resource beans.&#91;1&#93;http://camel.465427.n5.nabble.com/camel-cxfbean-JAX-Rs-QueryParam-td2827252.html#a2827252   ',0
'hawtdb - Should work in OSGi   \tThe decode method in ObjectCodec should wrap the causes stacktrace in the wrapped IOException.For example OSGi frameworks may be pesky and we want to be able to see whatever stacktrace it may thrown on you. public T decode(DataInput dataIn) throws IOException { int size = dataIn.readInt(); byte[] data = new byte[size]; dataIn.readFully(data); ByteArrayInputStream bytesIn = new ByteArrayInputStream(data); ObjectInputStream objectIn = new ObjectInputStream(bytesIn); try { return (T) objectIn.readObject(); } catch (ClassNotFoundException e) { throw new IOException(e.getMessage()); } }For being JDK 1.5 compatible you need to do it like public static IOException createIOException(String message  Throwable cause) { IOException answer = new IOException(message); answer.initCause(cause); return answer; }   ',0
'Splitter EIP - The sub exchanges should not contains on completions from original Exchange   \tSee nabblehttp://camel.465427.n5.nabble.com/Camel-calling-commit-too-early-when-using-split-seda-file-endpoint-tp2830894p2830894.html   ',0
'polling of feeds in FeedEntryPollingConsumer is broken.   \tThe FeedEntryPollingConsumer class implements the poll() method for the \'splitEntries\' mode of the RssEndpoint is broken.You can think of two ways that polling feeds could work:1) A feed is created  then one item is processed  then the delay  then process another item. This way the feed is kept between calls to poll().2) A feed is created  then all the items are processed  the feed is cleared  and then the delay.But the way it presently works:A feed is created  one items is processed  and the feed is cleared  then the delay  and again the feed is created and the next item is cleared.This is clearly wrong. Feed entries can be missed  because the index of the next item to process is stored over polls but the list isn\'t. Also this creates a big network overhead when polling very active feeds such as twitter search...This is easy to fix. In the below code:public void poll() throws Exception { Object feed = createFeed(); populateList(feed); while (hasNextEntry()) { Object entry = list.get(entryIndex--); boolean valid = true; if (entryFilter != null) { valid = entryFilter.isValidEntry(endpoint  feed  entry); } if (valid) { Exchange exchange = endpoint.createExchange(feed  entry); getProcessor().process(exchange); // return and wait for the next poll to continue from last time (this consumer is stateful) return; } }The return (at line 56 of org.apache.camel.component.feed.FeedEntryPollingConsumer) should be deleted.   ',0
'Using $ in endpoint uri causes thread name parser to fail   \tSee nabblehttp://camel.465427.n5.nabble.com/How-to-specify-route-to-folder-with-in-actual-name-tp2839895p2839895.html   ',0
'cxfbean creates another instance of the class instead of directly using the referenced bean   \t... this makes it impossible to inject properties to the @WebService class&lt;camelContext&gt; &lt;route&gt; &lt;from uri=\'....\' /&gt; &lt;to uri=\'cxfbean:handler\' /&gt; &lt;/route&gt;&lt;/camelContext&gt;&lt;bean id=\'handler\' class=\'a.b.c.Handler\'&gt; &lt;property name=\'prop1\' value=\'5\' /&gt;&lt;/bean&gt;when \'handler\' is created by Spring  its \'prop1\' is set to \'5\'when the cxfbean:handler is triggered  the \'prop1\' is null  because CXF created another instance of Handler instead of using the one created by Spring   ',0
'Route autoStartup configurable through Property   \tUsing Camel 2.4 I want to make the usage of a certain route configurable through properties. &lt;camelContext id=\'camel\' trace=\'true\' xmlns=\'http://camel.apache.org/schema/spring\'&gt; &lt;route id=\'configurable_1\' autoStartup=\'{{startup_1}}\'&gt; &lt;from uri=\'direct:start_1\'/&gt; &lt;to uri=\'mock:end_1\'/&gt; &lt;/route&gt; &lt;route id=\'configurable_2\' autoStartup=\'{{startup_2}}\'&gt; &lt;from uri=\'direct:start_2\'/&gt; &lt;to uri=\'mock:end_2\'/&gt; &lt;/route&gt;&lt;/camelContext&gt;But if I do use the PropertyPlaceholder on the CamelContext like below it works. &lt;camelContext id=\'camel\' trace=\'true\' autoStartup=\'{{startup_context}}\'So is this a bug or should this work this way?   ',0
'OsgiDefaultCamelContext.getTypeConverterRegistry() returns null   \tThe showed up when using dozer as shown in http://camel.apache.org/dozer-type-conversion.html  whose DozerTypeConverterLoader tries to get the type converter registry using: {{{TypeConverterRegistry registry = camelContext.getTypeConverterRegistry();}}}Plausible error:OsgiDefaultCamelContext.java @Override protected TypeConverter createTypeConverter() { return new OsgiTypeConverter(bundleContext  getInjector()); }DefaultCamelContext.javapublic TypeConverterRegistry getTypeConverterRegistry() { if (typeConverterRegistry == null) { // init type converter as its lazy if (typeConverter == null) { getTypeConverter(); } // type converter is usually the default one that also is the registry if (typeConverter instanceof DefaultTypeConverter) { typeConverterRegistry = (DefaultTypeConverter) typeConverter; } } return typeConverterRegistry; }Error:getTypeConverter() returns an OsgiTypeConverter OsgiTypeConverter does not inherit from DefaultTypeConverter  thus the instanceof returns false=&gt; null is returnedSolution:Lots of different ways to do this  and it\'s getting late here. In this case  maybe it\'s OsgiDefaultCamelContext\'s responsibility to also override getTypeConverterRegistry with something along the lines of:@Overridepublic TypeConverterRegistry getTypeConverterRegistry() { if (typeConverterRegistry == null) { // init type converter as its lazy if (typeConverter == null) { getTypeConverter(); } // type converter is usually the default one that also is the registry if (typeConverter instanceof OsgiDefaultTypeConverter) { typeConverterRegistry = ((OsgiDefaultTypeConverter) typeConverter).getRegistry(); } } return typeConverterRegistry; }We\'ve employed an (ugly) workaround in a local version of DozerTypeConverterLoader.java: TypeConverter typeConverter = camelContext.getTypeConverter(); DefaultTypeConverter registry = null; if (typeConverter instanceof DefaultTypeConverter) { registry = (DefaultTypeConverter)typeConverter; } else if (typeConverter instanceof OsgiTypeConverter) { OsgiTypeConverter osgiTypeConverter = (OsgiTypeConverter)typeConverter; registry = osgiTypeConverter.getRegistry(); }   ',0
'camel-ftp: fileExist=Fail not honored when producer works in FTP root path   \twhen using a route with ftp producer such as : &lt;to uri=\'ftp://user@host/?fileExist=Fail&amp;fileName=test&amp;password=mypass\' /&gt;The route will not correctly fail if the fileName already exists.It will work in any sub-directory: &lt;to uri=\'ftp://user@host/mydir?fileExist=Fail&amp;fileName=test&amp;password=mypass\' /&gt;The root cause of the bug is an incorrect test in org.apache.camel.util.FileUtil.onlyPath() in component camel-core.This method returns null when the parameter string is \'/\'. It should return \'/\'.The attached patch fixes the issue.   ',0
'camel-ftp - Setting password and username using UserInfo on uri does not work   \tYou should be able to set ftp endpoint uri as:\'ftp://scott@localhost:\' + getPort() + \'/deletefile?password=tiger&amp;binary=false&amp;delete=true\'And when using password and username in the userinfo part of the uri:\'ftp://tiger:scott@localhost:\' + getPort() + \'/deletefile?binary=false&amp;delete=true\'The latter didn\'t work   ',0
'Confusing IllegalArgumentException when address attribute isn\'t specified on CXF endpoint.   \tIf you create CXF endpoint  like this  without the address attribute   &lt;cxf:cxfEndpoint id=\'greeting\' wsdlURL=\'greeting.wsdl\' serviceClass=\'tutorial.hanbo.webservice.Greeting\' &gt; &lt;/cxf:cxfEndpoint&gt; ... then you get a really confusing error when you deploy the endpoint in ServiceMix: the error is Caused by: java.lang.IllegalArgumentException: endpointUri is not specified and org.apache.camel.component.cxf.CxfSpringEndpoint does not implement createEndpointUri() to create a default value at org.apache.camel.impl.DefaultEndpoint.getEndpointUri(DefaultEndpoint.java:83) at org.apache.camel.management.DefaultManagementLifecycleStrategy.onEndpointAdd(DefaultManagementLifecycleStrategy.java:205) at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:386) We find that if you explicitly set the address then the problem goes away (see below) &lt;cxf:cxfEndpoint id=\'greeting\' wsdlURL=\'greeting.wsdl\' address=\'http://localhost:9000/GreeterContext/SOAPMessageService\' serviceClass=\'tutorial.hanbo.webservice.Greeting\' &gt; &lt;/cxf:cxfEndpoint&gt; On camel-cxf web page  the \'address\' attribute is not mentioned anywhere in the table of URI properties  so you might be lead to believe that it\'s not necessary.   ',0
'Concurrent consumers on seda endpoint can cause content routing to mismatch   \tWhen consuming concurrently from a seda endpoint  when the route contains a content router based on the header  it will randomly route through the wrong choice.In my specific case  I was consuming from an activemq queue  which would receive messages with a header that would then determine which route it would follow. It would randomly send messages down the wrong path. When I turned on tracing  it would behave itself. It also behaved itself when I limited it to only a single consumer. I was  however  able to duplicate it with the unit test below. Due to the concurrency issue  the test can occasionally pass  but run it a couple times and it should fail. It\'ll either receive 2 messages when it should have only gotten 1  or it will get no messages when it should have gotten 1.ConcurrencyTest.javaimport org.apache.camel.EndpointInject;import org.apache.camel.Produce;import org.apache.camel.ProducerTemplate;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.component.mock.MockEndpoint;import org.apache.camel.test.CamelTestSupport;public class ConcurrencyTest extends CamelTestSupport { @EndpointInject(uri = \'mock:result\') protected MockEndpoint resultEndpoint; @EndpointInject(uri = \'mock:otherResult\') protected MockEndpoint otherResultEndpoint; @Produce(uri = \'seda:start\') protected ProducerTemplate template; public void testSendMatchingMessage() throws Exception { String expectedBody = \'&lt;matched/&gt;\'; resultEndpoint.expectedBodiesReceived(expectedBody); otherResultEndpoint.expectedBodiesReceived(expectedBody); template.sendBodyAndHeader(expectedBody  \'myDirection\'  \'send\'); template.sendBodyAndHeader(expectedBody  \'myDirection\'  \'received\'); resultEndpoint.assertIsSatisfied(); } @Override protected RouteBuilder createRouteBuilder() { return new RouteBuilder() { public void configure() { from(\'seda:start?concurrentConsumers=10\')// from(\'seda:start?concurrentConsumers=1\') .choice() .when(header(\'myDirection\').isEqualTo(\'send\')).to(\'mock:result\') .when(header(\'myDirection\').isEqualTo(\'received\')).to(\'mock:otherResult\'); } }; }}   ',1
'request/reply over JMS using temporary queues - if connection lost the temporary queue is not re-created which causes the producer to not work anymore   \tTo recreate the problem you need a route with a jms inout endpoint that is configured to use a temporary destination for replies. Till now I was only able to show the problem with tibco ems. Start broker Start the jms consumer that replies to the request Start the route Send a request/reoply exchange (should work) Stop the broker Wait long enough for the client to do a full reconnect (I used connectionFactory.setReconnAttemptCount(1) on the client so I do not have to wait so long) Start the broker -&gt; The jms component will do a full new connect Send a request/reoply exchange -&gt; Now a InvalidDestination Exception happensThe client route will not work anymore until a restart as it creates the temporary destination only once and it is invalid now.   ',0
'The CxfConsumer\'s getContinuation method might throw NPE   \tHelloWhen trying the latest CAMEL 2.5.0 SNAPSHOT  I got a NPE:java.lang.NullPointerException at org.apache.camel.component.cxf.CxfConsumer$1.getContinuation(CxfConsumer.java:129) at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:65) at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)...   ',0
'Threads - Should allow using 0 in core pool size   \tSee nabblehttp://camel.465427.n5.nabble.com/ThreadPoolExecutor-configuration-tp3207845p3207845.html   ',0
'GenericFileProducer.writeFile method creates instance of un-used InputStream   \torg.apache.camel.component.file.GenericFileProducerMethod: writeFileThis method has the following statement:InputStream payload = exchange.getIn().getBody(InputStream.class);This internally results in calling a TypeConverter to convert an object into InputStream type. However this InputStream has not been used and is eventually closed in the finally block. In the same method calling method storeFile on FileOperations (boolean success = operations.storeFile(fileName  exchange) also opens an InputStream on the same message.   ',0
'JMX MBeans not registered for initiators   \tregistering the Initiator before it has been started will not register the sessions mbeans with JMX. So the acceptors are ther  but no initiators.   ',0
'XmppEndPoint - setting login to false when creating an account results in no action   \tXmppEndPoint myXmppEndPoint = new XmppEndPoint();(...)myXmppEndPoint.setCreateAccount(true);myXmppEndPoint .setLogin(false);(...)This will result in \'no action\' in xmpp server  if setLogin true the account is created and the user stays online.I believe it\'s because of the logic used in createConnection() method of XmppEndPoint that could be changed to:if (!connection.isAuthenticated()) { if (user != null) { if (LOG.isDebugEnabled()) { LOG.debug(\'Logging in to XMPP as user: \' + user + \' on connection: \' + getConnectionMessage(connection)); } if (password == null) { LOG.warn(\'No password configured for user: \' + user + \' on connection: \' + getConnectionMessage(connection)); } if (createAccount) { AccountManager accountManager = new AccountManager(connection); accountManager.createAccount(user  password); } if(login){ if (resource != null) { connection.login(user  password  resource); } else { connection.login(user  password); } } } else { if (LOG.isDebugEnabled()) { LOG.debug(\'Logging in anonymously to XMPP on connection: \' + getConnectionMessage(connection)); } connection.loginAnonymously(); }   ',0
'Multicast with pipeline may cause wrong aggregated exchange   \tThis is a problem when using 2 set of nested pipeline and doing a transform as the first processor in that pipeline from(\'direct:start\').multicast(new SumAggregateBean()) .pipeline().transform(bean(IncreaseOne.class)).bean(new IncreaseTwo()).to(\'log:foo\').end() .pipeline().transform(bean(IncreaseOne.class)).bean(new IncreaseTwo()).to(\'log:bar\').end() .end() .to(\'mock:result\');   ',0
'cxfEndpoint of camel-cxf doesn\'t support  the shcemaLocation element   \tHere is the mail thread&#91;1&#93; which discusses about it.&#91;1&#93;http://camel.465427.n5.nabble.com/camel-cxf-exception-when-parsing-cxf-schemaLocation-element-td3253254.html#a3253254   ',0
'NPE occurs without @Entity annotation   \tHere is code from the org.apache.camel.component.jpa.JpaConsumer classprotected String getEntityName(Class&lt;?&gt; clazz) { Entity entity = clazz.getAnnotation(Entity.class); // Check if the property name has been defined for Entity annotation if (!entity.name().equals(\'\')) { // line 307 return entity.name(); } else { return null; }}When trying to consume entities from jpa endpoint exception occursjava.lang.NullPointerException at org.apache.camel.component.jpa.JpaConsumer.getEntityName(JpaConsumer.java:307) at org.apache.camel.component.jpa.JpaConsumer.createQueryFactory(JpaConsumer.java:287) at org.apache.camel.component.jpa.JpaConsumer.getQueryFactory(JpaConsumer.java:196) at org.apache.camel.component.jpa.JpaConsumer$1.doInJpa(JpaConsumer.java:83) at org.apache.camel.component.jpa.JpaTemplateTransactionStrategy$1$1.doInJpa(JpaTemplateTransactionStrategy.java:82) at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:183) at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:146) at org.apache.camel.component.jpa.JpaTemplateTransactionStrategy$1.doInTransaction(JpaTemplateTransactionStrategy.java:80) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130) at org.apache.camel.component.jpa.JpaTemplateTransactionStrategy.execute(JpaTemplateTransactionStrategy.java:78) at org.apache.camel.component.jpa.JpaConsumer.poll(JpaConsumer.java:79) at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)This is because there is no @Entity annotation and persistence is configured by means of orm.xml.To fix the problem change line 307 toif (entity != null &amp;&amp; !entity.name().equals(\'\'))   ',0
'CxfRsInvoker produces NullpointerException when no ContinuationProvider is set in the InMessage   \tIn my usage of CXF-RS with Camel through the camel-cxf component I ran into a NullpointerException  the specific case is described in some detail on StackOverflow: http://stackoverflow.com/questions/4198461/why-do-i-get-a-nullpointerexception-when-invoking-the-cxf-rs-endpoint-of-a-camel Specifically I run into a NullpointerException:Caused by: java.lang.NullPointerException at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.getContinuation(CxfRsInvoker.java:63) at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.performInvocation(CxfRsInvoker.java:52) at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:89) ... 33 moreI was assuming I was misconfiguring something but didn\'t find any alternative way so I started digging in the camel-cxf source code.I found that such a \'getContinuation\' method also exists for the org.apache.camel.component.cxf.CxfConsumer as well as for the CxfRsInvoker (where it was failing for me). However in the case of the CxfConsumer there is a guard on the ContinuationProvider so that if it is null  then null is returned:return provider == null ? null : provider.getContinuation();CxfRsInvoker does not have this guard  but it does have code to deal with a \'null\' Continuation at the calling site (line 52  in performInvocation). Therefore I assumed this was a bug and patched the guard into the CxfRsInvoker as well.My program now seems to work correctly. I assume this is a bug.For completeness sake  this is what getContinuation now looks like for me: private Continuation getContinuation(Exchange cxfExchange) { ContinuationProvider provider = (ContinuationProvider)cxfExchange.getInMessage().get(ContinuationProvider.class.getName()); return provider == null ? null : provider.getContinuation(); }   ',0
'camel-irc component silently fails on nick collision   \tWhen the camel-irc component connects to an irc server and there\'s a nick collision it silently fails. Also note there is no camel-irc component in Jira.   ',0
'Hard coded locale in Bindy DatePatternFormat   \tAs reported by a user from the community (http://camel.465427.n5.nabble.com/Bindy-Dateformat-Parsing-exception-td3276981.html)  the locale of SimpeDateFormat in bindy\'s DatePatternFormat class is hard coded to FRANCE.   ',0
'spring-integration - Should have better configuration validation   \tSee nabblehttp://camel.465427.n5.nabble.com/Integration-camel-and-spring-integration-tp3284105p3284105.html   ',0
'PackageHelper - issue with version numbers which contains non decimal   \tSee more herehttp://fusesource.com/forums/thread.jspa?threadID=2447&amp;tstart=0   ',0
'InterceptSendToEndpoint should check for if stop DSL has been used   \tSee nabblehttp://camel.465427.n5.nabble.com/InterceptSendToEndpoint-Http-Component-tp3296620p3296620.html   ',0
'CamelContext is started twice when using camel-blueprint   \tFor example if you run the testRouteWithAllComponents test in CamelBlueprintTest in tests/camel-itest-osgi you will see a lot of logging. But notice[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext: 67-camel-2) is starting[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext: 67-camel-2) started in 0.147 secondsThen blueprint does something[Blueprint Extender: 3] INFO org.apache.camel.blueprint.BlueprintCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext: 4-camel-5) is starting[Blueprint Extender: 3] INFO org.apache.camel.blueprint.BlueprintCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext: 4-camel-5) started in 0.071 secondsAnd likewise both CamelContext\'s is shutdown when the test completes. There are logging events for that as well.Pay attention to the name of the 1st CamelContext 67-camel-2. This is the correct name as its based on the bundle id  our end user Camel application is given. This ensures that the CamelContext from his application has a name which is unique and refers to the bundle id as well.Now if you look at the 2nd CamelContext being started its given another name 4-camel-5. That id is most likely using a shared bundle id with a low number. For example camel-blueprint or camel-core bundle  or something like that. In essence camel-blueprint should only create one CamelContext and it should use the 67-camel-2 as the name of the CamelContext (eg. include the bundle id of the end user application).   ',0
'InterceptSendToEndpoint has issues with interception http endpoints which has multiple parameters   \tSee nabblehttp://camel.465427.n5.nabble.com/interceptSendToEndpoint-with-dynamic-endpoint-tp3301978p3301978.htmlThe issue is when any endpoints have parameters which may be re-ordered when the endpoint is normalized.   ',0
'Bindy should support clipping fields if they exceed maximum length allowed when using fixed length   \tAdding a new option to bindy annotation /** * Indicates to clip data in the field if it exceeds the allowed length when using fixed length. */ boolean clip() default false;Then if enabled it will clip the data so it can fit the length.Also now Camel throws an exception if the data is too long and you have clip set as false.   ',0
'BindyCsvDataFormat broken for pipe delimited files   \tAttempting to unmarshall a pipe delimited CSV file into a POJO using Bindy causese the first and last character the the line processed to be dropped. It appears that the BindyCsvDataFormat class removes the first and the last character from the line read from the CSV if the seperator is &gt; 1 characters in length (see below or line 162-165 in BindyCsvDataFormat). For pipe delimited files  you need to specify | as the seperator  as | is not evaluated correctly as a java regex by the split fuction. This leads to the first and last character for the line being parsed being dropped. From the comments it appears a \'fix\' was added to remove the first and last character of the line when the seperator contains quotes or double quotes. Making this determination using the length of the seperator  rather than evaluating using a regex seems to be a poor solution that breaks other CSV delimiters.See Attached for an code example.   ',0
'ConcurrentModificationException in DefaultCamelContext.removeRouteDefinitions()   \tI get the following exception in DefaultCamelContext.removeRouteDefinitions(). We are removing route definitions from multiple threads. I see synchronization in various other methods  but not this one. Caused by: java.util.ConcurrentModificationException at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372) at java.util.AbstractList$Itr.next(AbstractList.java:343) at java.util.AbstractCollection.removeAll(AbstractCollection.java:336) at org.apache.camel.impl.DefaultCamelContext.removeRouteDefinitions(DefaultCamelContext.java:588)   ',0
'scala - xpath not working together with choice/when   \tWhen using the Scala DSL  xpath expressions inside when() do not work as expected. As an example: \'direct:a\' ==&gt; { choice { when (xpath(\'//hello\')) to (\'mock:english\') when (xpath(\'//hallo\')) { to (\'mock:dutch\') to (\'mock:german\') } otherwise to (\'mock:french\') } }// Send messages\'direct:a\' ! (\'&lt;hello/&gt;\'  \'&lt;hallo/&gt;\'  \'&lt;hellos/&gt;\')Here we should receive 1 message in each of the mocks. For whatever reason  all 3 messages go to mock:english. Similar routes work as expected with the Java DSL.   ',0
'Aggregation fails to call onComplete for exchanges if the aggregation is after a bean or process.   \tWhen creating a route that contains an aggregation  if that aggregation is preceded by a bean or process  it will fail to call AggregateOnCompletion.onComplete(). I\'ve attached a unit test that can show you the behavior. Trace level loggging will need to be enabled to see the difference. With the call to the bean  it won\'t show the following log entry:TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Aggregated exchange onComplete: Exchange[Message: ab]If you remove the bean call  it\'ll start calling onComplete() again.What I\'ve noticed is that if this call is not made  it ends up in a memory leak since the inProgressCompleteExchanges HashSet in AggregateProcessor never has any exchange ID\'s removed.   ',0
'Jt400DataQueueConsumer incorrectly implements timeout semantics (jt400 component)   \tJt400DataQueueConsumer implementation of receive(long) passes the timeout argument directly to com.ibm.as400.access.DataQueue.read(int)  not performing unit conversion. However  Jt400DataQueueConsumer.receive(long) accepts milliseconds  whereas DataQueue.read(int) accepts seconds as the time unit.Also  invoking Jt400DataQueueConsumer.receive() results in a call to DataQueue.read()  which is not a blocking call; on the contrary  it will not wait for entries.Code snippet below.Jt400DataQueueConsumer.java DataQueue queue = endpoint.getDataQueue(); try { DataQueueEntry entry; if (timeout &gt;= 0) { entry = queue.read((int)timeout); } else { entry = queue.read(); }Note that the submitted patch floors the timeout value when converting to seconds  but different rounding might be desired  which should be specified in the class documentation.   ',0
'Aggregator - The completionFromBatchConsumer option dont aggregate the last incoming exchange   \tSee nabblehttp://camel.465427.n5.nabble.com/Last-Aggregated-Exchange-lost-Aggregator-with-a-Batch-Consumer-and-persistent-AggregationRepository-tp3346214p3346214.html   ',0
'Detect uncaught exceptions in UoWProcessor to ensure UoW is done even for those uncaught exceptions   \tThe Camel routing engines will handle this in 99.9\% of the cases  but when you shutdown a Spring AC then Spring may stop beans in whatever order and this can cause those beans to fail operating during a graceful shutdown. And in worst case exceptions is thrown in situations where they are not normally done.To cater for that and other situations the UoWProcessor should detect this and act accordingly.This ensure the in flight registry will be tracked and we are not stuck with a missing inflight message  causing Camel to wait for the 300 sec timeout to shutdown.For example just try hitting ctrl + c in that camel-example-management and you can see such an example.   ',0
'Concurrent writes to the same file has race condition   \tSee nabblehttp://camel.465427.n5.nabble.com/Using-Splitter-and-file-producer-with-option-fileExist-Append-failed-tp3353618p3353618.htmlWe need to synchronize on the file name to avoid concurrent writes to the same file.   ',0
'FTP rename fails   \t(This is related to the user group discussion http://camel.465427.n5.nabble.com/Problem-renaming-existing-file-in-FTP-td3307670.html)When using a tmpPrefix when uploading  the rename from the tmp-file to the destination file fails  if the destination file is already present  even though the option fileExist=Override is used.We have the problem on just a few destination servers which all seems to be windows machines.I have fetched the 2.4 branch of camel-ftp to find out why it does not work  since the unit test you refer to in your previous post do excercise the problem.It appears that the cause of the problem is  that the FtpOperations.existsFile fails to return true  which then causes the code not to enter the part where it deletes the exisiting file.The reason for the FtpOperations.existsFile to return false  is  that the list of existing files has the directoryname prepended  e.g. I\'m trying to upload Test.REN to folder test/rename  and in the code \'if (existing.equals(onlyName))\' existing=test/rename/Test.REN and onlyName=Test.REN - which returns false - but causes the later rename to fail as the target folder did contain the Test.REN. My guess is that it is server dependent whether the returned list of names in the directory include the directory name or not?To fix this I have added the following line of code before the if-statementexisting = FileUtil.stripPath(FileUtil.normalizePath(existing));So it will strip the path part of the file name before comparing it to onlyName.   ',0
'camel-josql doesnot export org.apache.camel.language.sql.*   \t   ',0
'Inconsistent filename value when move attribute is used with File component   \tUnless I miss a point  when I use the following endpoint  the file:name value is incorrect and is equal to file:absolute.path&lt;endpoint id=\'fileEndpoint\' uri=\'file:${queue.input.folder}?recursive=true&amp;include=.*/.dat&amp;move=${queue.done.folder}/$simple{file:name}&amp;moveFailed=${queue.failed.folder}/$simple{file:name}\' /&gt;${queue.input.folder}  ${queue.done.folder} and ${queue.failed.folder} are absolute paths resolved by Spring.In fact  Camel tries to move the file to ${queue.done.folder}/${queue.input.folder}/$simple{file:name}I\'ve also tried using $simple{header.CamelFileName} instead of $simple{file:name} and it gives the same result.For now  I\'ve found a workaround using a processor which put the CamelFileName header value into a \'destFile\' property &lt;endpoint id=\'fileEndpoint\' uri=\'file:${queue.input.folder}?recursive=true&amp;include=.*/.dat&amp;move=${queue.done.folder}/$simple{property.destFile}&amp;moveFailed=${queue.failed.folder}/$simple{property.destFile}\' /&gt;   ',0
'Mistake in camel-eventAdmin feature   \tThe Camel Karaf feature camel-eventAdmin is not correct.The features is described as follow:&lt;feature name=\'camel-eventAdmin\' version=\'2.6.0\'&gt; &lt;feature version=\'2.6.0\'&gt;camel-core&lt;/feature&gt; &lt;bundle&gt;mvn:org.apache.camel/camel-eventAdmin/2.6.0&lt;/bundle&gt;&lt;/feature&gt;but the camel-eventAdmin artifact correct name is camel-eventadmin:http://repo2.maven.org/maven2/org/apache/camel/camel-eventadmin/2.6.0/camel-eventadmin-2.6.0.jarThis typo mistake provides:Downloading: http://repo1.maven.org/maven2/org/apache/camel/camel-eventAdmin/2.6.0/camel-eventAdmin-2.6.0.jar&#91;INFO&#93; Unable to find resource \'org.apache.camel:camel-eventAdmin:jar:2.6.0\' in repository central (http://repo1.maven.org/maven2)&#91;INFO&#93; ------------------------------------------------------------------------&#91;ERROR&#93; BUILD FAILURE&#91;INFO&#93; ------------------------------------------------------------------------&#91;INFO&#93; Can\'t resolve bundle org.apache.camel:camel-eventAdmin:jar:2.6.0&#91;INFO&#93; ------------------------------------------------------------------------I\'m gonna submit a patch to fix that.   ',0
'Make Content-Type HTTP Header Optional   \tAs per section 7.2.1 of RFC 2616  any HTTP/1.1 message containing an entity-body SHOULD (not MUST) include a Content- Type header field defining the media type of that body.The populateExchangeFromRestletRequest method of the DefaultRestletBinding class  unlike others in the same class  needs to be changed:if (request.getEntity().getMediaType().equals(MediaType.APPLICATION_WWW_FORM)) { ...} else { inMessage.setBody(request.getEntity().getStream());}   ',0
'Endpoints may be shutdown twice as they are tracked in two lists in CamelContext   \tEndpoint is a Service which means they are listed in both a endpoint and service list. They should only be listed in the endpoint list.This avoids issues with endpoints may be shutdown twice when Camel shutdown.See nabblehttp://camel.465427.n5.nabble.com/QuartzComponent-do-not-delete-quartz-worker-threads-when-shutdown-Camel-tp3393728p3393728.html   ',0
'interceptFrom and from(Endpoint) don\'t work together   \tWhen using interceptFrom(String) together with from(Endpoint)  the below Exception occurs during the routes building process. Looking at RoutesDefinition.java:217 reveals  that the FromDefintion just created has no URI. That causes the comparison to all the interceptFroms\' URIs to fail. As far as I can tell  the way to fix this would be to add setUri(myEndpoint.getEndpointUri()) in the constructor FromDefinition(Endpoint endpoint).Below the stack trace  there is a unit test that demonstrates the issue. Until it if fixed  it can be easily circumvented by adding the commented-out line  and then change to from(\'myEndpoint\').org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: null due to: null at org.apache.camel.util.EndpointHelper.matchEndpoint(EndpointHelper.java:109) at org.apache.camel.model.RoutesDefinition.route(RoutesDefinition.java:217) at org.apache.camel.model.RoutesDefinition.from(RoutesDefinition.java:167) at org.apache.camel.builder.RouteBuilder.from(RouteBuilder.java:101) at dk.mobilethink.adc2.endpoint.UnsetUriTest$1.configure(UnsetUriTest.java:18) at org.apache.camel.builder.RouteBuilder.checkInitialized(RouteBuilder.java:318) at org.apache.camel.builder.RouteBuilder.configureRoutes(RouteBuilder.java:273) at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:259) at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:612) at org.apache.camel.test.CamelTestSupport.setUp(CamelTestSupport.java:111) at junit.framework.TestCase.runBare(TestCase.java:132) at org.apache.camel.test.TestSupport.runBare(TestSupport.java:65) at junit.framework.TestResult$1.protect(TestResult.java:110) at junit.framework.TestResult.runProtected(TestResult.java:128) at junit.framework.TestResult.run(TestResult.java:113) at junit.framework.TestCase.run(TestCase.java:124) at junit.framework.TestSuite.runTest(TestSuite.java:232) at junit.framework.TestSuite.run(TestSuite.java:227) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)Caused by: java.lang.NullPointerException at org.apache.camel.util.UnsafeUriCharactersEncoder.encode(UnsafeUriCharactersEncoder.java:56) at org.apache.camel.util.URISupport.normalizeUri(URISupport.java:162) at org.apache.camel.util.EndpointHelper.matchEndpoint(EndpointHelper.java:107) ... 24 morepackage dk.mobilethink.adc2.endpoint;import org.apache.camel.Endpoint;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.test.CamelTestSupport;public class UnsetUriTest extends CamelTestSupport { @Override protected RouteBuilder createRouteBuilder() throws Exception { return new RouteBuilder() { public void configure() throws Exception { interceptFrom(\'URI1\').to(\'irrelevantURI\'); Endpoint myEndpoint = getContext().getComponent(\'direct\').createEndpoint(\'ignoredURI\'); // getContext().addEndpoint(\'myEndpoint\'  myEndpoint); from(myEndpoint) .inOnly(\'log:foo\'); } }; } public void testNothing() { }}   ',0
'OnException - The order they are defined in the RouteBuilder / XML should be preserved when you have multiple of the same exception type   \tWhen you have 2+ of onException(MyExcpetion.class) then the order may get reversed  in the logic which prepares the routes. The logic should cater for clashes and ensure orders is preserved.This currently only occurs for XML based routes. The Java DSL works.   ',0
'Sending to http endpoint may double encoding parameters   \tSee nabbleThe workaround is to use either HTTP_URI or HTTP_QUERY as a header with the parameters. Then they are not double encoded.Also the HTTP_URI should be placeholder resolved  so we can use port or the likes to inject the port number dynamic.   ',0
'JAXB marshaling broken in 2.6.0   \tThis used to work in 2.5.0 but in 2.6.0 it throws:Caused by: javax.xml.bind.JAXBException: class com.ask.ugc.camel.Jask3061$Foo nor any of its super class is known to this context. at com.sun.xml.bind.v2.runtime.JAXBContextImpl.getBeanInfo(JAXBContextImpl.java:594) at com.sun.xml.bind.v2.runtime.XMLSerializer.childAsRoot(XMLSerializer.java:482) at com.sun.xml.bind.v2.runtime.MarshallerImpl.write(MarshallerImpl.java:315) at com.sun.xml.bind.v2.runtime.MarshallerImpl.marshal(MarshallerImpl.java:244) at javax.xml.bind.helpers.AbstractMarshallerImpl.marshal(AbstractMarshallerImpl.java:75) at org.apache.camel.converter.jaxb.JaxbDataFormat.marshal(JaxbDataFormat.java:117) at org.apache.camel.converter.jaxb.JaxbDataFormat.marshal(JaxbDataFormat.java:96)...@ContextConfiguration( locations = \'foo.bar.JaxbBug$ContextConfig\'  loader = JavaConfigContextLoader.class)public class JaxbBug extends AbstractTestNGSpringContextTests { @EndpointInject(uri = \'mock:end\') protected MockEndpoint mockEndpoint; @Produce(uri = \'direct:test\') protected ProducerTemplate producer; @Test @DirtiesContext public void testJaxbMarshalling() throws InterruptedException { mockEndpoint.expectedMessageCount(1); producer.sendBody(new Foo()); mockEndpoint.assertIsSatisfied(); } @Configuration public static class ContextConfig extends SingleRouteCamelConfiguration { @Bean public RouteBuilder route() { return new RouteBuilder() { @Override public void configure() throws Exception { JaxbDataFormat jaxb = new JaxbDataFormat(JAXBContext.newInstance(Foo.class)); from(\'direct:test\').marshal(jaxb).to(\'mock:end\'); } }; } } @XmlRootElement public static class Foo { String bar; public String getBar() { return bar; } public void setBar(String bar) { this.bar = bar; } }}   ',1
'sftp producer runs in exception fileName does not contain any path information   \tWhen the fileName uri option does not contain any folder information  ie: \'fileName=filename.txt\' the producer runs in exceptionThe exception is thrown when the producer calls ls method of jsch ChannelSftp passing an empty string as directory parameter in org.apache.camel.component.file.remote.SftpOperations.existsFile line 704sample URI: sftp://user@hostname:22?disconnect=true&amp;eagerDeleteTargetFile=false\%3Bstepwise\%3Dfalse&amp;fileName=SYSTEM01&amp;password=******&amp;soTimeout=30000&amp;tempFileName=\%24\%7Bfile\%3Aname.noext\%7D.tmpStack trace:[2011-03-03 14:40:40 827][RecipientList (thread #4)][ERROR][org.apache.camel.processor.DefaultErrorHandler][] Failed delivery for exchangeId: ID-******-33331-1299163043684-0-10. Exhausted after delivery attempt: 1 caught: org.apache.camel.component.file.GenericFileOperationFailedExcept on: org.apache.camel.component.file.GenericFileOperationFailedException: at org.apache.camel.component.file.remote.SftpOperations.existsFile(SftpOperations.java:727) at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:130) at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:50) at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103) at org.apache.camel.processor.MulticastProcessor.doProcessParallel(MulticastProcessor.java:716) at org.apache.camel.processor.MulticastProcessor.access$100(MulticastProcessor.java:78) at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:282) at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:274) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619) Caused by: 4: at com.jcraft.jsch.ChannelSftp.ls(ChannelSftp.java:1353) at org.apache.camel.component.file.remote.SftpOperations.existsFile(SftpOperations.java:704) ... 20 more Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: 0 at java.lang.String.charAt(String.java:686) at com.jcraft.jsch.ChannelSftp.remoteAbsolutePath(ChannelSftp.java:2367) at com.jcraft.jsch.ChannelSftp.ls(ChannelSftp.java:1185) ... 21 more   ',0
'Mail component issue with starttls option   \tThe problem occurs when I read from a pop3 endpoint and send to an smtp endpoint in the same camel context with the mail.pop3.starttls.enable=true and mail.smtp.starttls.enable=true options.Required Java options for starttls are set:-Djavax.net.ssl.trustStore=D:/test/xxx.jks-Djavax.net.ssl.trustStorePassword=yyyWhen I only configure one of either route  everything works fine. When I configure both  I get the following exception:AUTH LOGINC: STAT530 Must issue STARTTLS command firstSTARTTLSS: +OK 0 0C: NOOP220 begin TLS negotiationS: +OKC: RSETS: +OKC: QUITAUTH LOGINS: +OK POP3 server closing connection503 wrong state for AUTH command2011-03-03 10:08:36 797 &#91;foo&#93; ERROR DefaultErrorHandler - Failed delivery for exchangeId: ID-E6500-ahi-61446-1299143304838-0-2. Exhausted after delivery attempt: 1 caught: org.springframework.mail.MailAuthenticationException: Authentication failed; nested exception is javax.mail.AuthenticationFailedException: 503 wrong state for AUTH commandorg.springframework.mail.MailAuthenticationException: Authentication failed; nested exception is javax.mail.AuthenticationFailedException: 503 wrong state for AUTH command at org.springframework.mail.javamail.JavaMailSenderImpl.doSend(JavaMailSenderImpl.java:392)&#91;org.springframework.context.support-3.0.5.RELEASE.jar:3.0.5.RELEASE&#93; at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:340)&#91;org.springframework.context.support-3.0.5.RELEASE.jar:3.0.5.RELEASE&#93; at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:355)&#91;org.springframework.context.support-3.0.5.RELEASE.jar:3.0.5.RELEASE&#93; at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:344)&#91;org.springframework.context.support-3.0.5.RELEASE.jar:3.0.5.RELEASE&#93; at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:44)&#91;camel-mail-2.6.0.jar:2.6.0&#93; at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.Pipeline.process(Pipeline.java:125)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:102)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.RoutePolicyProcessor.process(RoutePolicyProcessor.java:75)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:104)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:49)&#91;camel-core-2.6.0.jar:2.6.0&#93; at java.util.TimerThread.mainLoop(Unknown Source)&#91;:1.5.0_22&#93; at java.util.TimerThread.run(Unknown Source)&#91;:1.5.0_22&#93;The problem seems to be in org.apache.camel.component.mail.MailConfiguration.createJavaMailSender() where it uses the same mail session for both connection; see Session.getDefaultInstance below if (session != null) { answer.setSession(session); } else { // use our authenticator that does no live user interaction but returns the already configured username and password Session session; try { session = Session.getDefaultInstance(answer.getJavaMailProperties()  getAuthenticator()); } catch (Throwable t) { // fallback as default instance may not be allowed on some systems session = Session.getInstance(answer.getJavaMailProperties()  getAuthenticator()); } answer.setSession(session); }This is because getDefaultInstance creates a Session object the first time it is called. Then it caches that Session and returns it for all subsequent calls. It also ignores the new and different properties for the second route.See also http://camel.465427.n5.nabble.com/Mail-component-with-starttls-td3409505.html   ',0
'HttpProducer drops authentification parameters.   \tHi  I run into the following problem with Camel 2.6.0:An HTML file contain an URI lists of files to be downloaded from a web server to the local file system.The HTML file is parsed via a Java Bean Splitter. The Java Bean Splitter produces a Set of URI strings.These files should be downloaded from a web server to the local file system. The files are protected with BASIC authentification.The extraction and the splitting of the download URIs works quite well with the Java Bean Splitter.The Java Bean Splitter produces URI like: http4://download.acme.com/file_1.txt?username=foo&amp;password=baaHere\'s the setup:&lt;route&gt; &lt;from uri=\'file:///tmp/files_to_retrieve/\' /&gt; &lt;method bean=\'prepareDownLoadUri\' method=\'parseIndexHtml\' /&gt; &lt;setHeader headerName=\'CamelHttpMethod\'&gt; &lt;constant&gt;GET&lt;/constant&gt; &lt;/setHeader&gt; &lt;setHeader headerName=\'CamelHttpUri\'&gt; &lt;simple&gt;${body}&lt;/simple&gt; &lt;/setHeader&gt; &lt;to uri=\'http4://download.acme.com/\' /&gt; &lt;to uri=\'bean:saveFileProcessor\' /&gt;&lt;/route&gt;&lt;bean id=\'prepareDownLoadUri\' class=\'com.acme.PrepareDownLoadUri\' /&gt;&lt;bean id=\'saveFileProcessor\' class=\'com.acme.SaveFileProcessor\' /&gt;The injection of the URIs from the Splitter into the HttpProducer  works quite well. I debugged into the HttpProducer and it seems  that the HttpProducer does not provide the unterlying http client (in this case Apache HttpClient 4) with the authentification settings from the URI.At first  the queryString is extracted from the Exchange-Header (if provided)HttpProducer.createMethod()  line 273String url = HttpHelper.createURL(exchange  getEndpoint());The url string contains the URI produces by the splitter including the authentification parameters: http4://download.acme.com/file_1.txt?username=foo&amp;password=baaThen the HttpProducer assembles a new URI for the requests. The new URI is assembled from parts of the string url (line 273) and other parameters from the Exchange Header: HttpProducer.createMethod()  lines 285-300 // is a query string provided in the endpoint URI or in a header (header overrules endpoint) String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY  String.class); if (queryString == null) { queryString = getEndpoint().getHttpUri().getRawQuery(); } StringBuilder builder = new StringBuilder(uri.getScheme()).append(\'://\').append(uri.getHost()); if (uri.getPort() != -1) { builder.append(\':\').append(uri.getPort()); } if (uri.getPath() != null) { builder.append(uri.getRawPath()); } if (queryString != null) { builder.append(\'?\'); builder.append(queryString); } HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString());The problem is  in the assembling of the new URI  the authentification parameters are dropped. One possible solution could be:  check for authentification parameters in the url (line 273) and extract them. build the credentials  AuthScheme and provide it to the underlying http client.thanks in advance ben   ',0
'HTTP Producer seems to send an empty body request on redelivery when the original request fails due to a connection timeout   \tCamel HTTP Producer is throwing an exception when it encounters a connection timeout. However instead of preserving the original message it is treating it processing the exception output. When connected to a redelivery meachanism  this results in an exception message being sent as input to the HTTP Consumer. The older versions of Camel behaved differently on read timeout. In Camel 1.x  in a read timeout  the Exception is thrown and the input message to the producer is passed through the pipeline. Now there is a difference: An exception is thrown and the output of the HTTP Producer is passed through the pipeline. Need to study why and what changed since Camel 1.x and ensure that the above does not happen.For more details  please check out the following nabble entryhttp://camel.465427.n5.nabble.com/Http-route-returning-with-200-but-also-getting-read-timed-out-td3741631.html#a3897410Cheers Ashwin...   ',1
'org.apache.camel.component.file.strategy.MarkerFileExclusiveReadLockStrategy is not thread-safe   \tMarkerFileExclusiveReadLockStrategy is not thread-safe. When I run a File endpoint with more than one thread the MarkerFileExclusiveReadLockStrategy only deletes the last file to start being processed. The MarkerFileExclusiveReadLockStrategy uses global variables: private File lock; private String lockFileName; and gives them values on the acquireExclusiveReadLock method. When another thread calls the releaseExclusiveReadLock method it uses the global variables to delete the locked file. That means that if another thread came and called the acquireExclusiveReadLock it would have changed the values on the global variables. If lock and lockFileName are not global variables the problem seems to disappear and I can a multithreaded File endpoint and not locked file is left undeleted.   ',0
'Web Console: NPE when browsing routes with no description   \tWhen some of the routes does not have a description NPE will be thrown  because of the code${i.getDescription.getText}To prevent it  just use${i.getDescriptionText}   ',0
'maven eclipse goal failure   \tThe error is:[ERROR] BUILD ERROR[INFO] ------------------------------------------------------------------------[INFO] Request to merge when \'filtering\' is not identical. Original=resource src/main/resources: output=target/classes  include=[]  exclude=[**/*.java]  test=false  filtering=false  merging with=resource src/main/resources: output=target/classes  include=[**/archetype-metadata.xml]  exclude=[**/*.java]  test=false  filtering=trueand it seems to be resolved in the upcoming maven-eclipse-plugin:2.9.0 (see MECLIPSE-576). An update to the new release of the plugin  once available  should resolve this.   ',0
'BeanInfo not reset when new bean looked up   \tIn camel-bean  when a bean is looked-up and it is not the same bean as the previous one beanInfo has to be reset.This is done in getBean() method of org.apache.camel.component.bean.RegistryBean but the test is placed after setting bean=value so beanInfo is never reset :if (value != bean) {  bean = value;  processor = null;  if (!ObjectHelper.equal(ObjectHelper.type(bean)  ObjectHelper.type(value))) { beanInfo = null; }   ',0
'camel-jms default cache level should be CACHE_NONE when transaction is enabled   \tI lost a huge amount of time chasing the problem as the default value just screw the whole transaction (the session is created outside the transaction and cached  so usually not enlisted in the tx).   ',0
'SmppProducer sends incorrect data_coding parameter   \tThe dataCoding parameter on the SMPP uri allows for a value of 0 4  or 8. Our aggregator expects the data_coding parameter on the SMPP request from the SmppProducer to be 0=SMSC Default Alphabet. However  when 0  4  or 8 is specified for the dataCoding parameter  the actual value sent on the smpp request is 1  5  or 9. It appears the MessageClass.Class1 on the GeneralDataCoding object in SmppProducer is masking an additional 1 to the byte value.It seems the dataCoding parameter should allow you to specify the actual value that is needed as defined by the SMPP Protocol specification.   ',0
'OSGi - No possibility to enable ehcache clustering as: ehcache.xml is ignored and there is no possibility to set cacheManagerFactory described camel-cache docs   \tThis bug is caused by more than one problem as:1. camel-cache bundle provides ehcache.xml config which is ignored so then default ehcache-failsafe.xml is taken by ehcache bundle.2. according to camel-cache docs there is a way to set cacheManagerFactory but it seems to be not implemented asa) default CacheManagerFactory instance is created when when CacheComponent is instantiated.b) setter method: public void setCacheManagerFactory(CacheManagerFactory cacheManagerFactory) is used just nowhere.c) there is no suitable filed in class CacheConfigurationAll above problems cause camel-cache to be not able to work in java- clustered world as default failsafe config. is really failsafe- w/o clustering.   ',0
'camel-web - Cannot browse endpoints if messages was consumed from jms queue   \tYou get a NPE if you brows the endpoint.Caused by: java.lang.NullPointerException at org.apache.camel.web.resources.$scalate$ExchangeResource_index_ssp$$anonfun$$scalate$render$2.apply(ExchangeResource.index.ssp.scala:46) at org.apache.camel.web.resources.$scalate$ExchangeResource_index_ssp$$anonfun$$scalate$render$2.apply(ExchangeResource.index.ssp.scala:40) at scala.collection.Iterator$class.foreach(Iterator.scala:631)   ',0
'camel-xmpp - Should stop and clean session  so hot-deploy works   \tSee this stacktrace14:10:55 806 | ERROR | ExtenderThread-8 | ContextLoaderListener | 72 - org.springframework.osgi.extender - 1.2.0 | Application context refresh failed (OsgiBundleXmlApplicationContext(bundle=qbus-camel-osgi  config=osgibundle:/META-INF/spring/*.xml))org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[xmpp://articleRoute@localhost?password=******&amp;room=mechatron\%40conference.mw-pc]. Reason: java.lang.NullPointerException at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:362)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ProducerCache.acquireProducer(ProducerCache.java:93)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ProducerCache.startProducer(ProducerCache.java:124)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.processor.SendProcessor.doStart(SendProcessor.java:146)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.processor.interceptor.TraceInterceptor.doStart(TraceInterceptor.java:429)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:847)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.processor.DefaultChannel.doStart(DefaultChannel.java:146)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:86)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:893)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.RouteService.startChildService(RouteService.java:250)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.RouteService.warmUp(RouteService.java:146)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:1800)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1726)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1528)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1420)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1321)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:164)[75:org.apache.camel.camel-spring:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1299)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:203)[75:org.apache.camel.camel-spring:2.6.0.fuse-01-09] at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:101)[75:org.apache.camel.camel-spring:2.6.0.fuse-01-09] at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:238)[75:org.apache.camel.camel-spring:2.6.0.fuse-01-09] at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)[61:org.springframework.context:3.0.5.RELEASE] at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303)[61:org.springframework.context:3.0.5.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911)[61:org.springframework.context:3.0.5.RELEASE] at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)[71:org.springframework.osgi.core:1.2.0] at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)[71:org.springframework.osgi.core:1.2.0] at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)[71:org.springframework.osgi.core:1.2.0] at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)[71:org.springframework.osgi.core:1.2.0] at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136)[72:org.springframework.osgi.extender:1.2.0] at java.lang.Thread.run(Thread.java:619)[:1.6.0_14]Caused by: java.lang.NullPointerException at org.jivesoftware.smackx.muc.MultiUserChat$1.connectionCreated(MultiUserChat.java:84)[247:org.apache.servicemix.bundles.smack:3.1.0.2] at org.jivesoftware.smack.XMPPConnection.initConnection(XMPPConnection.java:957)[247:org.apache.servicemix.bundles.smack:3.1.0.2] at org.jivesoftware.smack.XMPPConnection.connectUsingConfiguration(XMPPConnection.java:904)[247:org.apache.servicemix.bundles.smack:3.1.0.2] at org.jivesoftware.smack.XMPPConnection.connect(XMPPConnection.java:1415)[247:org.apache.servicemix.bundles.smack:3.1.0.2] at org.apache.camel.component.xmpp.XmppEndpoint.createConnection(XmppEndpoint.java:140)[248:org.apache.camel.camel-xmpp:2.6.0.fuse-01-09] at org.apache.camel.component.xmpp.XmppGroupChatProducer.doStart(XmppGroupChatProducer.java:76)[248:org.apache.camel.camel-xmpp:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:360)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] ... 65 more   ',0
'Consumer URI parameters ignored after Route Restart   \tThe URI parameters for a consumer appear to be ignored or disappear when the route where this consumer defined gets restarted.One example could be JPA query passed in the URI and is used to filter the results from the consumer.The attached test case shows this.Look at the Readme.txt  camel-context.xml  and JPARouteRestartTest class for more information.Also  took a stab at fixing the problem and provided a patch with a possible solution. I ran the unit tests after that change and all passed.   ',1
'CxfPayloadConverter may start failing to convert a CxfPayload to a Node   \tThere is an issue with CxfPayloadConverter that can lead to a failure in converting the CxfPayload into something which is actually convertible. This problem happens when you try to convert a CxfPayload instance that has an empty body list into a Node instance. This returns null and subsequently registers this type mapping key (CxfPayload-&gt;Node) in org.apache.camel.impl.converter.BaseTypeConverterRegistry\'s conversion-misses table. Because of this  a subsequent conversion using a CxfPayload instance with an non empty body list will permanently fail.I am attaching a modified CxfPayloadConversionTest that includes testCxfPayloadToNode that illustrates this problem. Currently  the last assertion of this test is failing when this issue is present.I think we can fix this problem by returning Void.TYPE instead of a null for this case.In this way  the conversion is regarded as a success and there will be no entry in the conversion-misses table.So  I am also attaching the modiefied CxfPayloadConverter class that can handle this test case.   ',0
'JdbcAggregationRepository count (*) is not working with MySQL 5.0   \tThe JdbcAggregationRepository makes a  \'SELECT COUNT (*) FROM....\' SQL request at line 131 in the source code. This appears to be incorrect with MySQL because theire is a space between COUNT and (. By replacing the request with  \'SELECT COUNT(*) FROM....\' (without the white space) the bug is corrected for MySQL (I think it should be tested with other database without the space). This request can be tested with Mysql Query Browser (the returned error is the same as the one encountered when we execute the JdbcAggregationRepository with Camel). The exception returned is the following:  ERROR DefaultErrorHandler - Failed delivery for exchangeId: ID:COE-WRKST2-1749-1304443569312-2:2:1:88:1. Exhausted after delivery attempt: 1 caught: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [SELECT COUNT (*) FROM aggregation_repo_0 WHERE id = ?]; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'*) FROM aggregation_repo_0 WHERE id = \'92\'\' at line 1org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [SELECT COUNT (*) FROM aggregation_repo_0 WHERE id = ?]; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'*) FROM aggregation_repo_0 WHERE id = \'92\'\' at line 1 at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:233) at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:602) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:636) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:665) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:673) at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:728) at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:744) at org.springframework.jdbc.core.JdbcTemplate.queryForInt(JdbcTemplate.java:775) at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$1.doInTransaction(JdbcAggregationRepository.java:131) at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$1.doInTransaction(JdbcAggregationRepository.java:114) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130) at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository.add(JdbcAggregationRepository.java:114) at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:251) at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:189) at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208) at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85) at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:84) at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560) at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498) at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947) at java.lang.Thread.run(Thread.java:662)Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'*) FROM aggregation_repo_0 WHERE id = \'92\'\' at line 1 at sun.reflect.GeneratedConstructorAccessor83.newInstance(Unknown Source) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:513) at com.mysql.jdbc.Util.handleNewInstance(Util.java:409) at com.mysql.jdbc.Util.getInstance(Util.java:384) at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1054) at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3566) at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3498) at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:1959) at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2113) at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2568) at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:2113) at com.mysql.jdbc.PreparedStatement.executeQuery(PreparedStatement.java:2275) at org.apache.commons.dbcp.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:96) at org.apache.commons.dbcp.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:96) at org.springframework.jdbc.core.JdbcTemplate$1.doInPreparedStatement(JdbcTemplate.java:643) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:586) ... 42 more   ',0
'AnnotationTypeConverterLoader fails for folders containing spaces   \tThis problem appears when jar dependencies with type converters have path containing space characters.In my case  the camel-mail-2.7.1.jar jar is located in my local maven repository.I get this error during my project startup: [...]Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:/D:/Documents and Settings/501915291/.m2/repository/org/apache/camel/camel-mail/2.7.1/camel-mail-2.7.1.jar!/META-INF/services/org/apache/camel/TypeConverter at java.net.URI$Parser.fail(URI.java:2809) at java.net.URI$Parser.checkChars(URI.java:2982) at java.net.URI$Parser.parse(URI.java:3019) at java.net.URI.&lt;init&gt;(URI.java:578) at java.net.URL.toURI(URL.java:918) at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.findPackages(AnnotationTypeConverterLoader.java:118) at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.findPackageNames(AnnotationTypeConverterLoader.java:108) at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:69) ... 63 moreFIX:findPackages method in AnnotationTypeConverterLoader shouldn\'t use URIs to store already visited jars.   ',0
'Route cannot be started within web-console  if autoStartup=\'false\' is set in camel.xml   \tWhen a route has autoStartup=\'false\' set in the camel.xml  it cannot be started anymore in the web- console.In the logfile  an entry is generated  similar to this:\'Cannot start route route2 as its configured with autoStartup=false | org.apache.camel.spring.SpringCamelContext | qtp7446303-52\'If a route does not have autoStartup=\'false\'  it can be stopped and started normally (as before with ActiveMQ 5.4.2 / Camel 2.4.0)Reproduce steps: Configure a route with \'&lt;route autoStartup=\'false\'&gt;\' Start the ActiveMQ Service Navigate to \'http://server.domain.tld:8161/camel/routes try to start the route with the button \'Start\' check the logfile \'activemq.log\'   ',1
'Dumping route to XML created by Java DSL using an expression may not output the actual used expression   \tSee this unit testManagedCamelContextDumpRoutesAsXmlTestThe route in Java DSL from(\'seda:bar\').routeId(\'myOtherRoute\') .filter().header(\'bar\') .to(\'mock:bar\') .end();And the output in XML &lt;route group=\'org.apache.camel.management.ManagedCamelContextDumpRoutesAsXmlTest$1\' id=\'myOtherRoute\'&gt; &lt;from uri=\'seda:bar\'/&gt; &lt;filter id=\'filter1\'&gt; &lt;expressionDefinition/&gt; &lt;to uri=\'mock:bar\' id=\'to2\'/&gt; &lt;/filter&gt; &lt;/route&gt;The same example created by Spring XML  outputs the XML correct   ',0
'Spring-WS producer doesn\'t propagate headers   \tThe Spring-WS producer only sets the body of the exchange  headers aren\'t propagated.See Nabble: http://camel.465427.n5.nabble.com/spring-ws-component-not-propagating-in-headers-to-out-message-td4393731.html   ',0
'Camel FTP component fails to process multiple files at once from a specified folder   \tCamel FTP component fails to process multiple files at once from a specified folder (let\'s assume the folder is /in).When the consumer connects to a ftp account and finds a list of  let\'s say  3 files  it will try to retrieve them in parallel but this is not handled properly.As you can see from the below FTP server log  this is what Camel FTP does: it changes the current directory to /in retrieves the file it changes the current directory to / the second (probably) thread changes the directory to /in retreives the second file the first (probably) thread sends a delete command but it sends it as if it were in the root folder but it is actually in the /in folder the FTP gives an error that the file doesn\'t exist somehow the FTP Component blocks itself on the first file...See my comments in the following log starting with *****(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 257 \'/\' is current directory.(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; CWD in(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 250 CWD successful. \'/in\' is current directory.(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; PASV(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 227 Entering Passive Mode (192 168 0 25 228 206)(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; RETR WS_1001_1.xml(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 150 Connection accepted(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; SSL connection for data connection established(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 226 Transfer OK(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; CWD /(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 250 CWD successful. \'/\' is current directory.(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; PWD(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 257 \'/\' is current directory.(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; CWD in(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 250 CWD successful. \'/in\' is current directory.(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; PASV(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 227 Entering Passive Mode (192 168 0 25 228 207)(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; RETR WS_1001_2.xml(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 150 Connection accepted(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; DELE in/WS_1001_1.xml ***** The location is already /in  should be DELE WS_1001_1.xml(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 550 File not found(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; PASV(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 227 Entering Passive Mode (192 168 0 25 228 208)(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; NLST in(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 550 Directory not found(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; PWD(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 257 \'/in\' is current directory.(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; CWD in ***** Current directory is already /in(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 550 CWD failed. \'/in/in\': directory not found.For the whole FTP server logs go here: http://pastie.org/private/kknnkxpbyzqmai7gsm8z5gFor the Servicemix/Camel(Trace) log: http://pastie.org/private/eulookxiepan3nkjyu41aA workaround that seems to work is to use the maxMessagesPerPoll=1 option.   ',0
'ConcurrentModificationException at DefaultCamelContext.getRouteDefinition()   \tSimilar to CAMEL-3493 there is also a race in getRouteDefinition()java.util.ConcurrentModificationException at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372)[:1.6.0_21] at java.util.AbstractList$Itr.next(AbstractList.java:343)[:1.6.0_21] at org.apache.camel.impl.DefaultCamelContext.getRouteDefinition(DefaultCamelContext.java:1098)[cih-core-1.0.jar:1.0] at com.tieto.cih.core.main.GatewayRouteSetup.startGatewayRoutes(GatewayRouteSetup.java:86)[cih-core-1.0.jar:1.0] at com.tieto.cih.core.main.GatewayRouteSetup.process(GatewayRouteSetup.java:73)[cih-core-1.0.jar:1.0]As route count could be quite large  it would be nice to have them stored in synchronized map or something like that instead of list.   ',0
'Issue using errorBuilderRef with the xml dsl   \tWhile fixing issues around the errorHandler I noticed that &lt;onException&gt; definitions defined in the camel context are ignored if a route specifies its own errorHandlerRef. The reason is that we set the onException definition on the default error handler. I have a fix for that  but I discovered a different issue (I think) for which I would like to discuss the solution.When we have an onException definition that looks kinda like this:&lt;onException&gt; &lt;exception&gt; java.lang.IllegalArgumentException&lt;/exception&gt; &lt;to uri=\'mock:illegalArgumentException\'/&gt;&lt;/onException&gt;... something happens  the IAE exception is caught  we do something  but in that process another exception is thrown. Currently  that would be caught by the default error handler  which may not be what we want.What error handler (if any) should handle exceptions thrown while in onException?The onException mechanism is somewhat similar to a try/catch. I don\'t think the exceptions thrown while handling onException should be handled by the same error handler configured for the route  or even the context scoped one. The processing should be very simple  predictable and immutable. Since the default \'CamelDefaultErrorHandlerBuilder\' can be replaced  it is not imho a solution and we need one global one that does as little as possible (the problem would be agreeing what that is: no redeliveries  logging or not  etc).Thoughts?   ',0
'ChoiceProcessor : unable to find the mBeans processor   \tUsing the jconsole  we are not able to locate some processors after a ChoiceProcessor.For example :from(\'direct:start\').to(\'mock:test1\').id(\'mock1\').choice().when(predicate).to(\'mock:test2\').id(\'test2\').otherwise().to(\'mock:test3\').id(\'test3\').end().to(\'mock:outOfChoice\').id(\'outOfChoice\');The processors mock1 and outOfChoice are well found but not the processors test2 and test3.   ',0
'javax.script dependency in camel-core   \tThe OSGi imports for camel-core ends up with a non-optional dependency on javax.script due to it being used in the Activator. However  the karaf feature for camel-core doesn\'t have a dependency on org.apache.servicemix.specs.scripting-api-1.0 .One of two things should be done:1) mark javax.script as optional. This MAY require some updates to the Activator to work when it\'s not available.2) Update the karaf features file to add:&lt;bundle dependency=\'true\'&gt;mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.scripting-api-1.0/${servicemix-specs-version}&lt;/bundle&gt;   ',0
'continued(true) doesn\'t work when is invoked for the second time in the Camel flow   \tWhen Camel flow contains error handling as continued(true)  it is not invoked when the error occurs for the second time (even in different onException).What is more the exception is not handled even by global onException and Camel flow is interruped.   ',0
'Test failures in camel-hdfs on windows as Streams are not closed correctly   \tOn windows some hdfs tests fail as the streams are not correctly being closed. The first stacktrace looks like below. This is a bit misleading as in fact the problem is that not all exchanges could be processed. The reason is that the file component can?t rename the file as it is still open. This is because an inputStream is opened for the file but never closed.junit.framework.AssertionFailedError: expected:&lt;40&gt; but was:&lt;12&gt; at junit.framework.Assert.fail(Assert.java:47) at junit.framework.Assert.failNotEquals(Assert.java:283) at junit.framework.Assert.assertEquals(Assert.java:64) at junit.framework.Assert.assertEquals(Assert.java:195) at junit.framework.Assert.assertEquals(Assert.java:201) at org.apache.camel.component.hdfs.HdfsProducerFileWriteTest.testSimpleWriteFile(HdfsProducerFileWriteTest.java:72) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.junit.rules.TestWatchman$1.evaluate(TestWatchman.java:48) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)   ',0
'FileIdempotentRepository fileStore does not get loaded on bootrapping  therefore files are processed again   \tI am using JVM based initialization of Camel using Spring.I use the documented Camel initialization procedure of main.setApplicationContext(\'my-spring-camel-config.xml\');main.start()I also use the documented FileIdempotentRepository that points to a FileStore.However  when Camel initializes this filestore is not loaded up. Hence  the LRU cache contained within this is empty.As a result  all my files are FTPed again from the remote server.This happens everytime I start my JVM resulting in expensive FTP of files.   ',0
'Error using multiple error handlers and onException (java.lang.IllegalStateException: SendProcessor has not been started)   \tWhen we use more than one errorHandler in our routes and onException  we face test failures with the following exception:java.lang.IllegalStateException: SendProcessor has not been started: sendTo(Endpoint&#91;mock://custom&#93;) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:94)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:621)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:242)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:189)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:121)&#91;camel-core-2.7.2.jar:2.7.2&#93; at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)&#91;:1.6.0_20&#93; at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)&#91;:1.6.0_20&#93;   ',0
'ThrottlingInflightRoutePolicy can deadlock   \tUsing ThrottlingInflightRoutePolicy can deadlock a route in some situations. The unit test pasted in below shows one such situation.What happens is that the bottom route processes its first exchange  then suspends. Since it is suspended it will not take the next exchange from the seda queue  and so it will never check whether it should re-enable the route.Perhaps it will work by putting the check to re-enable the route in the onExchangeBegin method  if that is called even when the route is suspended?import org.apache.camel.Exchange;import org.apache.camel.Produce;import org.apache.camel.ProducerTemplate;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.component.mock.MockEndpoint;import org.apache.camel.impl.DefaultInflightRepository;import org.apache.camel.impl.ThrottlingInflightRoutePolicy;import org.apache.camel.impl.ThrottlingInflightRoutePolicy.ThrottlingScope;import org.apache.camel.test.CamelTestSupport;public class ThrottleTest extends CamelTestSupport { @Produce(uri = \'direct:input\') protected ProducerTemplate input; protected MockEndpoint resultEndpoint; @Override protected RouteBuilder createRouteBuilder() throws Exception { return new RouteBuilder() { public void configure() { resultEndpoint = new MockEndpoint(\'mock:result\'); resultEndpoint.setCamelContext(getContext()); getContext().setInflightRepository(new DefaultInflightRepository() { @Override public void add(Exchange exchange) { super.add(exchange); System.out.println(\' add \' + this.size()); } @Override public void remove(Exchange exchange) { super.remove(exchange); System.out.println(\' remove \' + this.size()); } }); ThrottlingInflightRoutePolicy throttler = new ThrottlingInflightRoutePolicy(); throttler.setMaxInflightExchanges(1); throttler.setScope(ThrottlingScope.Context); from(\'direct:input\') .inOnly(\'seda:hey\'  \'seda:hey\'  \'seda:hey\'  \'seda:hey\'  \'seda:hey\') .delay(1000) .inOnly(\'log:inputDone\'); from(\'seda:hey\') .routePolicy(throttler) .inOut(\'log:outputDone\') .to(resultEndpoint); } }; } public void testThatAllExchangesAreReceived() throws Exception { input.sendBody(\'hello\'); resultEndpoint.expectedMessageCount(5); resultEndpoint.assertIsSatisfied(); }}   ',0
'LoanBroker example have some issues when it is deployed into osgi container like ServiceMix   \tWhen you deploy the camel-example-loanbroker bundle into OSGi container  the osgi container only load the WebService route because there are some confliction of the bean ids.   ',0
'Label of marshal and unmarshal processors do not appear in trace output   \tMy route is defined as following: from(mqIn) .routeId(Helper.getRouteId(this.getClass().getName())) .errorHandler(deadLetterChannel(\'log:DEAD\').maximumRedeliveries(1).retryAttemptedLogLevel(LoggingLevel.WARN)) .onException(EAIException.class).maximumRedeliveries(0).handled(true).to(\'bean:AuditBO?method=handleException\').end() //.transacted(\'PROPAGATION_REQUIRES_NEW\') .setHeader(\'UBS_ID\' new AuditId()) .wireTap(\'seda:auditNew\') .unmarshal(\'SwiftDataFormat\') .setHeader(\'MT\'  getMT) .setHeader(\'SWIFTAddress\'  getSwiftAddress) .to(mqOut);The tracing output is the following[ main] Tracer INFO ID-w01b2bc3-3197-1309192772128-0-2 &gt;&gt;&gt; (wmswift.in.IcgToCore) wireTap(seda://auditNew) --&gt; &lt;&lt;&lt; Pattern:InOnly  Headers:{UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7}  BodyType:String  ...[ main] Tracer INFO ID-w01b2bc3-3197-1309192772128-0-2 &gt;&gt;&gt; (wmswift.in.IcgToCore) --&gt; setHeader&#91;MT&#93; &lt;&lt;&lt; Pattern:InOnly  Headers:{UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7}  BodyType:com.ubs.eai.wmswift.SwiftDataMessage  Body:com.ubs.eai.wmswift.SwiftDataMessage@91b9b0[ main] Tracer INFO ID-w01b2bc3-3197-1309192772128-0-2 &gt;&gt;&gt; (wmswift.in.IcgToCore) setHeader&#91;MT&#93; --&gt; setHeader&#91;SWIFTAddress&#93; &lt;&lt;&lt; Pattern:InOnly  Headers:{MT=502  UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7}  BodyType:com.ubs.eai.wmswift.SwiftDataMessage  Body:com.ubs.eai.wmswift.SwiftDataMessage@91b9b0[ main] Tracer INFO ID-w01b2bc3-3197-1309192772128-0-2 &gt;&gt;&gt; (wmswift.in.IcgToCore) setHeader&#91;SWIFTAddress&#93; --&gt; direct://core &lt;&lt;&lt; Pattern:InOnly  Headers:{SWIFTAddress=ZYAMCHZ0XXXX  MT=502  UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7}  BodyType:com.ubs.eai.wmswift.SwiftDataMessage  Body:com.ubs.eai.wmswift.SwiftDataMessage@91b9b0[ main] Tracer INFO ID-w01b2bc3-3197-1309192772128-0-2 &gt;&gt;&gt; (wmswift.core.CoreToMQ) direct://core --&gt; &lt;&lt;&lt; Pattern:InOnly  Headers:{SWIFTAddress=ZYAMCHZ0XXXX  MT=502  UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7}  BodyType:com.ubs.eai.wmswift.SwiftDataMessage  Body:com.ubs.eai.wmswift.SwiftDataMessage@91b9b0[ main] Tracer INFO ID-w01b2bc3-3197-1309192772128-0-2 &gt;&gt;&gt; (wmswift.core.CoreToMQ) --&gt; choice &lt;&lt;&lt; Pattern:InOnly  Headers:{MT=502  UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7  SWIFTAddress=ZYAMCHZ0XXXX}  The bug I found is the missing label of the unmarshal processor.   ',0
'Groovy language - classNotFoundException in OSGi environment   \tThe problem is in the following method of the GroovyLanguage@SuppressWarnings(\'unchecked\')protected Class&lt;Script&gt; parseExpression(String expression) { return new GroovyClassLoader().parseClass(expression);}It uses the default constructor to create GroovyClassLoader  which uses Thread context classloader  which may not be equal to the classloader of the bundle where the camel context is defined.Caused by: java.lang.NoClassDefFoundError: groovy/lang/Script at java.lang.ClassLoader.defineClass1(Native Method)&#91;:1.6.0_24&#93; at java.lang.ClassLoader.defineClassCond(ClassLoader.java:632)&#91;:1.6.0_24&#93; at java.lang.ClassLoader.defineClass(ClassLoader.java:616)&#91;:1.6.0_24&#93; at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)&#91;:1.6.0_24&#93; at groovy.lang.GroovyClassLoader.access$300(GroovyClassLoader.java:55) at groovy.lang.GroovyClassLoader$ClassCollector.createClass(GroovyClassLoader.java:519) at groovy.lang.GroovyClassLoader$ClassCollector.onClassNode(GroovyClassLoader.java:536) at groovy.lang.GroovyClassLoader$ClassCollector.call(GroovyClassLoader.java:540) at org.codehaus.groovy.control.CompilationUnit$11.call(CompilationUnit.java:747) at org.codehaus.groovy.control.CompilationUnit.applyToPrimaryClassNodes(CompilationUnit.java:932) at org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:509) at org.codehaus.groovy.control.CompilationUnit.processPhaseOperations(CompilationUnit.java:487) at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:464) at groovy.lang.GroovyClassLoader.doParseClass(GroovyClassLoader.java:306) at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:287) at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:267) at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:214) at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:224) at org.apache.camel.language.groovy.GroovyLanguage.parseExpression(GroovyLanguage.java:44) at org.apache.camel.language.groovy.GroovyLanguage.createExpression(GroovyLanguage.java:38) at org.apache.camel.language.groovy.GroovyLanguage.createExpression(GroovyLanguage.java:27) at org.apache.camel.component.language.LanguageProducer.process(LanguageProducer.java:41)&#91;68:org.apache.camel.camel-core:2.6.0.fuse-01-09&#93; at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)&#91;68:org.apache.camel.camel-core:2.6.0.fuse-01-09&#93; ... 92 moreCaused by: java.lang.ClassNotFoundException: groovy.lang.Script at java.net.URLClassLoader$1.run(URLClassLoader.java:202)&#91;:1.6.0_24&#93; at java.security.AccessController.doPrivileged(Native Method)&#91;:1.6.0_24&#93; at java.net.URLClassLoader.findClass(URLClassLoader.java:190)&#91;:1.6.0_24&#93; at java.lang.ClassLoader.loadClass(ClassLoader.java:307)&#91;:1.6.0_24&#93; at groovy.lang.GroovyClassLoader.loadClass(GroovyClassLoader.java:696)&#91;134:groovy-all:1.7.5&#93; at groovy.lang.GroovyClassLoader$InnerLoader.loadClass(GroovyClassLoader.java:449) at groovy.lang.GroovyClassLoader.loadClass(GroovyClassLoader.java:793)&#91;134:groovy-all:1.7.5&#93; at java.lang.ClassLoader.loadClass(ClassLoader.java:248)&#91;:1.6.0_24&#93; ... 115 more   ',0
'Nullpointer in camel-mail when body is null   \tWhen trying to send a mail with an empty body (null) then we get the following NullPointer exception.We should instead either complain about the null body or send the mail with an empty body.13:27:27 010 | INFO | tp1062262230-101 | ache.camel.processor.CamelLogger 87 | 55 - org.apache.camel.camel-core - 2.7.1 | Exchange[ExchangePattern:InOut  BodyType:org.apache.cxf.message.MessageContentsList  Body:&#91;com.ier.ebo_servicerequest.ServiceRequestType@10e07658&#93;]13:27:27 013 | ERROR | tp1062262230-101 | ache.camel.processor.CamelLogger 232 | 55 - org.apache.camel.camel-core - 2.7.1 | Failed delivery for exchangeId: ID-MacBook-Pro-de-bahaaldine-local-51035-1309771358240-2-6. Exhausted after delivery attempt: 1 caught: org.springframework.mail.MailPreparationException: Could not prepare mail; nested exception is java.lang.NullPointerExceptionorg.springframework.mail.MailPreparationException: Could not prepare mail; nested exception is java.lang.NullPointerException at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:367)&#91;49:org.springframework.context.support:3.0.5.RELEASE&#93; at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:344)&#91;49:org.springframework.context.support:3.0.5.RELEASE&#93; at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:44)&#91;281:org.apache.camel.camel-mail:2.7.1&#93; at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.Pipeline.process(Pipeline.java:125)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:139)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:582)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:511)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:211)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RecipientList.sendToRecipientList(RecipientList.java:134)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RecipientList.process(RecipientList.java:102)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.component.cxf.CxfConsumer$1.syncInvoke(CxfConsumer.java:135)&#91;125:org.apache.camel.camel-cxf:2.7.1&#93; at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:77)&#91;125:org.apache.camel.camel-cxf:2.7.1&#93; at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)&#91;:1.6.0_24&#93; at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)&#91;:1.6.0_24&#93; at java.util.concurrent.FutureTask.run(FutureTask.java:138)&#91;:1.6.0_24&#93; at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:106)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:263)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:118)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:208)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:223)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:205)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:113)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:184)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:107)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at javax.servlet.http.HttpServlet.service(HttpServlet.java:713)&#91;72:org.apache.geronimo.specs.geronimo-servlet_2.5_spec:1.1.2&#93; at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:163)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:534)&#91;79:org.eclipse.jetty.servlet:7.3.1.v20110307&#93; at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:476)&#91;79:org.eclipse.jetty.servlet:7.3.1.v20110307&#93; at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.doHandle(HttpServiceServletHandler.java:70)&#91;84:org.ops4j.pax.web.pax-web-jetty:1.0.1&#93; at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:517)&#91;78:org.eclipse.jetty.security:7.3.1.v20110307&#93; at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:226)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:934)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doHandle(HttpServiceContext.java:116)&#91;84:org.ops4j.pax.web.pax-web-jetty:1.0.1&#93; at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:404)&#91;79:org.eclipse.jetty.servlet:7.3.1.v20110307&#93; at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:184)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:869)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:72)&#91;84:org.ops4j.pax.web.pax-web-jetty:1.0.1&#93; at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.Server.handle(Server.java:346)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:581)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.HttpConnection$RequestHandler.content(HttpConnection.java:1057)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:807)&#91;75:org.eclipse.jetty.http:7.3.1.v20110307&#93; at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:220)&#91;75:org.eclipse.jetty.http:7.3.1.v20110307&#93; at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:411)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:526)&#91;74:org.eclipse.jetty.io:7.3.1.v20110307&#93; at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:41)&#91;74:org.eclipse.jetty.io:7.3.1.v20110307&#93; at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:528)&#91;73:org.eclipse.jetty.util:7.3.1.v20110307&#93; at java.lang.Thread.run(Thread.java:680)&#91;:1.6.0_24&#93;Caused by: java.lang.NullPointerException at javax.mail.util.ByteArrayDataSource.&lt;init&gt;(ByteArrayDataSource.java:137)&#91;69:javax.mail:1.4.3&#93; at org.apache.camel.component.mail.MailBinding.populateContentOnMimeMessage(MailBinding.java:205)&#91;281:org.apache.camel.camel-mail:2.7.1&#93; at org.apache.camel.component.mail.MailBinding.populateMailMessage(MailBinding.java:114)&#91;281:org.apache.camel.camel-mail:2.7.1&#93; at org.apache.camel.component.mail.MailProducer$1.prepare(MailProducer.java:46)&#91;281:org.apache.camel.camel-mail:2.7.1&#93; at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:352)&#91;49:org.springframework.context.support:3.0.5.RELEASE&#93; ... 98 more13:27:27 023 | WARN | tp1062262230-101 | ache.cxf.common.logging.LogUtils 371 | - - | Interceptor for {http://www.ier.com/WS_ServiceRequest}WSServiceRequestService#{http://www.ier.com/WS_ServiceRequest}createServiceRequest has thrown exception  unwinding noworg.apache.cxf.interceptor.Fault: Could not prepare mail; nested exception is java.lang.NullPointerException at org.apache.camel.component.cxf.CxfConsumer$1.checkFailure(CxfConsumer.java:218)&#91;125:org.apache.camel.camel-cxf:2.7.1&#93; at org.apache.camel.component.cxf.CxfConsumer$1.setResponseBack(CxfConsumer.java:195)&#91;125:org.apache.camel.camel-cxf:2.7.1&#93; at org.apache.camel.component.cxf.CxfConsumer$1.syncInvoke(CxfConsumer.java:142)&#91;125:org.apache.camel.camel-cxf:2.7.1&#93; at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:77)&#91;125:org.apache.camel.camel-cxf:2.7.1&#93; at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)&#91;:1.6.0_24&#93; at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)&#91;:1.6.0_24&#93; at java.util.concurrent.FutureTask.run(FutureTask.java:138)&#91;:1.6.0_24&#93; at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:106)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:263)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:118)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:208)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:223)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:205)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:113)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:184)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:107)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at javax.servlet.http.HttpServlet.service(HttpServlet.java:713)&#91;72:org.apache.geronimo.specs.geronimo-servlet_2.5_spec:1.1.2&#93; at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:163)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:534)&#91;79:org.eclipse.jetty.servlet:7.3.1.v20110307&#93; at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:476)&#91;79:org.eclipse.jetty.servlet:7.3.1.v20110307&#93; at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.doHandle(HttpServiceServletHandler.java:70)&#91;84:org.ops4j.pax.web.pax-web-jetty:1.0.1&#93; at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:517)&#91;78:org.eclipse.jetty.security:7.3.1.v20110307&#93; at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:226)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:934)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doHandle(HttpServiceContext.java:116)&#91;84:org.ops4j.pax.web.pax-web-jetty:1.0.1&#93; at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:404)&#91;79:org.eclipse.jetty.servlet:7.3.1.v20110307&#93; at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:184)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:869)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:72)&#91;84:org.ops4j.pax.web.pax-web-jetty:1.0.1&#93; at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.Server.handle(Server.java:346)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:581)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.HttpConnection$RequestHandler.content(HttpConnection.java:1057)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:807)&#91;75:org.eclipse.jetty.http:7.3.1.v20110307&#93; at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:220)&#91;75:org.eclipse.jetty.http:7.3.1.v20110307&#93; at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:411)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:526)&#91;74:org.eclipse.jetty.io:7.3.1.v20110307&#93; at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:41)&#91;74:org.eclipse.jetty.io:7.3.1.v20110307&#93; at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:528)&#91;73:org.eclipse.jetty.util:7.3.1.v20110307&#93; at java.lang.Thread.run(Thread.java:680)&#91;:1.6.0_24&#93;Caused by: org.springframework.mail.MailPreparationException: Could not prepare mail; nested exception is java.lang.NullPointerException at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:367)&#91;49:org.springframework.context.support:3.0.5.RELEASE&#93; at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:344)&#91;49:org.springframework.context.support:3.0.5.RELEASE&#93; at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:44)&#91;281:org.apache.camel.camel-mail:2.7.1&#93; at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.Pipeline.process(Pipeline.java:125)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:139)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:582)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:511)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:211)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RecipientList.sendToRecipientList(RecipientList.java:134)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RecipientList.process(RecipientList.java:102)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.component.cxf.CxfConsumer$1.syncInvoke(CxfConsumer.java:135)&#91;125:org.apache.camel.camel-cxf:2.7.1&#93; ... 41 moreCaused by: java.lang.NullPointerException at javax.mail.util.ByteArrayDataSource.&lt;init&gt;(ByteArrayDataSource.java:137)&#91;69:javax.mail:1.4.3&#93; at org.apache.camel.component.mail.MailBinding.populateContentOnMimeMessage(MailBinding.java:205)&#91;281:org.apache.camel.camel-mail:2.7.1&#93; at org.apache.camel.component.mail.MailBinding.populateMailMessage(MailBinding.java:114)&#91;281:org.apache.camel.camel-mail:2.7.1&#93; at org.apache.camel.component.mail.MailProducer$1.prepare(MailProducer.java:46)&#91;281:org.apache.camel.camel-mail:2.7.1&#93; at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:352)&#91;49:org.springframework.context.support:3.0.5.RELEASE&#93; ... 98 more   ',0
'Using adviceWith 2 times or more in Java DSL with a context scoped onException causing the 1st advised route to not work as expected   \tSee nabblehttp://camel.465427.n5.nabble.com/intercept-using-adviceWith-tp4520468p4520468.html   ',0
'Archetypes fail to build in offline mode   \tIf build tooling/archetypes with the --offline Maven argument you may see an error like&#91;ERROR&#93; Unresolveable build extension: Error resolving version for plugin \'org.apache.maven.archetype:archetype-packaging\'Seems the version for archetype-packaging in the dependencyManagement section defined in the parent pom is not propagating down to build extension... when Maven is not in offline mode it can simply grab the latest version from the metadata at central. I\'m committing a simple fix shortly.   ',0
'TraceInterceptor does not work correctly for AsyncProcessing   \tTraceEventHandlers are not called correctly when a node is processed asynchronously.From org.apache.camel.processor.interceptor.TraceInterceptor: try { // special for interceptor where we need to keep booking how far we have routed in the intercepted processors if (node.getParent() instanceof InterceptDefinition &amp;&amp; exchange.getUnitOfWork() != null) { TracedRouteNodes traced = exchange.getUnitOfWork().getTracedRouteNodes(); traceIntercept((InterceptDefinition) node.getParent()  traced  exchange); } // process the exchange try { sync = super.process(exchange  callback); } catch (Throwable e) { exchange.setException(e); } } finally { // after (trace out) if (shouldLog &amp;&amp; tracer.isTraceOutExchanges()) { logExchange(exchange); traceExchangeOut(exchange  traceState); } }As it is this results in traceExchangeOut being called before the callback  which is wrong.The call to super.process needs to wrap the callback to call traceExchangeOut (and the finally block shouldn\'t run if the process is asynch).This isn\'t a regression  but the change to make more routes asynchronous makes it more noticeable.   ',0
'camel-ftp - Using tempFileName option should use the separator option to allow control of path separators in the generated file name   \tSee nabblehttp://camel.465427.n5.nabble.com/FTP-temp-file-not-being-created-correctly-on-Windows-Camel-2-7-2-tp4591581p4591581.html   ',0
'Missing setter or constructor-argument for elementNameStrategyRef in SoapJaxbDataFormat   \tBecause the variable \'elementNameStrategyRef\' in org.apache.camel.dataformat.soap.SoapJaxbDataFormat can\'t be set  it is always null. Therefore declaring the data format with spring-dsl leads to an automatic fallback to the default strategy \'TypeNameStrategy\' in org.apache.camel.dataformat.soap.SoapJaxbDataFormat.checkElementNameStrategy(Exchange exchange). This further leads to wrong results when marshalling.So the following declararion does not work correctly:... &lt;bean id=\'myStrategy\' class=\'org.apache.camel.dataformat.soap.name.ServiceInterfaceStrategy\'&gt; &lt;constructor-arg value=\'my.package.MyServiceInterface\'/&gt; &lt;constructor-arg value=\'true\'/&gt; &lt;/bean&gt;... &lt;camelContext xmlns=\'http://camel.apache.org/schema/spring\'&gt;... &lt;dataFormats&gt; &lt;soapjaxb id=\'mySoap\'  contextPath=\'my.package\'  elementNameStrategyRef=\'myStrategy\'/&gt; &lt;/dataFormats&gt;... &lt;route&gt; &lt;from uri=\'cxf:/MyService?serviceClass=my.package.MyServiceInterface\' /&gt;... &lt;convertBodyTo type=\'my.package.MyType\'/&gt; &lt;marshal ref=\'mySoap\'/&gt;...   ',0
'Properties component - Cached locations may add duplicates   \tSee nabblehttp://camel.465427.n5.nabble.com/LRUCache-memory-leak-when-using-camel-properties-file-tp4621357p4621357.htmlThe internal cache should be a soft cache and we should use a key holder to ensure equals/hashCode   ',0
'The routeContext stack of DefaultUnitOfWork should be thread safe   \tHere is the stack tracejava.util.EmptyStackException at java.util.Stack.peek(Stack.java:85) at java.util.Stack.pop(Stack.java:67) at org.apache.camel.impl.DefaultUnitOfWork.popRouteContext(DefaultUnitOfWork.java:226) at org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:260) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:330) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208) at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:256) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70) at org.apache.camel.processor.Pipeline.process(Pipeline.java:143) at org.apache.camel.processor.Pipeline.process(Pipeline.java:78) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:113) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85) at org.apache.camel.processor.aggregate.AggregateProcessor$1.run(AggregateProcessor.java:397) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)You can find more information in this mail thread&#91;1&#93;&#91;1&#93;http://camel.465427.n5.nabble.com/EmptyStackException-in-DefaultUnitOfWork-popRouteContext-td4630106.html   ',0
'Connection to sftp server occasionally don\'t want to come back   \tProblem appear if somebody kill logged on user on sftp server while you are connected with consumer.Camel is not able to reconnect on next poll even if it says that it will do this.RemoteFileConsumer is not connected but it thinks that it is still logged in.I think \'loggedIn\' flag should be down after each disconnecting action like in attached patch.2011-07-24 22:35:14 848 WARN &#91;RemoteFilePollingConsumerPollStrategy:37&#93; Trying to recover by disconnecting from remote server forcing a re-connect at next poll: sftp://test@host 2011-07-24 22:35:14 849 WARN &#91;RemoteFilePollingConsumerPollStrategy:52&#93; Consumer Consumer&#91;sftp://test@host/test?delay=60000&amp;delete=true&amp;localWorkDirectory=\%2Fvar\%2Ftest\%2Ftemp&amp;password=xxxx&amp;throwExceptionOnConnectFailed=true&#93; could not poll endpoint: sftp://test@host/test?delay=60000&amp;delete=true&amp;localWorkDirectory=\%2Fvar\%2Ftest\%2Ftemp&amp;password=xxxx&amp;throwExceptionOnConnectFailed=true caused by: Cannot change directory to: test org.apache.camel.component.file.GenericFileOperationFailedException: Cannot change directory to: test at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:408) at org.apache.camel.component.file.remote.SftpOperations.changeCurrentDirectory(SftpOperations.java:393) at org.apache.camel.component.file.remote.SftpConsumer.doPollDirectory(SftpConsumer.java:77) at org.apache.camel.component.file.remote.SftpConsumer.pollDirectory(SftpConsumer.java:49) at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:83) at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:97) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662)Caused by: 4:  at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:285) at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:406) ... 14 moreCaused by: java.io.IOException: Pipe closed at java.io.PipedInputStream.read(PipedInputStream.java:291) at java.io.PipedInputStream.read(PipedInputStream.java:361) at com.jcraft.jsch.ChannelSftp.fill(ChannelSftp.java:2333) at com.jcraft.jsch.ChannelSftp.header(ChannelSftp.java:2359) at com.jcraft.jsch.ChannelSftp._realpath(ChannelSftp.java:1819) at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:268) ... 15 more   ',0
'MDCUnitOfWork behaviour incorrect with nested routes   \tMDCUnitOfWork.clear() removes any content set by MDCUnitOfWork from MDC.If there are two separate exchange running at the same time in the same thread  as happens when a ProduceTemplate is used from Java  this is incorrect because the MDC of the parent is cleared after the child completes.Conceptually the MDC should be a stack  but MDC only accepts strings so the simplest thing to do is for MDCUnitOfWork to replace the previous values in clear().   ',0
'dump as xml fails if message body is already xml   \tMessageHelper.dumpAsXml has a problem if the message body is already xml.   ',0
'camel-aws won\'t build offline   \tIf you build camel-aws in Maven\'s offline mode (-o)  you may get the following error:No versions available for org.codehaus.jackson:jackson-core-asl:jar:[1.4 ) within specified rangeThis will occur even if you have the libs locally. This is happening because Maven cannot download the remote metadata to get a list of versions for jackson-core-asl. Specifying a hard version for this (not a range) gets around the issue. Committing a fix shortly.   ',0
'@Bean method name is ignored   \tSince 2.8.0 Exchange.BEAN_METHOD_NAME is always used instead of @Bean method name (see BeanInfo.createInvocation(Object pojo  Exchange exchange)). As a consequence  the wrong method is choosen when I use a beanref invokation on a method that uses @Bean parameter binding.I built a simple test case as a zip file containing an Eclipse Helios maven project (see attachment). The test fails with camel 2.8.0 and succeeds with 2.7.3 and earlier (at least until 2.6.0).regards Vincent MATHON   ',0
'Camel CXF Endpoint creates incomplete WSDL   \tThe dynamically created WSDL for a cxf:cxfEndpoint declaration is malformed when using a complex type as parameter.Please see as well the discussion here.http://camel.465427.n5.nabble.com/Camel-CXF-Endpoint-creating-incomplete-WSDL-td4642433.htmlUse attached test project to run mvn test with version 2.8.0 and 2.7.2  this should show the error.   ',1
'xslt component - Cannot load xslt file from file system   \tSee nabblehttp://camel.465427.n5.nabble.com/Custom-URIResolver-for-Camel-tp4665485p4665485.htmlThe Spring IO resource is a bit pants  as you ask for it to give an input stream  and then it fails doing that for a plain file url.Instead it gives you an URL connection  and you get a unknown host exception.   ',0
'Camel Bindy Parser One to Many KvP Unmarshall Issue   \tBindy KvP unmarshall issue. While unmarshalling FIX messages  camel-bindy causing inconsistencies if the incoming fix messages are defined to map using \'OneToMany\' annotations.In a given route for eg: BindyKeyValuePairDataFormat kvpBindyDataFormat = new BindyKeyValuePairDataFormat(\'org.apache.camel.dataformat.bindy.model.fix.complex.onetomany\'); public void configure() { from(URI_DIRECT_START).unmarshal(kvpBindyDataFormat).to(URI_MOCK_RESULT); }kvpBindyDataFormat is single instance for multiple threads and with in \'BindyKeyValuePairFactory\' class instance varialbe below is shared across multiple threads causing data inconsistencies.private Map&lt;String  List&lt;Object&gt;&gt; lists = new HashMap&lt;String  List&lt;Object&gt;&gt;(); Values from previous thread/messages are retained in the current thread causing issues.For eg in the test case: public class BindyComplexOneToManyKeyValuePairUnMarshallTest extends CommonBindyTest if we send another message with no repeating groups are sent.String message2 = \'8=FIX 4.19=2034=135=049=INVMGR56=BRKR\' + \'1=BE.CHM.00111=CHM0001-0158=this is a camel - bindy test\'  + \'10=220\';The output message has repeating group data from message processed in earlier thread are pouplated causing data inconsistencies.Please suggest the fix considering multi-threading scenario. I am willing to volunteer for the fix.Regards Surya   ',0
'Example feature: wrong spring version   \tFeatureapache-camel-2.8.0.zip/apache-camel-2.8.0/examples/camel-example-etl/src/main/resources/features.xml contains &lt;bundle&gt;mvn:org.springframework/spring-jdbc/2.5.6.SEC01&lt;/bundle&gt; &lt;bundle&gt;mvn:org.springframework/spring-orm/2.5.6.SEC01&lt;/bundle&gt; Exception during \'hibernate-feauture\' feature installation:12:23:21 337 | INFO | l Console Thread | araf.shell.console.jline.Console 258 | 36 - org.apache.karaf.shell.console - 2.2.1 | Exception caught while executing command java.lang.Exception: Could not start bundle mvn:org.springframework/spring-jdbc/2.5.6.SEC01 in feature(s) hibernate-feauture-0.0.0: The bundle \'org.springframework.jdbc_2.5.6.SEC01 &#91;332&#93;\' could not be resolved. Reason: Missing Constraint: Import-Package: org.springframework.dao; version=\'&#91;2.5.6.SEC01 2.5.6.SEC01&#93;\' at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeatures(FeaturesServiceImpl.java:353)&#91;38:org.apache.karaf.features.core:2.2.1&#93;...Caused by: org.osgi.framework.BundleException: The bundle \'org.springframework.jdbc_2.5.6.SEC01 &#91;332&#93;\' could not be resolved. Reason: Missing Constraint: Import-Package: org.springframework.dao; version=\'&#91;2.5.6.SEC01 2.5.6.SEC01&#93;\' at org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolverError(AbstractBundle.java:1317)&#91;osgi-3.6.0.v20100517.jar:&#93; at org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolutionFailureException(AbstractBundle.java:1301)&#91;osgi-3.6.0.v20100517.jar:&#93; at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:319)&#91;osgi-3.6.0.v20100517.jar:&#93; at org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:284)&#91;osgi-3.6.0.v20100517.jar:&#93; at org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:276)&#91;osgi-3.6.0.v20100517.jar:&#93; at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeatures(FeaturesServiceImpl.java:350)&#91;38:org.apache.karaf.features.core:2.2.1&#93; ... 15 moreSolution:Change version for bundles org.springframework/spring-jdbc and org.springframework/spring-orm to 3.0.5.RELEASE instead 2.5.6.SEC01.   ',0
'Wrong exception uri when an HTTP error code is returned   \tWhen a REST service returns an HTTP error code (e.g. 404)  the URI property of the exception is incorrect.The URI is the URI of the origin endpoint of the route.It should be instead the URI of the endpoint that threw the exception.For instance  in the following route :&lt;route id=\'restproxy\'&gt; &lt;from uri=\'restlet:http://localhost:9080/oe/ws/offre/{id}\'/&gt; &lt;doTry&gt; &lt;to uri=\'restlet:http://bla.dot.com:8080/oe/ws/offre/{id}\'/&gt; &lt;doCatch&gt; &lt;exception&gt;org.apache.camel.CamelException&lt;/exception&gt; &lt;log message=\'URI=${exception.uri}\'/&gt; &lt;/doCatch&gt; &lt;/doTry&gt;&lt;/route&gt;The logged URI is \'restlet:http://localhost:9080/oe/ws/offre/{id}\' but should be instead the real URI used  e.g. \'restlet:http://bla.dot.com:8080/oe/ws/offre/1\'.This bug might be fixed by the following code change in class org.apache.camel.component.restlet.RestletProducer  method populateRestletProducerException() : String uri = exchange.getFromEndpoint().getEndpointUri(); + String uri = response.getRequest().getResourceRef()   ',0
'Ftp consumer using done file should cater for if stepwise has been enabled  and thus the done file path is to be calculated differently   \tThe workaround is to use ${file:onlyname} or not using stepwise.   ',0
'Bug in parsing of JPA uri   \tAccording to http://camel.apache.org/jpa.html entityName is optional.When configuring with the following uri (e.g. w/o entityName):&lt;camel:endpoint id=\'jpaEndpoint\' uri=\'jpa:?persistenceUnit=journalPersistenceUnit&amp;usePersist=true\' /&gt;the following warning will be displayed2011-08-21 18:57:11 381 &#91;main&#93;[][][][][][][] WARN org.apache.camel.util.ObjectHelper - Cannot find class: persistenceUnitjournalPersistenceUnitusePersisttruepersistenceUnitjournalPersistenceUnitusePersisttruedue to the incorrect if test in the JpaComponent:// lets interpret the next string as a class if (path != null) { // provide the class loader of this component to work in OSGi environments as camel-jpa must be able // to resolve the entity classes Class&lt;?&gt; type = getCamelContext().getClassResolver().resolveClass(path  JpaComponent.class.getClassLoader()); if (type != null) { endpoint.setEntityType(type); } }path is not null  but it is the rest of the string and not the entityname. e.g it should not start with ? if it is an entityname - else it is the options.   ',0
'Freemarker - Loading template from file system fails   \tThis only affects Camel 2.9.   ',0
'Camel-netty option \'encoder\' and \'decoder\' does not work   \tContrary to the documentation  the \'encoder\' and \'decoder\' option is unusable as it\'s value is taken as-is instead of resolving the references using the registry.This bug was introduced in the revision 960621 as part of CAMEL-2907.Patch can be found at https://github.com/szabolcsberecz/camel/commit/b3bcc8dd284575c931048ea410c44577474e25dd   ',0
'It\'s hardly possible to use all expression of the Simple language to create file names in the file component   \tSometimes it can be necessary to use custom headers to create a file name.For example  I declare my file endpoint in the following manner:&lt;route id=\'fileReader\'&gt; &lt;from uri=\'file://rootFolder?move=.backup&amp;amp;moveFailed=.error/${header.CustomHeader}\' /&gt; &lt;to uri=\'file://out\'/&gt;&lt;/route&gt;The header \'CustomHeader\' cannot be read because of the following snippets of code in the org.apache.camel.component.file.GenericFile/** * Bind this GenericFile to an Exchange */public void bindToExchange(Exchange exchange) { exchange.setProperty(FileComponent.FILE_EXCHANGE_FILE  this); GenericFileMessage&lt;T&gt; in = new GenericFileMessage&lt;T&gt;(this); exchange.setIn(in); populateHeaders(in);}/** * Populates the {@link GenericFileMessage} relevant headers * * @param message the message to populate with headers */public void populateHeaders(GenericFileMessage&lt;T&gt; message) { if (message != null) { message.setHeader(Exchange.FILE_NAME_ONLY  getFileNameOnly()); message.setHeader(Exchange.FILE_NAME  getFileName()); message.setHeader(\'CamelFileAbsolute\'  isAbsolute()); message.setHeader(\'CamelFileAbsolutePath\'  getAbsoluteFilePath()); if (isAbsolute()) { message.setHeader(Exchange.FILE_PATH  getAbsoluteFilePath()); } else { // we must normalize path according to protocol if we build our own paths String path = normalizePathToProtocol(getEndpointPath() + File.separator + getRelativeFilePath()); message.setHeader(Exchange.FILE_PATH  path); } message.setHeader(\'CamelFileRelativePath\'  getRelativeFilePath()); message.setHeader(Exchange.FILE_PARENT  getParent()); if (getFileLength() &gt;= 0) { message.setHeader(\'CamelFileLength\'  getFileLength()); } if (getLastModified() &gt; 0) { message.setHeader(Exchange.FILE_LAST_MODIFIED  new Date(getLastModified())); } }}As you can see a new \'in\' message is created and not all the headers from the original message are copied to it.   ',0
'Exeptions cannot be propagated to the parent route when using LogEIP   \tHere is unit test that demonstrates the problem.For the unit test pass successfully it\'s necessary to delete LogEIP from the route.package org.apache.camel.impl;import org.apache.camel.Exchange;import org.apache.camel.Processor;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.test.junit4.CamelTestSupport;import org.junit.Test;public class PropagateExceptionTest extends CamelTestSupport { @Test public void failure() throws Exception { getMockEndpoint(\'mock:handleFailure\').whenAnyExchangeReceived(new Processor() { @Override public void process(Exchange exchange) throws Exception { throw new RuntimeException(\'TEST EXCEPTION\'); } }); getMockEndpoint(\'mock:exceptionFailure\').expectedMessageCount(1); sendBody(\'direct:startFailure\'  \'Hello World\'); assertMockEndpointsSatisfied(); } @Test public void success() throws Exception { getMockEndpoint(\'mock:handleSuccess\').whenAnyExchangeReceived(new Processor() { @Override public void process(Exchange exchange) throws Exception { throw new RuntimeException(\'TEST EXCEPTION\'); } }); getMockEndpoint(\'mock:exceptionSuccess\').expectedMessageCount(1); sendBody(\'direct:startSuccess\'  \'Hello World\'); assertMockEndpointsSatisfied(); } @Override protected RouteBuilder[] createRouteBuilders() throws Exception { return new RouteBuilder[] { new RouteBuilder() { public void configure() throws Exception { from(\'direct:startFailure\') .onException(Throwable.class) .to(\'mock:exceptionFailure\') .end() .to(\'direct:handleFailure\') .to(\'mock:resultFailure\'); from(\'direct:handleFailure\') .errorHandler(noErrorHandler()) .log(\'FAULTY LOG\') .to(\'mock:handleFailure\'); } }  new RouteBuilder() { public void configure() throws Exception { from(\'direct:startSuccess\') .onException(Throwable.class) .to(\'mock:exceptionSuccess\') .end() .to(\'direct:handleSuccess\') .to(\'mock:resultSuccess\'); from(\'direct:handleSuccess\') .errorHandler(noErrorHandler()) .to(\'mock:handleSuccess\'); } } }; }}   ',0
'Error in camel-restlet feature definition   \tThe current contents of the camel-features.xml file reads:&lt;feature name=\'camel-restlet\' version=\'2.7.1-fuse-00-43\' resolver=\'(obr)\'&gt; &lt;feature version=\'2.7.1-fuse-00-43\'&gt;camel-core&lt;/feature&gt; &lt;bundle dependency=\'true\'&gt;mvn:org.apache.camel/camel-restlet/2.7.1-fuse-00-43&lt;/bundle&gt; &lt;bundle&gt;mvn:http://maven.restlet.org!org.restlet.jse/org.restlet/2.0.5&lt;/bundle&gt;&lt;/feature&gt;It actually should read http://fernandoribeiro.eti.br/2011/09/12/bug-in-fuse-4-4/ (Thanks to Fernando Ribeiro for the heads up!)   ',0
'Wrong slash in FTP component for doneFile   \tI tried to use the doneFile with FTP component.When I used it to my FTP on my windows machine everything goes fine.When I tried to act the same with a FTP host on a Linux machine  I got an issue.I sniff the packet to see what goes wrong and I see this :the doneFile DELE public/Test/in/myFile.txt the file to processDELE public/Test/in/myFile.xmlAfter a Quick look on the code:org.apache.camel.component.file.GenericFileEndpoint line 682 String answer = pattern; if (ObjectHelper.isNotEmpty(path) &amp;&amp; ObjectHelper.isNotEmpty(pattern)) { // done file must always be in same directory as the real file name answer = path + File.separator + pattern; } if (getConfiguration().needToNormalize()) { // must normalize path to cater for Windows and other OS answer = FileUtil.normalizePath(answer); }We use the \'File.Separator\' but in this case  it should get a kind of \'FTP.Separator\' or the FTP component should return true to the needToNormalize method and change the narmalizePath method to manage this case.   ',0
'camel-bindy - Marshaling using CSV will insert wrong char separator if using an escaped separator char such as a pipe   \tWhen using bindy in CSV format with a separator in the model as \'|\' to denote a pipe character  then it does not work consistent for marshal and unmarshal. In marshal it will insert / as separator  but it should use | instead.See nabblehttp://camel.465427.n5.nabble.com/bindy-different-behavior-between-marshal-and-unmarshal-with-pipe-separator-tp4798488p4798488.html   ',0
'NullPointerException when unmarshalling using serialization data format   \tSpring configuration: &lt;!-- A custom CamelContext --&gt; &lt;camel:camelContext id=\'camel\'&gt; &lt;!-- JSON data format marshalling --&gt; &lt;camel:dataFormats&gt; &lt;camel:serialization id=\'serialization\'/&gt; &lt;/camel:dataFormats&gt; &lt;!-- RawOffer input route --&gt; &lt;camel:route&gt; &lt;camel:from uri=\'kestrel://etl01f/feeds\'/&gt; &lt;camel:unmarshal ref=\'serialization\'/&gt; &lt;camel:to uri=\'bean:shard?method=consume\'/&gt; &lt;/camel:route&gt; &lt;/camel:camelContext&gt;Exception:run: [java] log4j:WARN No appenders could be found for logger (org.springframework.context.support.ClassPathXmlApplicationContext). [java] log4j:WARN Please initialize the log4j system properly. [java] log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info. [java] 13:28:07.587 [main] INFO o.a.c.s.h.CamelNamespaceHandler - OSGi environment not detected. [java] 13:28:09.028 [main] INFO o.a.camel.spring.SpringCamelContext - Apache Camel 2.8.0 (CamelContext: camel) is starting [java] 13:28:09.028 [main] INFO o.a.camel.spring.SpringCamelContext - JMX enabled. Using ManagedManagementStrategy. [java] 13:28:09.415 [main] INFO o.a.c.i.c.AnnotationTypeConverterLoader - Found 3 packages with 14 @Converter classes to load [java] 13:28:09.489 [main] INFO o.a.c.i.c.DefaultTypeConverter - Loaded 153 core type converters (total 153 type converters) [java] 13:28:09.528 [main] INFO o.a.c.i.c.DefaultTypeConverter - Loaded additional 0 type converters (total 153 type converters) in 0.003 seconds [java] 13:28:09.730 [main] INFO o.a.c.c.kestrel.KestrelComponent - Creating endpoint for queue \'feeds\' on etl01f  parameters={} [java] 13:28:09.967 [main] INFO o.a.c.c.kestrel.KestrelComponent - Creating MemcachedClient for etl01f/feeds [java] 2011-09-14 13:28:10.073 INFO net.spy.memcached.MemcachedConnection: Added {QA sa=etl01f/95.108.229.218:22133  #Rops=0  #Wops=0  #iq=0  topRop=null  topWop=null  toWrite=0  interested=0} to connect queue [java] 2011-09-14 13:28:10.084 INFO net.spy.memcached.MemcachedConnection: Connection state changed for sun.nio.ch.SelectionKeyImpl@711b50a1 [java] 13:28:10.293 [main] INFO o.a.c.c.kestrel.KestrelConsumer - Starting consumer for kestrel://etl01f/feeds [java] 13:28:10.302 [main] INFO o.a.camel.spring.SpringCamelContext - Route: route1 started and consuming from: Endpoint[kestrel://etl01f/feeds] [java] 13:28:10.318 [main] INFO o.a.camel.spring.SpringCamelContext - Total 1 routes  of which 1 is started. [java] 13:28:10.318 [main] INFO o.a.camel.spring.SpringCamelContext - Apache Camel 2.8.0 (CamelContext: camel) started in 1.291 seconds [java] 13:28:12.858 [Camel (camel) thread #0 - Poller-kestrel://etl01f/feeds] ERROR o.a.c.processor.DefaultErrorHandler - Failed delivery for exchangeId: ID-incubos-osx-local-51787-1315992488896-0-1. Exhausted after delivery attempt: 1 caught: java.lang.NullPointerException [java] java.lang.NullPointerException: null [java] at org.apache.camel.impl.SerializationDataFormat.unmarshal(SerializationDataFormat.java:57) ~[camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:56) ~[camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50) ~[camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99) ~[camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:305) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.Pipeline.process(Pipeline.java:116) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.Pipeline.process(Pipeline.java:79) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:102) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:104) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.component.kestrel.KestrelConsumer$Poller.run(KestrelConsumer.java:230) [camel-kestrel-2.8.0.jar:2.8.0] [java] at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) [na:1.6.0_26] [java] at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) [na:1.6.0_26] [java] at java.util.concurrent.FutureTask.run(FutureTask.java:138) [na:1.6.0_26] [java] at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_26] [java] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_26] [java] at java.lang.Thread.run(Thread.java:680) [na:1.6.0_26]It seems that ExchangeHelper.convertToType() method returned null because camelContext.getTypeConverter() returned null.   ',0
'Unable to use cxf:binding configuration for the endpoint   \tCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name \'service\': Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property \'bindingConfig\' of bean class [org.apache.camel.component.cxf.CxfSpringEndpoint]: Bean property \'bindingConfig\' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter? at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1361) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1086) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425) at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:84) at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:1) at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:280) at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:304) ... 30 moreCaused by: org.springframework.beans.NotWritablePropertyException: Invalid property \'bindingConfig\' of bean class [org.apache.camel.component.cxf.CxfSpringEndpoint]: Bean property \'bindingConfig\' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter? at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1024) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:900) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:76) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:58) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1358) ... 44 more   ',0
'file: consumer does not create directory   \tAccording to http://camel.apache.org/file2.html autoCreate is true by default and should for a consumer create the directory.autoCreate true Automatically create missing directories in the file\'s pathname. For the file consumer  that means creating the starting directory. For the file producer  it means the directory the files should be written to. This does not happen and thus a route startup would fail.   ',0
'Because local PrintService objects on Windows have a name which is not their UNC path  the PrinterProducer can never find them.   \tIn org.apache.camel.component.printer.PrinterProducer  the line:setPrinter(\'////\' + config.getHostname() + \'\' + config.getPrintername());reconstructs a UNC path which is expected to match the name of a PrintService on the system. For local printers on Windows  the name of the PrintService is simply the name of the printer without the host and any backslashes  so the PrinterProducer is never able to find them.So when config.getHostname() is \'localhost\'  at least on Windows  the line should be simply:setPrinter(config.getPrintername())so that we\'d have code like:if (\'localhost\'.equalsIgnoreCase(config.getHostname())) { setPrinter(config.getPrintername());} else { setPrinter(\'////\' + config.getHostname() + \'//\' + config.getPrintername());}This can only work if issue CAMEL-4477 about the error in parseURI() in PrinterConfiguration is also fixed.   ',0
'Exceptions are not propagated to the parent route when endpoint cannot be resolved in the RoutingSlip EIP   \tHere is the unit test to reproduce the issuepackage org.test;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.component.mock.MockEndpoint;import org.apache.camel.test.junit4.CamelTestSupport;import org.junit.Test;public class RecipientListTest extends CamelTestSupport { public static class Router { public String findEndpoint() { return \'unresolved://endpoint\'; } } @Test public void recipientList() throws Exception { MockEndpoint endpoint = getMockEndpoint(\'mock://error\'); endpoint.expectedMessageCount(1); sendBody(\'direct://parent\'  \'Hello World!\'); assertMockEndpointsSatisfied(); } @Override protected RouteBuilder createRouteBuilder() throws Exception { return new RouteBuilder() { @Override public void configure() throws Exception { from(\'direct://parent\') .onException(Throwable.class) .to(\'mock://error\') .end() .to(\'direct://child\'); from(\'direct://child\') .errorHandler(noErrorHandler()) .routingSlip(bean(Router.class)); } }; }}   ',0
'Recipient List cannot vary destination by changing property in an expression   \tThis is probably due to producers being cached based on unresolved endpoint URI  rather than the resolved endpoint URI. Haven\'t tested this theory out though.See message on user list http://markmail.org/message/sdysp6sspq5lomf4   ',1
'Unable to convert jms textmessage to bytemessage   \tWhen receiving a jms textmessage and just forward it to a another queue as a jms bytemessage the original textmessage is sendt without being converted to a jms bytemessage. JmsBinding.makeJmsMessage seems to use the exchange headers to determine of a new jms message should be created or the original send.Exchange headers seems to be populated if you do routing or set a dummy header.See http://camel.465427.n5.nabble.com/Convert-jms-message-from-textmessage-to-bytemessage-tc4895362.html/preben   ',0
'Can\'t find splitter bean in registry using multiple camel contexts with \'vm\' endpoint   \tThe splitter component can use a bean with a \'split method\'. It seems that this \'split bean\' is handled as expression and resolved lately using Camel Context from current exchange.If I send an exchange using a separate CamelContext (\'client\')&lt;camelContext id=\'client\' xmlns=\'http://camel.apache.org/schema/spring\'&gt;&lt;/camelContext&gt;to a route defined in another CamelContext (\'server\') using in-memory transport like \'direct\' or \'vm\'&lt;camelContext id=\'server\' xmlns=\'http://camel.apache.org/schema/spring\'&gt; &lt;route id=\'route02\' trace=\'false\' streamCache=\'false\'&gt; &lt;from uri=\'vm:route02\'/&gt; &lt;split&gt; &lt;method bean =\'stringLineSplitter\' method=\'split\'/&gt; &lt;log message=\'before sending: ${body}\'/&gt; &lt;inOut uri =\'vm:route04\'/&gt; &lt;log message=\'after sending\'/&gt; &lt;/split&gt; &lt;to uri=\'mock:route02\'/&gt; &lt;/route&gt;&lt;/camelContext&gt;the test fails with \'Cannot find class: stringLineSplitter\' (Camel 2.8.0). \'org.apache.camel.NoSuchBeanException - No bean could be found in the registry for: stringLineSplitter\' (Camel 2.9-SNAPSHOT)If I understood Camel right it failsbecause it tries to resolve this bean based on client Camel Contextwhich is still set at the current exchange send from \'client\' to \'server\' but itdoesn\'t contain the bean.If I send an exchange using same \'client\' CamelContext to another route in\'server\' CamelContext involving \'external\' components like \'jms\' (ActiveMQ)&lt;camelContext id=\'server\' xmlns=\'http://camel.apache.org/schema/spring\'&gt; &lt;route id=\'route03\' trace=\'false\' streamCache=\'false\'&gt; &lt;from uri=\'jms:queue:route03\'/&gt; &lt;split&gt; &lt;method bean =\'stringLineSplitter\' method=\'split\'/&gt; &lt;log message=\'before sending: ${body}\'/&gt; &lt;inOut uri =\'vm:route04\'/&gt; &lt;log message=\'after sending\'/&gt; &lt;/split&gt; &lt;to uri=\'mock:route03\'/&gt; &lt;/route&gt;&lt;/camelContext&gt;the test passed successfully. It seems that \'jms\' component creates anew exchange using \'server\' CamelContext.   ',0
'NettyProducer creating new connection on every message   \tUsing a NettyProducer without the disconnect=true configuration is causing the route to block after 10 messages on the to(\'netty://tcp....\') call.It appears that a new socket connection is created for every message  and then after 10 connections no new connection is allowed (must be a default thread pool limit?).Using the disconnect=true option fixes the problem as a socket is connected  message sent  then disconnected. But this does not seem viable for implementations where that overhead is undesirable or where more than one response is expected on a channel.&#8211;This is a small Unit Test that shows the problem (http://camel.465427.n5.nabble.com/Camel-Netty-Producer-creating-new-connection-on-every-message-td4844805.html#none) package netty; import java.util.Arrays; import java.util.Collection; import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicBoolean; import java.util.concurrent.atomic.AtomicInteger; import junit.framework.TestCase; import org.apache.camel.CamelContext; import org.apache.camel.Exchange; import org.apache.camel.ExchangePattern; import org.apache.camel.Processor; import org.apache.camel.builder.RouteBuilder; import org.apache.camel.impl.DefaultCamelContext; import org.junit.Before; import org.junit.BeforeClass; import org.junit.Test; import org.junit.runner.RunWith; import org.junit.runners.Parameterized; import org.junit.runners.Parameterized.Parameters; import org.slf4j.Logger; import org.slf4j.LoggerFactory; @RunWith(Parameterized.class) public class NettyTest extends TestCase {  private final static Logger logger = LoggerFactory.getLogger(NettyTest.class);  private final static CamelContext serverContext = new DefaultCamelContext();  private final CamelContext clientContext = new DefaultCamelContext();  private final AtomicInteger responseCounter = new AtomicInteger(0);  private final AtomicBoolean passedTen = new AtomicBoolean(false);  private Boolean disconnectClient;  public NettyTest(Boolean disconnectClient)  { this.disconnectClient = disconnectClient; }  @Parameters  public static Collection&lt;Object[]&gt; configs()  {  return Arrays.asList(new Object[][] { { true }  { false } });  }  @BeforeClass  public static void createServer() throws Exception  {  serverContext.addRoutes(new RouteBuilder()  {  @Override  public void configure() throws Exception  {  from(\'netty:tcp://localhost:9000?sync=true&amp;disconnectOnNoReply=false&amp;allowDefaultCodec=true&amp;tcpNoDelay=true&amp;reuseAddress=true&amp;keepAlive=false\')  .setExchangePattern(ExchangePattern.InOut)  .process(new Processor() {  @Override  public void process(Exchange exchange) throws Exception  {  Object body = exchange.getIn().getBody();  logger.info(\'Request received : Value = {}\'  body);  }  })  .transform(constant(3)).stop();  }  });  serverContext.start();  }  @Before  public void createClient() throws Exception  {  clientContext.addRoutes(new RouteBuilder()  {  @Override  public void configure() throws Exception  {  // Generate an Echo message and ensure a Response is sent  from(\'timer://echoTimer?delay=1s&amp;fixedRate=true&amp;period=1s\')  .setExchangePattern(ExchangePattern.InOut)  .transform()  .constant(2)  .to(ExchangePattern.InOut  \'netty:tcp://localhost:9000?allowDefaultCodec=true&amp;tcpNoDelay=true&amp;reuseAddress=true&amp;keepAlive=false&amp;sync=true&amp;disconnect=\' + disconnectClient.toString())  .process(new Processor()  {  @Override  public void process(Exchange exchange) throws Exception  {  Object body = exchange.getIn().getBody();  logger.info(\'Response number {} : Value = {}\'   responseCounter.incrementAndGet()  body);  if (responseCounter.get() &gt; 10) { passedTen.set(true); }  }  }).stop();  }  });  }  @Test  public void test() throws Exception  {  clientContext.getShutdownStrategy().setTimeout(1);  clientContext.start();  logger.info(\'Disconnect = {}\'  this.disconnectClient);  Thread.sleep(TimeUnit.SECONDS.toMillis(15));  clientContext.stop();  assertTrue(\'More than 10 responses have been received\'  passedTen.get());  } }   ',0
'Need to specify the sl4j-api version in the camel maven archetypes   \tThere are some third part dependencies will introduce other version of sl4j-api as CAMEL-4545 shows  we need to specify the sl4j-api in the pom.xml resource.   ',0
'camel-file component does not close a file when it\'s used with camel-xslt   \tHere are the steps to reproduce: Create the directory target/in. Put the file \'file.xml\' into the directory target/in. Note: the end tag in this file is not closed properly. Run the test. The test should fail. The file \'file.xml\' remains in the target/in but it should not.FileLockedTest.javapackage org.apache.camel;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.component.mock.MockEndpoint;import org.apache.camel.test.junit4.CamelTestSupport;import org.junit.Test;public class FileLockedTest extends CamelTestSupport { @Test public void testFileLocked() throws Exception { MockEndpoint result = getMockEndpoint(\'mock:result\'); result.setAssertPeriod(10000); result.expectedMessageCount(1); result.assertIsSatisfied(); } @Override protected RouteBuilder createRouteBuilder() throws Exception { return new RouteBuilder() { @Override public void configure() throws Exception { from(\'file:target/in?delay=100&amp;moveFailed=.error\') .onException(Throwable.class) .to(\'mock:result\') .end() .to(\'xslt:FileLockedTest.xsl\'); } }; }}FileLockedTest.xsl&lt;?xml version=\'1.0\' encoding=\'UTF-8\'?&gt;&lt;xsl:stylesheet xmlns:xsl=\'http://www.w3.org/1999/XSL/Transform\' xmlns=\'http://schemas.computershare.ru/codex/2011/08/\' version=\'1.0\'&gt; &lt;xsl:output method=\'xml\' encoding=\'UTF-8\' omit-xml-declaration=\'yes\' /&gt; &lt;xsl:preserve-space elements=\'*\'/&gt; &lt;xsl:template match=\'/\'&gt; &lt;xsl:apply-templates /&gt; &lt;/xsl:template&gt; &lt;xsl:template match=\'@* | node()\'&gt; &lt;xsl:copy&gt; &lt;xsl:apply-templates select=\'@* | node()\' /&gt; &lt;/xsl:copy&gt; &lt;/xsl:template&gt;&lt;/xsl:stylesheet&gt;file.xml; Note: the end tag is not closed properly&lt;root&gt;&lt;/root   ',0
'SLF4JLog does not work with JdbcDriver for Quickfix/J   \tI discovered that to use SLF4J log  JdbcDriver cannot be present in the Quickfix/J config file. Otherwise  the default LogFactory - ScreenLogFactory will be used. We need JdbcDriver setting as it is used for persisting FIX messages into database for FIX session management.After debugging the code  I found out that this could be fixed by swapping those two lines in QuickfixjEngine.java298: isJdbcLog(settings  impliedLogFactories);299: isSL4JLog(settings  impliedLogFactories);Can we please have this fixed for the next release?   ',0
'Add option on XSLT to allow StAX   \tWith the new StAX converters you may convert to a StAXSource which is not supported by the XSLT transformer  and you get this exceptionCaused by: org.apache.xml.dtm.DTMException: Not supported: javax.xml.transform.stax.StAXSource@14d556e at org.apache.xml.dtm.ref.DTMManagerDefault.getDTM(DTMManagerDefault.java:477) at org.apache.xalan.transformer.TransformerImpl.transform(TransformerImpl.java:699) at org.apache.xalan.transformer.TransformerImpl.transform(TransformerImpl.java:1273) at org.apache.xalan.transformer.TransformerImpl.transform(TransformerImpl.java:1251) at org.apache.camel.builder.xml.XsltBuilder.process(XsltBuilder.java:107)We should add option on XSLT component to explicit enable StAX if the end user wants it.   ',0
'XQuery component does not work with StAXSource out of the box   \tThe new STaXSource type converters cause camel-saxon to fail unit tests as reported by CI serversCaused by: net.sf.saxon.trans.XPathException: Unknown source class at net.sf.saxon.Configuration.buildDocument(Configuration.java:2892) at net.sf.saxon.query.StaticQueryContext.buildDocument(StaticQueryContext.java:211) at org.apache.camel.component.xquery.XQueryBuilder.createDynamicContext(XQueryBuilder.java:474)We should implement the same optimized logic as we did today in XSLT to convert to Source if StAX is allowed  as well to avoid leaking resources we need to ensure if InputStream is in use  we should ensure it gets closed.   ',1
'XPath will lock File input in case of an exception during xpath evaluation   \tWe have a similar issue with XPath  as we had with XSLT and XQuery.If the message is a java.io.File and an exception occurs during evaluation  then that file is locked on Windows platforms.We need to close the FileInputStream to unlock the file  and allow Windows to access the file.   ',0
'Stop or shutdown a route with a custom timeout value  will still log using the default timeout in the logs   \tIf you stop a route with a custom time out value  then the graceful shutdown strategy will still use the default timeout value in the logs  so that information is not correct. For example if you have a short default value  but provide a higher timeout value  then you can have the log show negative timeout values.INFO DefaultShutdownStrategy - Waiting as there are still 2 inflight and pending exchanges to complete  timeout in -14 seconds.   ',0
'Simple expression does not find method toString()   \tIn a route builder  we have a log definition: from(\'direct:testSimple\') .log(\'${body.toString}\');The body contains an object  that implements a public toString() method. But the problem is  that the simple-expression does not find the method toString() and route processing stops without throwing an exception.The funny thing is  that when we just rename the method  e.g. toInfoString()  then it works:from(\'direct:testSimple\') .log(\'${body.toInfoString}\');Why does simple expression have a problem with a method named \'toString\'?   ',0
'NPE from DefaultCxfBinding when  is null   \twhen got soap message from CXF component like this:&lt;soap:Envelope xmlns:soap=\'http://schemas.xmlsoap.org/soap/envelope/\'&gt;&lt;soap:Header&gt;......&lt;/soap:Header&gt;&lt;soap:Body/&gt;&lt;/soap:Envelope&gt;the NPE will be thrown: 18:04:51 255 | WARN | tp1212500935-153 | ache.cxf.common.logging.LogUtils 372 | - - | Interceptor for {http://airportsoap.sopera.de}airport#{http://airportsoap.sopera.de}getAirportInformationByISOCountryCode has thrown exception  unwinding nowjava.lang.NullPointerException at org.apache.camel.component.cxf.DefaultCxfBinding.getResponsePayloadList(DefaultCxfBinding.java:395)&#91;163:org.apache.camel.camel-cxf:2.8.2&#93; at org.apache.camel.component.cxf.DefaultCxfBinding.populateCxfResponseFromExchange(DefaultCxfBinding.java:318)&#91;163:org.apache.camel.camel-cxf:2.8.2&#93; at org.apache.camel.component.cxf.CxfConsumer$1.setResponseBack(CxfConsumer.java:176)&#91;163:org.apache.camel.camel-cxf:2.8.2&#93; at org.apache.camel.component.cxf.CxfConsumer$1.asyncInvoke(CxfConsumer.java:103)&#91;163:org.apache.camel.camel-cxf:2.8.2&#93; at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:68)&#91;163:org.apache.camel.camel-cxf:2.8.2&#93; at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)&#91;141:org.apache.cxf.bundle:2.5.0&#93; at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:93)&#91;141:org.apache.cxf.bundle:2.5.0&#93; at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:263)&#91;141:org.apache.cxf.bundle:2.5.0&#93; at org.apache.cxf.phase.PhaseInterceptorChain.resume(PhaseInterceptorChain.java:232)&#91;141:org.apache.cxf.bundle:2.5.0&#93; at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:80)&#91;141:org.apache.cxf.bundle:2.5.0&#93; at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:323)&#91;141:org.apache.cxf.bundle:2.5.0&#93; at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:289)&#91;141:org.apache.cxf.bundle:2.5.0&#93; at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:72)&#91;141:org.apache.cxf.bundle:2.5.0&#93; at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:939)&#91;59:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:875)&#91;59:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)&#91;59:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:185)&#91;59:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:110)&#91;59:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.server.Server.handleAsync(Server.java:391)&#91;59:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:594)&#91;59:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:393)&#91;59:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:535)&#91;54:org.eclipse.jetty.io:7.4.5.v20110725&#93; at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:40)&#91;54:org.eclipse.jetty.io:7.4.5.v20110725&#93; at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:529)&#91;53:org.eclipse.jetty.util:7.4.5.v20110725&#93; at java.lang.Thread.run(Thread.java:662)&#91;:1.6.0_24&#93;Looking into the source codes  before the line 395 of DefaultCxfBinding  the elements variable shoulde be checked if it\'s null.   ',0
'NPE when using SEDA route and attaching an extra consumer   \tI\'m trying to construct a system for moving some seda queues over toActiveMQ during system shutdown. What I did was create a Route thatconnects to some of my seda queues and then drains the queue to activemq.Basicly I got two routes  the drainer:from(\'seda:\' + sedaId + \'?size=1000\') .routeId(routeName +sedaIs).noAutoStartup().to(activeMQFailuresQueue);And the main route:from(\'seda:\' + sedaId + \'?size=1000\') .routeId(routeName + sedaIs).to(SomeProcessor);Now  sometimes the main route stalls for various reasons I need torestart the jvm process it is running in  so I start the first route.But when trying this in production  I got: java.lang.NullPointerException atorg.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) atorg.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:210) atorg.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:155) atorg.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:129) atjava.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) atjava.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)Bvahdat added a comment:just a very tiny pointer:Looking at the source it seems that theSedaEndpoint.getConsumerMulticastProcessor() method returns \'null\' causingthe NPE  as the condition:multicastStarted == false || consumerMulticastProcessor == nullis true.   ',0
'Bindy does not support quoted value with separator char in CSV datasource   \ti\'m currently writing a tuto on Camel (2.8.2).Showing HTTP4 component usage by downloading US Gov public data  i found a problem : from(\'quartz://dataTimer?cron=0+?\').to(\'direct:datas\'); from(\'direct:datas\') .to(\'http4://earthquake.usgs.gov/earthquakes/catalogs/eqs7day-M1.txt\') .unmarshal(new BindyCsvDataFormat(\'net.thejeearchitectcookbook.camel.earthquake\')) .process(new Processor() { public void process(Exchange exchange) throws Exception { Message message = exchange.getIn(); // ... } });The data format is like and my separator char is \' \':nc 71678421 0 \'Wednesday  November 9  2011 14:53:13 UTC\' 37.5727 -118.8170 1.3 6.60 14 \'Central California\'I want to get all datas as java.lang.String but the date value raises exception :java.lang.IllegalArgumentException: No position 11 defined for the field: 14  line: 2 must be specified]My separator is \' \' but some values are nested inside \' \'. Unfortunately there are \' \' inside the \' \'.Bindy get lost !How can i get String values nested inside \' \' and containing \' \' ?I can note that Camel CSV component deals with it without any problems.Here is my pojo :package net.thejeearchitectcookbook.camel.earthquake;import java.io.Serializable;import org.apache.camel.dataformat.bindy.annotation.CsvRecord;import org.apache.camel.dataformat.bindy.annotation.DataField;@CsvRecord( separator = \' \')public class EarthquakeInfos implements Serializable { @DataField(pos = 1) private String src; @DataField(pos = 2) private String eqid; @DataField(pos = 3) private String version; @DataField(pos = 4) private String datetime; @DataField(pos = 5) private String lat; @DataField(pos = 6) private String lon; @DataField(pos = 7) private String magnitude; @DataField(pos = 8) private String depth; @DataField(pos = 9) private String nst; @DataField(pos = 10) private String place; public String getSrc() { return src; } public void setSrc(String src) { this.src = src; } public String getEqid() { return eqid; } public void setEqid(String eqid) { this.eqid = eqid; } public String getVersion() { return version; } public void setVersion(String version) { this.version = version; } public String getLat() { return lat; } public void setLat(String lat) { this.lat = lat; } public String getLon() { return lon; } public void setLon(String lon) { this.lon = lon; } public String getDepth() { return depth; } public void setDepth(String depth) { this.depth = depth; } public String getNst() { return nst; } public void setNst(String nst) { this.nst = nst; } public String getDatetime() { return datetime; } public void setDatetime(String datetime) { this.datetime = datetime; } public String getMagnitude() { return magnitude; } public void setMagnitude(String magnitude) { this.magnitude = magnitude; } public String getPlace() { return place; } public void setPlace(String place) { this.place = place; }} I can find that CSV Camel component performs well with the same datasource :from(\'direct:datas\').to(\'http4://earthquake.usgs.gov/earthquakes/catalogs/eqs7day-M1.txt\').unmarshal().csv().process(new Processor() { public void process(Exchange exchange) throws Exception { Message message = exchange.getIn(); List&lt;List&lt;String&gt;&gt; datas = (List&lt;List&lt;String&gt;&gt;) message.getBody(); // Skip header datas = datas.subList(1  datas.size() - 1); // Process my data for (List&lt;String&gt; row : datas) { // Process Row String datetime = row.get(3); String region = row.get(9); String magnitude = row.get(6); } }});   ',0
'Bindy - CSV format - Should be able to marshal with quotes   \tSee nabblehttp://camel.465427.n5.nabble.com/Bindy-CSV-marshal-does-not-properly-quote-values-defined-by-the-CsvRecord-separator-td4809017.htmlIts fairly common to marshal to/from with quotes in CSV format.We should make this easier by adding an attribute to @CsvRecord where you can define a quote char to use  either single or double etc.   ',0
'When a route is removed from camel  LifecycleStrategy is called twice   \tDefaultCamelContext.removeRoute method has these lines among others if (getRouteStatus(routeId).isStopped()) { routeService.setRemovingRoutes(true); shutdownRouteService(routeService); removeRouteDefinition(routeId); ServiceHelper.stopAndShutdownServices(routeService);I think the last line from this snippet is not needed  because the route should be already stopped in order to pass the IF statement and then it is shutdown through this call shutdownRouteService(routeService); ServiceHelper.stopAndShutdownServices(routeService) tries to stops again the route if not stopped  but the worse is it shutdown the rout again.It seems to me like a bug  other thoughts?   ',0
'Scala DSL does not support defining route-scoped error handlers   \tThe Scala DSL does not allow for defining error handlers at the route scope. The \'errorHandler\' method only sets the context-scoped error handler.   ',0
'Tokenize pair - evaluated as predicate should close input stream   \tIf you read from a file and use the tokenize pair in a predicate such as a filter / content based router  then the input stream should be closed. Otherwise OS such as Windows keep a lock on the stream  and the file cannot be moved/deleted after processing is done.See nabblehttp://camel.465427.n5.nabble.com/Riding-on-org-apache-camel-language-TokenPairPredicateTest-tp5041981p5041981.htmlNote that using tokenizePair as a predicate is must likely very unusual  as its meant for splitting a stream into tokens  and thus most often only used with the splitter EIP.   ',0
'Extra request parameters sent by the camel-http4 component   \tDescribed in http://camel.465427.n5.nabble.com/Extra-Request-Params-sent-in-camel-HTTP-component-GET-request-td5042808.htmlRoute from(\'jetty:http://0.0.0.0:8080/myapp/myservice\') .to(\'http4://www.google.com/?q=camel&amp;bridgeEndpoint=true&amp;throwExceptionOnFailure=false\'); sends to the server the bridgeEndpoint=true&amp;throwExceptionOnFailure=false parameters while route from(\'jetty:http://0.0.0.0:8080/myapp/myservice\') .to(\'http://www.google.com/?q=camel&amp;bridgeEndpoint=true&amp;throwExceptionOnFailure=false\'); behaves properly and removes them   ',0
'camel-quartz - Using underscore in group name does not work   \tThe group name is not properly resolved if people specify a invalid host name  such as with underscores.If so we should fallback and grab the group name by grabbing the string until the first path separator char.See nabblehttp://camel.465427.n5.nabble.com/Camel-Quartz-consumer-doesn-t-allow-underscores-tp5063734p5063734.html   ',0
'camel-aws can allow SNAPSHOT transitive dependencies   \tThe camel-aws component depends on aws-java-sdk which has several dependencies defined using version ranges. The problem with version ranges is that they can introduce SNAPSHOT versions if they are available on your system which is not so good... in my case I had this http://download.java.net/maven/2/com/sun/mail/javax.mail/1.4.5-SNAPSHOT/javax.mail-1.4.5-SNAPSHOT.jar jar in my local repo so camel-aws promptly used that SNAPSHOT lib.   ',0
'After restarting route a camel-quartz component fires right away (and it shouldn\'t)   \tI am adding a new QuartzRouteRestartTest that demonstrates this issue. Not only a message is fired right after restart  but the scheduled times are messed up as well. I tried to keep the fire interval as low as possible  but it has to be large enough to demonstrate the problem. So I went down to 0/5 (fire every five sec)  but it\'s more obvious with 0/10 or 0/15  the trigger starts firing at the wrong time.   ',0
'camel-eventadmin do not work   \tChristian-Muellers-MacBook-Pro:bin cmueller$ ./karaf cleankaraf@root&gt; features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9.0/xml/featureskaraf@root&gt; features:install camel-eventadminError executing command: Could not start bundle mvn:org.apache.camel/camel-eventadmin/2.9.0 in feature(s) camel-eventadmin-2.9.0: Unresolved constraint in bundle org.apache.camel.camel-eventadmin &#91;59&#93;: Unable to resolve 59.0: missing requirement &#91;59.0&#93; package; (&amp;(package=org.osgi.service.event)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))We have to install the feature eventadmin (from Karaf) first   ',0
'Remove ProducerCache from CamelContext service list when shutting down a route   \tIf people add routes dynamic and remove the routes later on  we need to remove services which may have been added to the CamelContext services list. For example the ProducerCache by SendProcessor etc.This will ensure that the ProducerCache can be GC\'ed.   ',0
'BAM - database constraint violation when restaring application   \tTake BAM example from http://camel.apache.org/bam-example.html (or any other one  it doesn\'t matter).Here is the one I\'m using: ActivityBuilder request = activity(\'eaiBroker:topic:SOME_TOPIC?concurrentConsumers=1\').name(\'Request\') .correlate(xpath(\'/MessageRequest/@Id\').stringResult()); ActivityBuilder response = activity(\'eaiBroker:topic:SOME_OTHER_TOPIC?concurrentConsumers=1\').name(\'Response\') .correlate(xpath(\'MessageResponse/@Id\').stringResult()); response .starts().after(request.completes()) .expectWithin(seconds(15)) .errorIfOver(seconds(30)) .to(\'log:com.eai?level=error\'); First run of the application and everything works. Restart application and try to activate one of BAM rules  there will be an exception that database constraint has been violated. Every time application is started  Camel tries to do following sql insertinsert into CAMEL_ACTIVITYDEFINITION (name  processDefinition_id  id) values (?  ?  ?)but name columne must be unique in CAMEL_ACTIVITYDEFINITION .Workaround for this is to purge BAM tables every time you want to restart the application  but it\'s not a solution.   ',0
'xpath expression with $header with saxon may throw exception if header did not exist   \tSee CAMEL-747We should return an empty String instead of a Void.class  as this works with both JDK + Saxon XPathEngine.Saxon does not work with the Void.class.   ',0
'Timed out Exchanges should be removed from seda queues   \tWhen the SedaProducer times out and stops waiting for an Exchange to be processed it should remove it from the queue as well. Same applies to the vm: component.   ',0
'CamelContext autoStartup=false and starting context programmatically doesnt work   \tIf a &lt;camelContext&gt; is set to autoStartup=false and then later tried to start it via code or JMX doesn\'t start routes associated with it.   ',0
'Parameter binding not working with BeanExpression   \tThe parameter binding options available in camel-2.9.0 do not work for BeanExpression. The reason is the fake ognl parser that gets confused about the syntax. We need to align the two scenarios and probably replace the ognl like parsing.   ',0
'camel-blueprint - Using namespaces with xpath does not work as the namesapces is not parsed and injected into the camel model   \tUsing xpath predicates in a blueprint xml file does not work if you use custom namespaces  as the camel-blueprint component does not detect the custom namespaces  as camel-spring does.   ',0
'ManagedBrowsableEndpoint are broken   \tManagedeBrowsableEndpoint are broken which means any component that inherit ManagedBrowsableEndpoint have errors as well. Please see the link below which will have error screen shot of queueSize JMX operations.http://camel.465427.n5.nabble.com/JMX-queue-size-operation-fails-Camel-2-9-0-td5233089.html   ',1
'exchange.getIn().getBody(.class) throws an exception for Jaxb model objects   \texchange.getIn().getBody(Foo.class);should return a Foo instance or null  if no suitable type converter is available. The java doc says: \'return the body of the message as the specified type  or &lt;tt&gt;null&lt;/tt&gt; if not possible to convert\'If Foo is an Jaxb object model  this method call: throws an org.xml.sax.SAXParseException if the body content is a string throws a javax.xml.bind.UnmarshalException if the body content is another Jaxb model objectPlease have a look on the attached sample eclipse project.   ',0
'Camel 2.9.0 incapable of working with \% in endpoint URIs   \tIn the class org.apache.camel.util.URISupport which will be used to resolve endpoints (DefaultCamelContext#normalizeEndpointUri) the method parseParameters will be called.At first the java.net.Uri#getQuery will be called with according to the javadoc \'Returns the decoded query component of this URI\' returns a decoded URI. If that fails the java.net.Uri#getSchemeSpecificPart method will be called which according to the javadoc \'Returns the decoded scheme-specific part of this URI.\' returns a decoded URI.So to summarize we get in any case a decoded URI.This URI will then be than in the method org.apache.camel.util.URISupport#parseQuery(String) again decoded with java.net.URLDecoder#decode(String String).This code leads to the following behaviour: If a \% is properly encoded with \%25test the \%25test will be substituted by the first call to \%test and the decoded again which leads to an Exception.In the http://svn.apache.org/viewvc?view=revision&amp;revision=1166508 commit you can see that the \% was uncommented from org.apache.camel.util#UnsafeUriCharactersEncoder. Maybe this is related.However... Double encoding of URIs seems quite odd. With any URI char there is no issue with that. But with \% the \% will be decoded again  which makes a \% unusable in Camel.   ',0
'Cannot use xquery predicate in filter after an xpath splitter.   \tAfter upgrading from 2.5.0 to 2.9.0 using xqury predicate after an xpath filter throws java.lang.ClassCastException: net.sf.saxon.tinytree.TinyElementImpl cannot be cast to net.sf.saxon.om.DocumentInfo . Attached unit test doesn\'t fail in camel 2.5.0.from(\'direct:xpath\') .split(xpathsplitter) .filter().xquery(\'//record&#91;type=2&#93;\') .to(\'mock:result\'); See nabble discussion http://camel.465427.n5.nabble.com/Unit-test-fails-after-upgrading-to-2-7-1-Cannot-use-xquery-expression-after-xpath-td4422582.html   ',1
'Problem Removing Endpoints   \t(see context on the users@ list)When using removeEndpoints(String) with a pattern  some endpoints (like jms topics) are reported as removed but they are not.   ',0
'Spring security example does not work   \tWhen you try to run the spring security example and access it from a browser you get 404. I debugged into it and the reason is that the camel context does not attach to the camel http servlet.   ',0
'ManagedPerformanceCounterMBean should extend ManagedCounterMBean   \tManagedPerformanceCounterMBean does not extend ManagedCounterMBean  while ManagedPerformanceCounter does extend ManagedCounter.   ',0
'BindyDataFormat should not use the default encoding   \tHere is the mail thread&#91;1&#93; which discuss about it.&#91;1&#93;http://camel.465427.n5.nabble.com/Bindy-CSV-parser-uses-default-encoding-tp5456136p5456136.html   ',0
'DigitalSignatureEndpoint not clearing headers after verify   \tThe DigitalSignatureEndpoint has a clearHeaders option that is supposed to clear headers after a verify operation. However that is not working because the headers cleared are not the actual header values  but the name of the java String fields  which is irrelevant at runtime.The default value of the clearHeaders should also be true  so that Camel does not leave debris in the Exchange after a verify operation.   ',0
'Error handler not called when recipient list has non existing endpoint   \tGiven this route onException(Exception.class) .handled(true) .to(\'mock:dead\'); from(\'direct:start\') .recipientList(constant(\'fail:endpoint\')) .to(\'mock:result\');You would assume the on exception will handle the exception from the recipient list with the non existing endpoint.This is not the case. We should let recipient list detect and let the error handler handle it.   ',0
'Camel simple language wrong working with real number   \tI compute real number in route: &lt;setBody&gt;0.02&lt;/setBody&gt;After that I want to filter: &lt;filter&gt;&lt;simple&gt;${body} &gt; 0 &lt;/simple&gt; ... &lt;/filter&gt;This expression return false for value in body = 0.02   ',0
'simple without embedded text results in an NPE   \tAfter switching to 2.9 the following results in a NPE&lt;camel:setBody&gt; &lt;camel:simple&gt;&lt;/camel:simple&gt;&lt;/camel:setBody&gt;I\'m not sure if it is now required to have something in the content of the simple element. I used it for setting the body element to an empty string before (worked with 2.8.1)   ',0
'Streaming splitter ignores exception handling   \tIf an exception occurs on the next() call of an Iterator in a streaming splitter  the exception is never propagated to the exception or the error handler. This will lead to improper route termination  and inifite rollback/retry cycles.I attached the minimal test case demonstrating the issue.   ',0
'CxfProducer should release the CXF when the Producer is stopped.   \tCXF ClientImpl has the requestContext need to be cleaned when the CxfProducer is stopped.If we don\'t call the Client.destory() method  the requestContext will cause the memory leak.   ',0
'Camel route with bean element sends on startup invalid message to target route that is represented by a proxy who exposes route   \tI expose a Camel route with a direct endpoint defined in an OSGi bundle with the &lt;camel:proxy&gt; and &lt;osgi:service&gt; tags. The reason for this is to be able to call this direct-route in other routes (defined in other bundles) as a \'sub-route\' directly as bean &#91;.bean(routeproxy  &quot;method&quot;)&#93;. This works as expected.But on route startup the toString method is called on the route (for a description) which is propagated to the elements of the route. Therefore my bean-element (which is the direct-route-proxy) receives the toString call and the CamelInvocationHandler converts this toString call to a message and sends it to the direct-route. This more or less empty message is of course not valid for the target route and produces an error on bundle startup. Shouldn\'t the toString call be suppressed by the proxy  since toString is not part of the Interface the proxy represents? Or is my approach a not recommended or problematic approach?Parts of stacktrace to show the way from route startup to the produced message=&gt; route receives \'empty\' message&#91;omitted&#93; at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:45) at org.apache.camel.component.bean.CamelInvocationHandler.invoke(CamelInvocationHandler.java:65) at $Proxy568.toString(Unknown Source) at sun.reflect.GeneratedMethodAccessor406.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597)=&gt; toString call is converted to message and sent to route&#91;omitted&#93; at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy583.toString(Unknown Source) at org.apache.camel.component.bean.ConstantBeanHolder.toString(ConstantBeanHolder.java:48)=&gt; toString called on bean-element in route (bean is a proxy for a route) &#91;omitted&#93; at java.lang.String.valueOf(String.java:2826) at java.lang.StringBuilder.append(StringBuilder.java:115) at org.apache.camel.impl.EventDrivenConsumerRoute.toString(EventDrivenConsumerRoute.java:46) at org.apache.camel.management.mbean.ManagedRoute.&lt;init&gt;(ManagedRoute.java:41) at org.apache.camel.management.DefaultManagementLifecycleStrategy.onRoutesAdd(DefaultManagementLifecycleStrategy.java:368) at org.apache.camel.impl.RouteService.doStart(RouteService.java:109)=&gt; Route startup   ',0
'Memory leak in SedaComponent if adding and removing a lot of seda endpoints with different queue names   \tIf you add and remove a lot of seda endpoints with different queue names  then the seda component may keep references to non used queues.   ',0
'Memory leak in TimerListener if JMX enabled   \tIf adding and removing a lot of routes  and you have JMX enabled with load statistics  then it may leak memory  as the route listener is not properly removed when the route is removed  due invalid equals/hashCode.   ',0
'Bug: Unique Endpoints Leaking in DefaultInflightRepository   \tIf you have an endpoint protocol which uses unique URIs you will leak Strings in the HashMap stored in the DefaultInflightRepository (org.apache.camel.impl.DefaultInflightRepository)It seems there is a reference counting scheme in place  but it doesn\'t do a remove until the \'stop\' method is called to shut the system down. We are running XMPP endpoints  which use a protocol like xmpp://someaccount@domain/password?to=someOtherAccountWhen there are 10 million accounts  not all of which are active  but all of which may message at some time or another  no references are removed to the endpointCount.When the count becomes 0  the reference should be removed and the size method will still return the appropriate result.Please be careful in the implementation to synchronize on some object (perhaps the AtomicInteger) reflecting a read/write lock on the endpoint count modification.   ',0
'npe in camel 2.9.1 validator   \tvalidator component seems broken in 2.9.1. Gives you a npe when loading xsd from classpath during unittesting.See http://camel.465427.n5.nabble.com/npe-in-camel-2-9-1-validator-tc5540894.htmlprefixing with classpath eg. &lt;to uri=\'validator:classpath:BroadcastMonitor.xsd\' /&gt; doesn\'t help.   ',1
'camel-jt400 - Parameter length when doing Program Call issue   \tWhen the length of each parameter of a program.PGM is greater than the length of his values  the parameters are setted incorrectly.Example:Input of program.pgm:param1 -&gt; A5 (alphanumeric with length 5) param2 -&gt; A5 (alphanumeric with length 5) When the String array is {\'123\'  \'456\'} the values are setted on each parameter as:param1 = 12345param2 = 6   ',0
'Incorrect feature definition for camel-fop   \t   ',0
'Timer endpoint getState does not work in JMX   \tThe getState attribute does not work.   ',0
'CxfBeanDestination should copy the in message header to the out message   \tUser complains about can not access any other headers after the cxfbean in this mail thread&#91;1&#93;.We should let the CxfBeanDestination copy the in message header before it sends the message back.&#91;1&#93;http://camel.465427.n5.nabble.com/Camel-CXF-Drops-Headers-tt5590792.html   ',0
'RMI endpoint doesn\'t handle nested exception and raise CamelRuntimeException instead of RemoteException   \tWhen we have a route looking like:&lt;from uri=\'rmi:...\'/&gt;&lt;to uri=\'myBean\'/&gt;if an exception is raised on myBean  the RMI endpoint ignores the exception described in the RemoteInterface and always raises a RuntimeCamelException nesting the original exceptions.More over  RuntimeCamalException should not be raised by the RMI endpoint. It would make more sense to raise a RemoteException  as we are on a RMI endpoint.   ',0
'bean component - @Handler should take precedence in a bean that implements Predicate   \tIf you use a bean in a Camel route  and have not specified the method name to invoke. Then Camel has to scan for suitable methods to use. And for that we have the @Handler annotation which should take precedence in this process. However if the bean implements Predicate  or Processor  then Camel will use that. However the @Handler should be used instead  as this is what the end-user expects. And also what we tell in the docs.   ',0
'OnException - Handler or Continued predicate is invoked twice per exception   \tSee CAMEL-5139When using handled(predicate) or continued(predicate) those is evaluated twice per exception. We should only do this once  which is what the end user would normally except.   ',0
'Backmerge CAMEL-5018 to the Bindy component for non-required fields   \tThe issue  originally reported via CAMEL-5133  is to backmerge the CAMEL-5018 fix into the 2.9.x branch.I merged revision 1292164 into my local 2.9.x branch that I had updated with two new test cases.Before merge one test failed  after merge all tests were successfull.Attaching the updated model and tabtest.&#8212; Revision: 1292164Author: ningjiangDate: den 22 februari 2012 08:49:40Message:CAMEL-5018 support the set the default value on the field of bindy CVSModified : /camel/trunk/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyCsvFactory.javaModified : /camel/trunk/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/annotation/DataField.javaModified : /camel/trunk/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySimpleCsvUnmarshallTest.javaModified : /camel/trunk/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/simple/oneclass/Order.java   ',0
'JMX issues on WebSphere   \tWhile setting up a Camel web application for WebSphere (7) I encountered two issues1. Documentation: the Camel JMX docs proposes the following settings for WebSphere:&lt;camel:jmxAgent id=\'agent\' createConnector=\'true\' mbeanObjectDomainName=\'org.yourname\' mbeanServerDefaultDomain=\'WebSphere\'/&gt;This registers the beans with the PlatformMbeanServer instead of the WebSphere MBean server. The following setup works better:&lt;camel:jmxAgent id=\'agent\' createConnector=\'false\' mbeanObjectDomainName=\'org.yourname\' usePlatformMBeanServer=\'false\' mbeanServerDefaultDomain=\'WebSphere\'/&gt;2. For each Camel route  the same Tracer and DefaultErrorHandler MBeans are tried to be registered over and over again. Because WebSphere changes the ObjectNames on registration  server.isRegistered(name); in DefaultManagementAgent#registerMBeanWithServer always returns false  which causes the MBean to be re-registered  which again cause Exceptions  e.g.14:35:48 198 [WebContainer : 4] [] WARN - DefaultManagementLifecycleStrategy.onErrorHandlerAdd(485) | Could not register error handler builder: ErrorHandlerBuilderRef[CamelDefaultErrorHandlerBuilder] as ErrorHandler MBean.javax.management.InstanceAlreadyExistsException: org.apache.camel:cell=wdf-lap-0319Node01Cell name=\'DefaultErrorHandlerBuilder(ref:CamelDefaultErrorHandlerBuilder)\' context=wdf-lap-0319/camelContext type=errorhandlers node=wdf-lap-0319Node01 process=server1 at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:465) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.internal_addObject(DefaultMBeanServerInterceptor.java:1496) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:975) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:929) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:324) at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:494) at com.ibm.ws.management.PlatformMBeanServer.registerMBean(PlatformMBeanServer.java:484) at org.apache.camel.management.DefaultManagementAgent.registerMBeanWithServer(DefaultManagementAgent.java:320) at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:236)...The web application starts up  but with a lot of exceptions in the log.Proposal:Instead of using a Set&lt;ObjectName&gt; for mbeansRegistered  use a Map&lt;ObjectName  ObjectName&gt; where the key is the \'Camel\' ObjectName and the value is the actually deployed ObjectName.I will provide a patch that illustrates the idea.   ',0
'spring.schema is not up to date   \tThe URI of the Spring schema has been updated in Camel 2.9.1 and 2.8.4:http://camel.apache.org/schema/cxf/We can see that starting from 2.9.1 and 2.8.4  we suffix the schema with -spring or -blueprint.However  the spring.schema resource file has not been updated with this suffix.   ',0
'Strange warning appears: WARN  org.apache.camel.processor.DeadLetterChannel - Cannot determine current route from Exchange with id   \tThe warning gets printed but other than that  everything seems to work. (I hope)12.04.19 10:34:26:463 [drisCamelContext JmsConsumer[dispatchHttpQueue] #4] WARN org.apache.camel.processor.DeadLetterChannel - Cannot determine current route from Exchange with id: ID-dris-ixor-be-42350-1334569164986-0-1052464  will fallback and use first error handler.12.04.19 10:34:26:463 [drisCamelContext JmsConsumer[dispatchHttpQueue] #4] WARN distribution.kv78.dispatch - Failed delivery (attempt = 199) : org.apache.http.conn.HttpHostConnectException: Connection to http://81.82.232.183:9292 refused - 0299c1d9 - KV8passtimes - 81.82.232.183:9292 - queue_dispatchHttpQueue_ID_dris.ixor.be-36583-1334569163882-4_1_24_1_1007When looking up the log statement in RedeliveryErrorHandler  I find this:else if (!exceptionPolicy.getErrorHandlers().isEmpty()) { // note this should really not happen  but we have this code as a fail safe // to be backwards compatible with the old behavior log.warn(\'Cannot determine current route from Exchange with id: {}  will fallback and use first error handler.\'  exchange.getExchangeId()); processor = exceptionPolicy.getErrorHandlers().iterator().next(); }So it shouldn\'t happen but it happens after all...Here is the route causing the warning. I think it started when I made the route transacted. As shown in the log snippet above  the warning is printed when the HTTP endpoint throws an IOException (route ENDPOINT_DISPATCH) from(ENDPOINT_DISPATCH_QUEUE + \'?cacheLevelName=CACHE_CONSUMER&amp;\' + // necessary for message groups to work \'concurrentConsumers={{hermes.dris.distribution.kv78.concurrentOutgoingHttpDispatchers}}&amp;\' + \'maxConcurrentConsumers={{hermes.dris.distribution.kv78.maxConcurrentOutgoingHttpDispatchers}}\') .routeId(ROUTE_ID_DISPATCH_QUEUE) .onException(Throwable.class) // transacted routes override the default error handler // to avoid the message going to the the ActiveMQ DLQ  forward to our DLQ here .to(ENDPOINT_DLQ) .handled(true) .end() .transacted() // determine action // the timingPointSequencer will check what needs to happen with the message .beanRef(\'timingPointSequencer\'  \'handleDispatch\') .choice() // normal situation  the message can be sent .when(header(TimingPointSequencer.HEADER_ACTION).isEqualTo(constant(TimingPointSequencer.ACTION_PROCEED))) .to(ENDPOINT_DISPATCH) // delay message  usually because of previous errors for this destination .when(header(TimingPointSequencer.HEADER_ACTION).isEqualTo(constant(TimingPointSequencer.ACTION_REENQUEUE))) .log(LoggingLevel.INFO  \'Re-enqueuing\' + MESSAGE_LOG_FORMAT) .to(ENDPOINT_DISPATCH_QUEUE) .otherwise() .log(LoggingLevel.ERROR  \'No action header set ???\' + MESSAGE_LOG_FORMAT) .to(ENDPOINT_DLQ) .end() .end(); from(ENDPOINT_DISPATCH) .routeId(ROUTE_ID_DISPATCH) .onException(IOException.class) // in case of IO exceptions  the message is always re-enqueued // reschedule parameters are set by the timingPointSequencer .beanRef(\'timingPointSequencer\'  \'handleFailure\') .log(LoggingLevel.WARN  \'Failed delivery (attempt = ${in.header.tpSecAttempt}) : ${in.header.CamelExceptionCaught}\' + MESSAGE_LOG_FORMAT) .to(ENDPOINT_DISPATCH_QUEUE) .handled(true) .end() // clear http headers to avoid interference from other http endpoints .removeHeaders(\'CamelHttp*\') .setHeader(Exchange.HTTP_URI  simple(\'http://${header.\' + HEADER_DESTINATION_ADDRESS + \'}\')) .setHeader(Exchange.HTTP_PATH  simple(\'${properties:hermes.dris.distribution.kv78.controller.urlpath}\')) .setHeader(Exchange.CONTENT_TYPE  constant(\'application/xml\')) .setHeader(Exchange.CONTENT_ENCODING  constant(\'gzip\')) // use gzip compression .log(verboseLoggingLevel  \'Sending request to ${in.header.CamelHttpUri}/${in.header.CamelHttpPath}\' + MESSAGE_LOG_FORMAT) // use multicast instead of a pipeline  or the audit log will contain the http response! .multicast() .stopOnException() .to(ENDPOINT_TIMINGPOINT_HTTP + \'?httpClientConfigurerRef=timingPointHttpClientConfigurer&amp;headerFilterStrategy=#distributionHttpHeaderFilterStrategy\'  ENDPOINT_AUDIT_OUTGOING) .end() .beanRef(\'timingPointSequencer\'  \'handleSuccess\');   ',0
'SftpChangedExclusiveReadLockStrategy does not check the correct field to determine if a file is changing   \tI have recently upgraded from Camel 2.7 to a more recent version. I can confirm that the bug is still in trunk. In Camel 2.7  there was a generic FileChangedExclusiveReadLockStrategy. This checked the modification time of the file using GenericFile.lastModified. This field was set by SftpComponent#asRemoteFile as file.getAttrs().getMTime() * 1000. In Camel 2.8 onwards  this behaviour is implemented by SftpChangedExclusiveReadLockStrategy. This incorrectly (to my mind) retrieves the timestamp on line 67 using: newLastModified = f.getAttrs().getATime();Taking the atime of the file doesn\'t make a great deal of sense to me; on a POSIX compliant filesystem  the atime will be incremented every time the file is polled  meaning that this strategy will never be able to mark a file as unchanged. While some filesystems are mounted nowadays as noatime or relatime  the mtime is still absolutely the safest mechanism to determine if something is writing to a target file. The impact of this bug is that we cannot reliably poll files from a remote SFTP server.   ',1
'initialDelay and idempotentRepository Endpoint URI parameters fail to be read from Camel context when Turkish language is set in host operating system.   \torg.apache.camel.util.ObjectHelper.capitalize() method uses native JAVA String.toUpperCase() method (without parameters)  which performs capitalization according to operating system current language and regional settings configuration. When these are set to Turkish  a call to capitalize() method  with a String starting with \'i\' as parameter  returns Turkish dotted \'I\' as capitalized \'i\'  which is wrong according to programmatic language and expected behavior.This behaviour impacts  at least  in Endpoint URI parameters which names start with char \'i\'  such as \'idempotentRepository\' and \'initialDelay\' URI parameters. When setter/getter methods lookup is performed for these parameters  wrong method names are returned due to ObjectHelper.capitalize() method. This method uses standard Java String.toUpperCase() function which returns a dotted \'I\' instead of dotless \'I\' for idempotentRepository and initialDelay parameters.To solve this  the attached patch consists of refactoring ObjectHelper.capitalize() method. Instead of calling toUpperCase() method  it is called toUpperCase(Locale.ENGLISH) to enforce \'I\' character (dotless) return.   ',0
'Potential dead-lock when shutting down Camel with NotifyBuilder doing notication   \tSee nabblehttp://camel.465427.n5.nabble.com/Gracefull-shutdown-timeouts-due-to-NotifyBuilder-blocks-on-context-tp5654048p5654048.htmlWe should avoid the synchronized getRoutes method which is really not needed.   ',0
'Loop causes NullPointerException on error   \tThe following context will cause NullPointerException. &lt;routeContext id=\'myCamelContext\' xmlns=\'http://camel.apache.org/schema/spring\'&gt;  &lt;route&gt; &lt;from uri=\'jms:myQueue\'/&gt; &lt;onException&gt; &lt;exception&gt;org.xml.sax.SAXParseException&lt;/exception&gt; &lt;redeliveryPolicy maximumRedeliveries=\'2\'/&gt; &lt;handled&gt;&lt;constant&gt;true&lt;/constant&gt;&lt;/handled&gt; &lt;to uri=\'log:camelfatal?showAll=true&amp;multiline=true&amp;level=ERROR\'/&gt;  &lt;/onException&gt; &lt;loop copy=\'true\'&gt; &lt;constant&gt;3&lt;/constant&gt; &lt;inOnly uri=\'smtp://you_can_leave_this_unchanged\'/&gt; &lt;/loop&gt; &lt;/route&gt; &lt;/routeContext&gt;The callstack on the NullPointerException:Daemon Thread [Camel (appServerCamelContext) thread #1 - JmsConsumer&#91;emailOutbox&#93;] (Suspended (exception NullPointerException))  DefaultErrorHandler(RedeliveryErrorHandler).processErrorHandler(Exchange  AsyncCallback  RedeliveryErrorHandler$RedeliveryData) line: 262  DefaultErrorHandler(RedeliveryErrorHandler).process(Exchange  AsyncCallback) line: 223  RouteContextProcessor.processNext(Exchange  AsyncCallback) line: 45  RouteContextProcessor(DelegateAsyncProcessor).process(Exchange  AsyncCallback) line: 90  DefaultChannel.process(Exchange  AsyncCallback) line: 304  AsyncProcessorHelper.process(AsyncProcessor  Exchange  AsyncCallback) line: 73  LoopProcessor(DelegateAsyncProcessor).processNext(Exchange  AsyncCallback) line: 99  LoopProcessor.process(Exchange  AsyncCallback  AtomicInteger  AtomicInteger) line: 103  LoopProcessor.process(Exchange  AsyncCallback) line: 74  AsyncProcessorHelper.process(AsyncProcessor  Exchange  AsyncCallback) line: 73  InstrumentationProcessor(DelegateAsyncProcessor).processNext(Exchange  AsyncCallback) line: 99  InstrumentationProcessor(DelegateAsyncProcessor).process(Exchange  AsyncCallback) line: 90  InstrumentationProcessor.process(Exchange  AsyncCallback) line: 71  AsyncProcessorHelper.process(AsyncProcessor  Exchange  AsyncCallback) line: 73  TraceInterceptor(DelegateAsyncProcessor).processNext(Exchange  AsyncCallback) line: 99  TraceInterceptor(DelegateAsyncProcessor).process(Exchange  AsyncCallback) line: 90  TraceInterceptor.process(Exchange  AsyncCallback) line: 91  AsyncProcessorHelper.process(AsyncProcessor  Exchange  AsyncCallback) line: 73  DefaultErrorHandler(RedeliveryErrorHandler).processErrorHandler(Exchange  AsyncCallback  RedeliveryErrorHandler$RedeliveryData) line: 333  DefaultErrorHandler(RedeliveryErrorHandler).process(Exchange  AsyncCallback) line: 223  RouteContextProcessor.processNext(Exchange  AsyncCallback) line: 45  RouteContextProcessor(DelegateAsyncProcessor).process(Exchange  AsyncCallback) line: 90  DefaultChannel.process(Exchange  AsyncCallback) line: 304  RouteContextProcessor.processNext(Exchange  AsyncCallback) line: 45  RouteContextProcessor(DelegateAsyncProcessor).process(Exchange  AsyncCallback) line: 90  UnitOfWorkProcessor.processAsync(Exchange  AsyncCallback  UnitOfWork) line: 150  UnitOfWorkProcessor.process(Exchange  AsyncCallback) line: 117  RouteInflightRepositoryProcessor.processNext(Exchange  AsyncCallback) line: 50  RouteInflightRepositoryProcessor(DelegateAsyncProcessor).process(Exchange  AsyncCallback) line: 90  AsyncProcessorHelper.process(AsyncProcessor  Exchange  AsyncCallback) line: 73  InstrumentationProcessor(DelegateAsyncProcessor).processNext(Exchange  AsyncCallback) line: 99  InstrumentationProcessor(DelegateAsyncProcessor).process(Exchange  AsyncCallback) line: 90  InstrumentationProcessor.process(Exchange  AsyncCallback) line: 71  AsyncProcessorHelper.process(AsyncProcessor  Exchange) line: 99  InstrumentationProcessor(DelegateAsyncProcessor).process(Exchange) line: 86  EndpointMessageListener.onMessage(Message) line: 104  DefaultJmsMessageListenerContainer(AbstractMessageListenerContainer).doInvokeListener(MessageListener  Message) line: 560  DefaultJmsMessageListenerContainer(AbstractMessageListenerContainer).invokeListener(Session  Message) line: 498  DefaultJmsMessageListenerContainer(AbstractMessageListenerContainer).doExecuteListener(Session  Message) line: 467  DefaultJmsMessageListenerContainer(AbstractPollingMessageListenerContainer).doReceiveAndExecute(Object  Session  MessageConsumer  TransactionStatus) line: 325  DefaultJmsMessageListenerContainer(AbstractPollingMessageListenerContainer).receiveAndExecute(Object  Session  MessageConsumer) line: 263  DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener() line: 1058  DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop() line: 1050  DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run() line: 947  ThreadPoolExecutor$Worker.runTask(Runnable) line: 886  ThreadPoolExecutor$Worker.run() line: 908  Thread.run() line: 662   ',0
'HazelcastComponent.doStop bombing out   \tI am setting up an own hazelcast instance on HazelcastComponent  it is created by Spring the problem is when HazelcastComponent.doStop is called  a NullPointerException is throw  becausecreateOwnInstance is null.   ',1
'camel-netty can\'t distinguish between Sharable and Unsharable codecs   \tCamel-netty uses general configuration model for referenced encoders/decoders for channel pipelines  see DefaultServerPipelineFactory. That is  create encoder/decoder objects at configuration parsing time and store them in a list  then use them when a pipeline is established. However  this will make encoder/decoder objects shared among different pipelines  that may cause data conflicts  when the encoder/decoder is not Sharable(has object status/not annotated as @Sharable)  e.g. a LengthFieldBasedFrameDecoder.Although we can avoid the problem by totally writing a new serverpipelinefactory for our apps  several problem still remains  please see detailed description and testcase for this bug at:http://camel.465427.n5.nabble.com/camel-netty-bug-and-the-need-of-best-practice-for-creating-referenced-parameter-object-on-looking-up-td5627926.html   ',0
'Camel 2.9.2 jetty component no longer works with Jetty 7   \tWhen attempting to create a camel-jetty endpoint in Camel 2.9.2  the following exception is thrown:java.lang.NoSuchMethodError: org.eclipse.jetty.servlet.ServletContextHandler.addFilter(Lorg/eclipse/jetty/servlet/FilterHolder;Ljava/lang/String;Ljava/util/EnumSet;)Vat org.apache.camel.component.jetty.JettyHttpComponent.enableMultipartFilter(JettyHttpComponent.java:407) at org.apache.camel.component.jetty.JettyHttpComponent.connect(JettyHttpComponent.java:325) at org.apache.camel.component.http.HttpEndpoint.connect(HttpEndpoint.java:148) at org.apache.camel.component.http.HttpConsumer.doStart(HttpConsumer.java:56) at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:1707) at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:1979) at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:1934) at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1862) at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1646) at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1533) at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1420) at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179) at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1388)...This appears to be a regression of a caused by the this merge from trunk  which I suspect requires Jetty 8 to be used.Creating the endpoint under 2.9.1 works fine.   ',1
'LDAP Component lose headers   \tWhen we call to a LDAP endpoint  the result is returned in the Out body and we lose the IN headers (see http://camel.465427.n5.nabble.com/LDAP-Component-lose-headers-td5696602.html). A fix seems relatively easy. The solution could be add this line inside the process() method in LdapProducer.java exchange.getOut().setHeaders(exchange.getIn().getHeaders());   ',0
'Incorrect Content-Length returned for converted result objects with Unicode characters   \tThe camel-servlet component responds with an incorrect http Content-Length header  causing the HTTP client to retreive a incomplete response  when the body of the out message is of a POJO type and is converted into a string that contains unicode characters.For example  the following route returns \'B?e W?r\'  but should return \'B?e W?rld\'.from(\'servlet:///testUnicodeWithObjectResponse?matchOnUriPrefix=true\')  .process(new Processor() { public void process(Exchange exchange) throws Exception {  String contentType = exchange.getIn().getHeader(Exchange.CONTENT_TYPE  String.class); exchange.getOut().setHeader(Exchange.CONTENT_TYPE  contentType + \'; charset=UTF-8\');  }}) .transform(constant( new Object(){ @Override public String toString() Unknown macro: { return &quot;B?e W?rld&quot;; }  } ));The attached patch contains a fix for the problem and a test to reproduce the problem.   ',0
'Jetty client can corrupt streams if used in a bridge mode (proxy)   \tThe jetty http producer should favor streams over Strings  which otherwise could cause the payload to be corrupted if doing a bridge mode  eg from jetty to jetty.   ',0
'camel-stream overwrites files instead of appending   \tWhen a file stream is used with camel-stream  the file is not opened in append mode  therefore the file is overwritten with every message  ending up with just the last message  all others are lost.This contrasts with the documented behavior.   ',0
'camel-stream should not close stream after each write   \tThe StreamProducer in camel-stream closes the stream after every write  which significantly affects performance.   ',0
'EventNotifiers don\'t work under Blueprint   \tEventNotifiers don\'t work with Blueprint Camel Contexts. Testing on latest 2.10-SNAPSHOT  updated on 22 May 16:45 GMT.After some debugging  it looks like the bean lookup performed on line 202 of AbstractCamelContextFactoryBean.afterPropertiesSet() triggers the initialization of the CamelContext as part of the lookup. As part of the init  all services are started  including the ManagementContext and its EventNotifiers (which we were just looking up).EventNotifiers are then added but never started because they came in late.   ',0
'camel-sql - Should support \% sign in query   \tSee nabbleWe should look into supporting the \% sign in the sql component.It should possible be less strict in uri validation as people can enter SQL queries. And to make it easy  they should just be able to dump in the SQL as is.We should also consider adding an option to refer to a SQL that is enlisted in the registry.Also people should be able to externalize their SQL in a .properties file and have Camel lookup that using the {{ }} notation   ',1
'Camel features file doesn\'t validate   \tIf you execute$camel/platforms/karaf&gt;mvn clean install -Pvalidateit fails in the feature definition validation for the following components:camel-quickfixcamel-cxfcamel-cdi   ',0
'camel-jms - Exception thrown from destination resolver should trigger Camel exception handling   \tSee nabblehttp://camel.465427.n5.nabble.com/Camel-Error-handling-throwing-exception-not-moving-to-error-queue-tp5714076.htmlThe jms producer should catch unhandled exceptions from the Spring JMS  such as its destination resolver. And ensure the callback is invoked  to let Camel error handler be triggered.   ',0
'Shutting down one of the contexts breaks async redeliveries in others: RedeliveryErrorHandler has static reference to a thread pool   \tErrorRedeliveryHandler has static reference to a thread pool used for scheduling retries  thus when it\'s stopped it stops a pool used by other handler instances(e.g. from other contexts)  thus they now can\'t redeliver.   ',0
'Mail component does not work as expected (Email Deletion is partially broken et Disconnect does not work well)   \tThe way disconnect is implemented causes issues with some other options of the consumer. For instance \'disconnect\' option is not compatible with \'delete\' option.The delete action is done in completion action (processCommit: line 185). On line 305  processCommit method checks if folder is open  but \'disconnect\' option force folder at null value at the end of poll method (Line 149).I guess disconnect method should be called on completion after any other completion actions occured: It is not possible to make completion actions if connection to mail server is closed.The result of the usage of disconnect option and delete option is a NullPointerException on test: \'if (!folder.isOpen())\' statement on line 308.Issue should be always reproductible.I let you fix the priority of the issue  but it is an annoying issue even if there is a workaround by disabling disconnect option ...   ',0
'CXF Transport loses HTTP Matrix parameters   \tDefaultCxfMesssageMapper (note the typo - to be fixed in a follow-up JIRA) wrongly initializes CXF Message Message.REQUEST_URI property with the value of Camel Exchange.HTTP_PATH  even though Camel Exchange.HTTP_URI is available.The net effect is that the HTTP matrix parameters if any attached to the last HTTP path segment are lost. Another side-effect is that Exchange.HTTP_PATH will contain the decoded value (done at HTTPServletRequest level) which can lead to the matching issues at the JAX-RS level.A simple patch is attached   ',0
'Threads EIP hangs Junit4 tests using adviceWith   \tIf the  threds()  DSL keyword is used in a route and a Junit4 test is performed  the test hangs indefenitely.The issue is descibed here:http://camel.465427.n5.nabble.com/Threads-EIP-hangs-Unit-Tests-JUnit4-td5715031.htmlplease find attached a self-consistent sample project to reproduce it.   ',0
'MQTT Endpoint does not correctly return the MQTT-Payload   \tMQTT Endpoint does not correctly return the MQTT-Payload. It returns the whole MQTT Message (header + payload).The bug is in line 89 of MQTTEndpoint.java (version 2.11  but also in 2.10) exchange.getIn().setBody(body.getData());must become exchange.getIn().setBody(body.toByteArray()); because getData() ignores the offset (to skip the MQTT header) set in the body byte array.   ',0
'ObjectAlreadyExistsException when \'redeploying\' routes that uses CronScheduledRoutePolicy   \tWhen a route that has a CronScheduledRoutePolicy is removed it does not properly clean up the quartz jobs. The result (apart from possible memory leak) is that if the route is removed from the context and then readded with the same route id a ObjectAlreadyExistsException.This is done using the following steps.1. Stop the route2. Remove the route (and it\'s endpoints) from the context.3. (Re)add the route to the context using the same name.Attached is a testcase that shows the problem.I\'ve solved this by adding my own implementation of onRemove (that calls doStop()) to CronScheduledRoutePolicy.   ',0
'Simple does not handle empty values in predicates properly   \tExample code:...&lt;choice&gt; &lt;when&gt; &lt;simple&gt;${property.someProperty} == \'\'&lt;/simple&gt; ... &lt;/when&gt;...Error message: right must be specified   ',0
'Folder closed too early when working asynchronously   \tWhen using a MailConsumer connected with IMAP to a mailserver and routing the messages to SEDA or any other asynchronous endpoint  it can cause a com.sun.mail.util.FolderClosedIOException or javax.mail.FolderClosedException to happen if you are trying to process the mails/messages attachments.This is because the IMAP folder gets closed at the end of each MailConsumer.poll()I propose to add a new MailConfiguration option \'closeFolder\'  which can override this behaviour.Here\'s an example on how to reproduce the problem. (Scala code  sorry! But it should be self-explanatory)You need a couple of mails with attachments in your mailbox to test this. ~10 mails should be enough to cause the exceptions.import javax.mail.internet.MimeMultipartimport org.apache.camel.impl.DefaultCamelContextimport org.apache.camel.scala.dsl.builder.RouteBuilderimport scala.io.Sourceobject Main {  def main(args: Array&#91;String&#93;): Unit = { val camelContext = new DefaultCamelContext val host = \'imap.gmail.com\' val username = \'*****@gmail.com\' val password = \'*****\' // this will cause com.sun.mail.util.FolderClosedIOException or javax.mail.FolderClosedException val endpoint = \'imaps://\'host\'?password=\'password\'&amp;username=\'username\'&amp;folderName=INBOX&amp;unseen=false&amp;disconnect=false&amp;mapMailMessage=true&amp;connectionTimeout=60000\' // with fix / new feature \'closeFolder\' set to false //val endpoint = \'imaps://\'host\'?password=\'password\'&amp;username=\'username\'&amp;folderName=INBOX&amp;unseen=false&amp;disconnect=false&amp;mapMailMessage=true&amp;connectionTimeout=60000&amp;closeFolder=false\' camelContext.addRoutes( new RouteBuilder { endpoint .to(\'seda:process\') from(\'seda:process?concurrentConsumers=5\') ==&gt; { process { ex =&gt; val att = ex.getIn.getBody.asInstanceOf[MimeMultipart].getBodyPart(1) println(\'Attachment Name:\' + att.getFileName) println(\'Attachment Content:\' + att.getDataHandler.getContent) println(\'Attachment Content:\' + Source.fromInputStream(att.getDataHandler.getInputStream).mkString) Thread.sleep(2500) // simulate some work being done here with the attachment  takes time.. } } } ) camelContext.start() Thread.sleep(45 * 1000) camelContext.stop() }}   ',0
'IOConverter.toInputStream opens a BufferReader which will never be closed   \tIf called with a non-null charset IOConvert.toInputStream returns a InputStream which will never close the opened BufferedReader.   ',0
'camel-jms consumer doesn\'t send back a reply in all cases   \tIn a very simple route consuming from a Camel JMS endpoint receiving InOut exchanges (i.e. JMSReplyTo header present)  the endpoint will not send back replies.This happens because Camel JMS only returns a reply if the OUT message is set. But if the route looks like: consumer =&gt; processor  and Camel doesn\'t find the need to \'weave in\' an implicit Pipeline processor  no one will implicitly take care of mapping the IN message to an OUT message (unless the user knows about these internal aspects - but we shouldn\'t expect them too).As a result  these routes DON\'T WORK...&lt;route&gt; &lt;from uri=\'timer:foo?fixedRate=true&amp;amp;period=10000\' /&gt; &lt;setBody&gt;&lt;constant&gt;Hello Raul&lt;/constant&gt;&lt;/setBody&gt; &lt;to uri=\'log:SendingRequest?showAll=true\' /&gt; &lt;inOut uri=\'activemq:queue:test1?requestTimeout=1000\' /&gt; &lt;to uri=\'log:ReceivedReply?showAll=true\' /&gt;&lt;/route&gt; &lt;route&gt; &lt;from uri=\'activemq:queue:test1\' /&gt; &lt;to uri=\'log:ReceivedRequest?showAll=true\' /&gt;&lt;/route&gt;... but just by adding an additional log endpoint to the second route (or any other thing  for that matter)  it starts to work because Camel weaves in the Pipeline processor.Other workarounds that work: explicitly wrapping the log endpoint in a &lt;pipeline&gt; DSL &lt;setBody&gt;&lt;simple&gt;${in.body}&lt;/simple&gt;&lt;/setBody&gt;Or simply introducing anything that will force Camel to insert a Pipeline processor.IMHO  there are two solutions to avoid this issue: Always weave in a Pipeline processor (adds overhead in simple routes and may cause regressions) Adapt EndpointMessageListener to pick the IN message when the exchange is out capable and expectation of a reply existsI\'m happy to work on a patch for Camel 2.10.1.EDIT: Just wrapping the single endpoint in &lt;pipeline /&gt; doesn\'t function as a workaround.   ',0
'camel-mybatis should do a proper transaction demarcation while reading/writing from/to database.   \tSee http://camel.465427.n5.nabble.com/MyBatis-Component-Bug-consumer-onConsume-hits-error-transactions-are-committed-instead-of-rollback-td5716774.htmlOther than DefaultMyBatisProcessingStrategy the same issue exists by MyBatisProducer as well.Another thing which is currently missing completley is that there\'s no transaction demarcation by the Producer at all while reading from the database  e.g. by SelectOne or SelectList statement types.   ',0
'file endpoints on windows without volume name in the path url not working in some cases   \tI am using file endpoints on Windows without the volume name just like the normal unix based paths look.That means  I have something like file:///tmp/file-in and file:///tmp/file-outThe funny thing that I noticed is that each endpoint itself works fine  but when a route is set up from one to the other  it fails because there seems to be an inconsistency in the way the windows path is handled in the camel-core\'s file component.As mentioned  each file endpoint itself is working fine. For example  the consumer file endpoint configured in a routefrom(\'file:///tmp/file-in\').to(\'mock:test\')works fine.Similarly  the produce file endpoint configured in a routefrom(\'direct:test\').to(\'file:///tmp/file-out\')works fine.But when a route is setup to connect these two file endpoints  the producer endpoint fails to create the output file.Concretely  there is the following code in GenericFileEndpoint.configureMessage that determines the file name. String name = file.isAbsolute() ? file.getAbsoluteFilePath() : file.getRelativeFilePath(); // skip leading endpoint configured directory String endpointPath = getConfiguration().getDirectory() + getFileSeparator();In this particular case  the name variable is set to \'C:/tmp/file-in/sample.xml\' while the endpointPath variable is set to \'/tmp/file-in\'.So  the subsequent code to extract the file name part  shown below  fails to match the path. if (ObjectHelper.isNotEmpty(endpointPath) &amp;&amp; name.startsWith(endpointPath)) { name = ObjectHelper.after(name  endpointPath); }As a result  the file name is not extracted as \'sample.xml\' but remain unchanged as \'C:/tmp/file-in/sample.xml\'.Consequently  when the file producer endpoint tries to write this file in the file system  it tries to write a file as \'/tmp/file-out/C:/tmp/file-in/sample.xml\'  resulting in an error.I modified FileComponent and FileEndpoint so that the endpoint path is stored correctly in this case to make the above extraction code find the file name part correctly.Attached is this proposed patch and a test case which runs on windows and on non-windows but this issue can only be demonstrated under windows.testRouteToFileOnly and testRouteFromFileOnly work without this patch while testRouteFileToFile fails without this patch on windows.Thanks for looking into this issue.Regards  Aki   ',0
'camel-testng - The spring base test class should use @AfterMethod on teardown as its parent does   \tSee nabblehttp://camel.465427.n5.nabble.com/Problem-with-testng-CamelSpringTestSupport-several-contexts-runs-simultaneously-tp5716447.html   ',0
'\'ThreadID is already used\' exception under heavy load   \tIn situations with heavy load or under load tests we rarely got exception: 2012-08-21 12:28:02 620 [ool-26-thread-7] ERROR DefaultErrorHandler - Failed delivery for (MessageId: ID-atitov-pc-60956-1345537671897-2-143205 on ExchangeId: ID-atitov-pc-60956-1345537671897-2-143206). Exhausted after delivery attempt: 1 caught: java.lang.IllegalArgumentException: ThreadID is already usedjava.lang.IllegalArgumentException: ThreadID is already used at org.jivesoftware.smack.ChatManager.createChat(ChatManager.java:163) at org.apache.camel.component.xmpp.XmppPrivateChatProducer.getOrCreateChat(XmppPrivateChatProducer.java:97) at org.apache.camel.component.xmpp.XmppPrivateChatProducer.process(XmppPrivateChatProducer.java:65) at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:120) at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:292) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:115) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:330) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.Pipeline.process(Pipeline.java:117) at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122) at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61) at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86) at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63) at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:360) at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:1) at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:227) at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:331) at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:169) at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111) at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:124) at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:131) at org.apache.camel.component.xmpp.XmppProducerConcurrentTest$1.call(XmppProducerConcurrentTest.java:79) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662)2012-08-21 12:28:02 621 [ool-26-thread-5] ERROR DefaultErrorHandler - Failed delivery for (MessageId: ID-atitov-pc-60956-1345537671897-2-143207 on ExchangeId: ID-atitov-pc-60956-1345537671897-2-143208). Exhausted after delivery attempt: 1 caught: java.lang.IllegalArgumentException: ThreadID is already usedjava.lang.IllegalArgumentException: ThreadID is already used at org.jivesoftware.smack.ChatManager.createChat(ChatManager.java:163) at org.apache.camel.component.xmpp.XmppPrivateChatProducer.getOrCreateChat(XmppPrivateChatProducer.java:97) at org.apache.camel.component.xmpp.XmppPrivateChatProducer.process(XmppPrivateChatProducer.java:65) at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:120) at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:292) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:115) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:330) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.Pipeline.process(Pipeline.java:117) at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122) at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61) at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86) at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63) at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:360) at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:1) at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:227) at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:331) at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:169) at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111) at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:124) at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:131) at org.apache.camel.component.xmpp.XmppProducerConcurrentTest$1.call(XmppProducerConcurrentTest.java:79) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662) After debugging and looking at source code we figured out  that smack use some sort of map with week references for chat cache. When memory is low java GC discards chat instances  but in Process() method they instantiated over and over again without synchronization:XmppPrivateChatProducer.java public void process(Exchange exchange) { ......................... Chat chat = chatManager.getThreadChat(endpoint.getChatId()); if (chat == null) { LOG.trace(\'Creating new chat instance with thread ID {}\'  endpoint.getChatId()); chat = chatManager.createChat(getParticipant()  endpoint.getChatId()  new MessageListener() { public void processMessage(Chat chat  Message message) { // not here to do conversation if (LOG.isDebugEnabled()) { LOG.debug(\'Received and discarding message from {} : {}\'  getParticipant()  message.getBody()); } } }); } .........................} But smack implementation prohibits chat instances with same chatId.   ',0
'Maven archetype - Generates wrong plugin for surefire plugin   \tThe blueprint archetype creates wrong pom.xml. The groupId for the surefire plugin is wrong.   ',0
'Multiple restlet routes of the same restlet URI but different VERBs does not work in Apache Camel 2.10.0   both routes work in Apache Camel 2.9.1.   \tMultiple restlet routes of the same restlet URI but different VERBs does not work in Apache Camel 2.10.0   both routes work in Apache Camel 2.9.1. Reproduce Steps:-----------------1) Add a restlet route with a from uri of restlet:///nimbus/hello.restlet/1.0?restletMethods=get&lt;route xmlns=\'http://camel.apache.org/schema/spring\' trace=\'true\' &gt; &lt;from uri=\'restlet:///nimbus/hello.restlet/1.0?restletMethods=get\'/&gt; &lt;transform&gt; &lt;simple&gt;Hello Restlet Method: ${header.CamelHttpMethod} ID:${header.id}&lt;/simple&gt; &lt;/transform&gt; &lt;/route&gt;2) Add a restlet route with a from uri of restlet:///nimbus/hello.restlet/1.0?restletMethods=post &lt;route xmlns=\'http://camel.apache.org/schema/spring\' trace=\'true\' &gt; &lt;from uri=\'restlet:///nimbus/hello.restlet/1.0?restletMethods=post\'/&gt; &lt;transform&gt; &lt;simple&gt;Hello Restlet Method: ${header.CamelHttpMethod} ID:${header.id}&lt;/simple&gt; &lt;/transform&gt; &lt;/route&gt;3) route 1work fine  but #2 results in the following exception. both route work fine in Camel 2.9.1.Exception:012-07-27 10:29:20 646-0400 ERROR grails.app.service.nimbus.ComputeService localhost addRoute for hello.restletpost failed - Failed to start route nimbus.hello.restletpost.1.0 because of Multiple consumers for the same endpoint is not allowed: Endpoint&#91;/nimbus/hello.restlet/1.0&#93; Caused by: org.apache.camel.FailedToStartRouteException: Failed to start route nimbus.hello.restletpost.1.0 because of Multiple consumers for the same endpoint is not allowed: Endpoint&#91;/nimbus/hello.restlet/1.0&#93; at org.apache.camel.impl.DefaultCamelContext(doStartOrResumeRouteConsumers:1993) I\'ve already posted on http://camel.465427.n5.nabble.com/Apache-Camel-2-10-0-multiple-restlet-routes-of-the-same-restlet-URI-but-different-VERBs-does-not-work-td5716556.html   ',1
'Possible issue in camel-apns - Reported on user forum   \tSee nabblehttp://camel.465427.n5.nabble.com/Issue-with-ApnsServiceFactory-tp5717573.html   ',0
'Mina2 Consumer doesn\'t reliably work with SSL   \tI\'ve been trying to write a service using Camel 2.10.0 which uses the mina2 component to expose a service  and which uses SSL  using an endpoint of:mina2:tcp://localhost:6500?sync=true&amp;filters=#hl7SslFilterFactory #hl7CodecFilter&amp;allowDefaultCodec=falsehowever  what I found was that the SSL handshake was failing quite often for no apparent reason. Investigating further  it appeared that messages sent during the handshake were being processed out of order - specifically  when the client (which uses a standard java SSLSocket) sent a \'TLSv1 Change Cipher Spec\' followed by a \'TLSv1 Handshake\'  the \'TLSv1 Handshake\' was being processed before the \'TLSv1 Change Cipher Spec\'  breaking the process.This appears to have been caused because when the the Mina2Consumer configures MINA for tcp (in Mina2Consumer.setupSocketProtocol)  it is using a UnorderedThreadPoolExecutor - which allows messages to be processed in any order. Switching this to use a OrderedThreadPoolExecutor instead has fixed the issue.May I request that the use of UnorderedThreadPoolExecutor vs OrderedThreadPoolExecutor be configurable via endpoint parameters? (or OrderedThreadPoolExecutor is used when SSL if configured). I\'m assuming the reason for the use of UnorderedThreadPoolExecutor is simply for performance.   ',0
'File consumer - NPE if configured to consume from root directory   \tSee nabblehttp://camel.465427.n5.nabble.com/Setting-root-folder-as-endpoint-Could-not-poll-endpoint-NPE-tp5717845.html   ',0
'In ScheduledRoutePolicy a suspended route cannot be started   \tIf a route is suspended using the ScheduledRoutePolicy and its subclasses (CronScheduledRoutePolicy)  it cannot be resumed or started.Looking at the code in ScheduledRoutePolicy.onJobExecute()  on start/resume actions  the route status is first checked and must be stopped or suspended before any actions is taken.Suspension of a route  only suspends the consumer and not the route  and hence the start/resume after a suspend does nothing.One solution could be to also check the status of the consumer on start/resume. This would require adding a isSuspended() to serviceHelper and should be relatively straightforward.   ',0
'camel-beanio using beanio 2.0 should be using the 2012/03 beanio namespace   \tcamel-beanio which uses beanio-2.0.x library should use the beanio 2.0\'s namepsace (http://www.beanio.org/2012/03) and not the 1.2 namespace ( http://www.beanio.org/2011/01) in its test cases.The background to this is described in this mail thread.http://camel.465427.n5.nabble.com/issue-with-camel-beanio-s-version-used-in-trunk-td5718596.html   ',0
'camel-sftp\'s stepwise behavior to walk up and down relatively to avoid potential traversal issues   \tI am having a directory traversal problem using the stepwise mode of camel-sftp at the producer side. Basically  it can walk down the path from the starting directory to the walking directory  but it cannot go back correctly to the original starting directly. The server is SSH-2.0-Cleo VLProxy/3.0.1 SSH FTP server.I saw a related JIRA issue CAMEL-3309 that describes some issues in the stepwise traversal and some background to this related problem.My question is on the part that changes the working directory back to the original starting folder. I am wondering why we are using stepwise traversal from the ancestor directory towards the starting child directory  instead of moving upwards relatively from the working directory back to the starting directory. This reverse traversal does not require accessing the ancestry path above the staring directory (hence  not affected by the accessing problem). And in fact  I think this reverse stepwise traversal seems more natural order than doing stepwise traversal each time from top down. How do you think?I have made a change that implements this reverse stepwise traversal in SftpOperations and also made a few minor improvement changes.This changed version passes all the existing tests and works also against the above server.I am attaching a patch file for this change. I would appreciate if you can comment on it.Thanks.regards  aki   ',0
'Logger Level is always at default level(\'ERROR\') when error handler is LoggingErrorHandler   \twhen logger level is set to other level (WARN  DEBUG or INFO) except for ERROR  but actually the log is always at ERROR level (it\'s the default level).   ',0
'camel-hl7 bundle should specify the mina version   \tAs there could be different version of mina or mina2 exist in the OSGi platform  we need to specify the right version rang on camel-hl7 which has the dependency on the mina.   ',0
'JmsToJmsTransactedSecurityTest in camel-jms fails every now and then   \tTest JmsToJmsTransactedSecurityTest fails every now and then because of JMS message redelivery. When the entire test class is executed  it sometimes happens that the message that failed at testJmsSecurityFailure test method pops up in the assertions of testJmsSecurityOK.   ',0
'EventHelper.notifyRouteStarted skips all remaining notifiers if one if the notifiers ignores route events   \tHaving two or more notifiers registered at the management strategy of a camel context  where one of the notifiers (not the last one) is set up to ignore route events  results in all remaining notifiers to be skipped when notifying a RouteStartedEvent.Look at http://svn.apache.org/viewvc/camel/branches/camel-2.10.x/camel-core/src/main/java/org/apache/camel/util/EventHelper.java?revision=1340446&amp;view=markup  line 237: There\'s a \'return\' which actually should be a \'continue\'.Note: CamelContextStoppingEvents are also affected.   ',0
'ObjectHelper.resolveUriPath is broken  can not handle:  \'../../\' correctly   \tIn my xsl-files I have imports and includes that resides in folders a few levels up.Ex: &lt;xsl:include href=\'../../common/myfunctions.xsl\'/&gt;When camel starts up and tries to resolve the paths it crashes because of the current implementation in ObjectHelper.resolveUriPath(..)Made a simple testcase that demonstrates my problem.public void testResolveUriPath() throws Exception { assertEquals(\'xslt/\'  ObjectHelper.resolveUriPath(\'xslt/one/../\')); // OK assertEquals(\'xslt/\'  ObjectHelper.resolveUriPath(\'xslt/one/../two/../\')); // OK assertEquals(\'xslt/\'  ObjectHelper.resolveUriPath(\'xslt/\')); // OK assertEquals(\'\'  ObjectHelper.resolveUriPath(\'./\')); // OK assertEquals(\'xslt/\'  ObjectHelper.resolveUriPath(\'xslt/one/two/../../\')); // Fails  gives \'xslt/one/.\' assertEquals(\'xslt/\'  ObjectHelper.resolveUriPath(\'xslt/one/two/../.././\'));// Fails  gives \'xslt/one/.\' }   ',1
'Enricher with async routing not handling exceptions thrown from AggregationStrategy   \tThe Enricher does not handle exceptions thrown from the AggregationStrategy when the async routing engine has kicked in. It leads to the following thread dump  callback thread remains blocked forever.\'Camel (context) thread #10 - JmsConsumer[queue]\' daemon prio=5 tid=103666000 nid=0x113c25000 waiting on condition [113c24000] java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for &lt;7fd4a8de0&gt; (a java.util.concurrent.CountDownLatch$Sync) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156) at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811) at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:969) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1281) at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:207) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:120) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85) at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:91) at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560) at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498) at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:680)   ',0
'EIPs using custom aggregation strategy should fail if not possible to find in registry   \tSome EIPs support using a custom aggregations strategy. And if you use XML DSL to refer to a custom strategy  then you may have typo  or the strategy do not implement the interface.What we should do is to ensure to fail if the custom strategy could not be looked up. Some EIPs such as the content enricher will fallback and use a default strategy. This is wrong.   ',0
'Camel Endpoint ignores camelContextId property in Spring configuration   \tCamel Endpoint  if configured outside camelContext element in Spring configuration  ignores camelContextId property. Steps to reproduce: Configure two contexts in spring configuration. Then in the same config file configure two endpoints outside camelContext  but with camelContextId specified. Both endpoints will be created pointing to the same (first) camel context  despite being configured to different contexts. Attempting to use them by reference results in failure  as endpoint camelContext doesn\'t match the expected one.   ',0
'Recipient list EIP - Should shutdown thread pool if parallel mode enabled   \tWe should shutdown the thread pool for recipient list if a pool was in use  and it can be shutdown.The logic in doShutdown is missing that.Camel would though have a fail-safe when it shutdown itself to shutdown that pool otherwise. But we should shutdown when the EIP is shutdown itself.   ',0
'camel-mqtt - Nullpointer Exception when disconnected from broker   \tHi  from time to time  we get the following exception when producing messages via camel-mqtt:Caused by: java.lang.NullPointerException at org.fusesource.mqtt.client.CallbackConnection.publish(CallbackConnection.java:551) at org.fusesource.mqtt.client.CallbackConnection.publish(CallbackConnection.java:545) at org.apache.camel.component.mqtt.MQTTEndpoint.publish(MQTTEndpoint.java:166) at org.apache.camel.component.mqtt.MQTTProducer.doProcess(MQTTProducer.java:66) at org.apache.camel.component.mqtt.MQTTProducer.process(MQTTProducer.java:38) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[...]From looking at the source of both camel-mqtt and the fusesource mqtt client  it looks like that this is caused by the mqtt-client being disconnected and trying to invoke the onFailure method on the callback:CallbackConnection.javapublic void publish(UTF8Buffer topic  Buffer payload  QoS qos  boolean retain  Callback&lt;Void&gt; cb) { queue.assertExecuting(); if( disconnected ) { cb.onFailure(createDisconnectedError()); return; } PUBLISH command = new PUBLISH().qos(qos).retain(retain); command.topicName(topic).payload(payload); send(command  cb); }camel-mqtt passes in null for the callback though. Wouldn\'t it be better if a more fitting exception were thrown  or if camel passed in a Callback in order to receive the onFailure event when disconnected from the broker?   ',0
'Using recipient list in a doTry ... doCatch situation dont work properly   \tSee nabblehttp://camel.465427.n5.nabble.com/Issue-with-doTry-doCatch-not-routing-correctly-tp5720325.htmlThe end user would expect that doTry .. doCatch will overrule. However it gets a bit further more complicated if the try block routes to other routes and using EIPs such as recipient list.   ',0
'camel-jms - Should also allow multiple consumers from multiple routes from the same queue   \tIf having 2+ routes that consumes from the same queue  then that should be allowed.Its a bit unusual though for queues in Camel as you most likely want to use the same route for the same queue. But there is nothing in the JMS spec that forbids this.   ',0
'NotifyBuilder should be thread safe   \tIn high concurrent tests the NotifyBuilder may miss a counter.   ',0
'Rest route returns response with http Status code 500 Internal Server Error when response has Last-Modified or Header-expires in header as string.   \tRest route returns Response with http Status code 500 Internal Server Error and expected response headers/body when response has Last-Modified or Header-expires in header as string. I found the issue in below code it try to convert string Wed  31 Dec 1969 18:00:00 CS to Date and it fails. Is it posible to convert String Date without knowing Date format?DefaultRestletBinding======================= if (header.equalsIgnoreCase(HeaderConstants.HEADER_LAST_MODIFIED)) { if (value instanceof Calendar) { message.getEntity().setModificationDate(((Calendar) value).getTime()); } else if (value instanceof Date) { message.getEntity().setModificationDate((Date) value); } else { Date date = exchange.getContext().getTypeConverter().mandatoryConvertTo(Date.class  value); // Here it try to convert String to Date it throws No type converter available to convert from type: java.lang.String to the required type: java.util.Date with value Wed  31 Dec 1969 18:00:00 CS message.getEntity().setModificationDate(date); } }Stack trace===========7 Oct 2012 08:28:06 010 WARN org.restlet.Component.StatusFilter - Exception or error caught in status serviceorg.apache.camel.RuntimeCamelException: Cannot process request at org.apache.camel.component.restlet.RestletConsumer$1.handle(RestletConsumer.java:62) at org.apache.camel.component.restlet.MethodBasedRouter.handle(MethodBasedRouter.java:54) at org.restlet.routing.Filter.doHandle(Filter.java:159) at org.restlet.routing.Filter.handle(Filter.java:206) at org.restlet.routing.Router.doHandle(Router.java:500) at org.restlet.routing.Router.handle(Router.java:740) at org.restlet.routing.Filter.doHandle(Filter.java:159) at org.restlet.routing.Filter.handle(Filter.java:206) at org.restlet.routing.Router.doHandle(Router.java:500) at org.restlet.routing.Router.handle(Router.java:740) at org.restlet.routing.Filter.doHandle(Filter.java:159) at org.restlet.engine.application.StatusFilter.doHandle(StatusFilter.java:154) at org.restlet.routing.Filter.handle(Filter.java:206) at org.restlet.routing.Filter.doHandle(Filter.java:159) at org.restlet.routing.Filter.handle(Filter.java:206) at org.restlet.engine.ChainHelper.handle(ChainHelper.java:114) at org.restlet.Component.handle(Component.java:391) at org.restlet.Server.handle(Server.java:491) at org.restlet.engine.ServerHelper.handle(ServerHelper.java:75) at org.restlet.engine.http.HttpServerHelper.handle(HttpServerHelper.java:153) at org.restlet.ext.servlet.ServerServlet.service(ServerServlet.java:1031) at org.apache.shiro.grails.SavedRequestFilter.doFilter(SavedRequestFilter.java:56) at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:360) at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:276) at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90) at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83) at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:344) at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:272) at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:81) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:909) at java.lang.Thread.run(Thread.java:662)Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: java.lang.String to the required type: java.util.Date with value Wed  31 Dec 1969 18:00:00 CST at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:169)   ',0
'BlueprintCamelContext should not get started in the init() method but later when the blueprint container is fully initialized   \tThe init() method in BlueprintCamelContext should not call maybeStart(). but instead should be started when the blueprint container is done doing all its dance and initialization.For example Spring sends on ContextRefreshedEvent when its done.We need something similar for blueprint to tell us when its done doing its initialization et all.The problem is that the CamelContext should not be started until all that other stuff is initialized as well.   ',0
'Classloader mixup when consumers across bundles share the same camel-jetty port   \tHappens in an OSGi environment; but it is also applicable in modular servers that build dynamic classloaders (e.g. JBoss AS) per deployed artifacts (WAR  module  EAR  etc.).If bundles A and B are both creating camel-jetty consumers on the same TCP port  the consumers will share the underlying Jetty connector. Moreover  the Jetty connector is indeed created by the first consumer that initialises on that TCP port.Since the Camel route executes on the Jetty Connector thread  all class resolutions will happen against the classloader of the bundle that initialises first.This makes class resolution absolutely undeterministic and erratic. Quite a nasty bug IMHO.Perhaps this can be fixed by adding a call to Thread.setContextClassLoader() passing the classloader of the JettyHttpEndpoint  as soon as a request comes in?   ',0
'HTTP 1.1 Host header not set correctly with camel-http4   \tThe HTTP 1.1 Host header is not set correctly when using the camel-http4 component as a proxy with bridgeEnpoint=true.The original request Host header is set in the proxied request instead of the host of the service requested by the proxy (ref: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html section 14.23).This simple route shows the problem: &lt;route autoStartup=\'true\' id=\'TestHost\' xmlns:ns2=\'http://camel.apache.org/schema/web\' xmlns=\'http://camel.apache.org/schema/spring\'&gt; &lt;from uri=\'jetty:http://0.0.0.0:8090/TestHost\'/&gt; &lt;to uri=\'https4://www.google.com?bridgeEndpoint=true&amp;throwExceptionOnFailure=false\'/&gt; &lt;/route&gt; This is what I get in the log:INFO | jvm 1 | 2012/10/26 14:52:48 | [ qtp31541880-35 - /TestHost] DefaultClientConnection DEBUG Sending request: GET / HTTP/1.1INFO | jvm 1 | 2012/10/26 14:52:48 | [ qtp31541880-35 - /TestHost] wire DEBUG &gt;&gt; \'GET / HTTP/1.1&#91;/r&#93;&#91;/n&#93;\'INFO | jvm 1 | 2012/10/26 14:52:48 | [ qtp31541880-35 - /TestHost] wire DEBUG &gt;&gt; \'breadcrumbId: ID-localhost-1329-1351277552803-0-2&#91;/r&#93;&#91;/n&#93;\'INFO | jvm 1 | 2012/10/26 14:52:48 | [ qtp31541880-35 - /TestHost] wire DEBUG &gt;&gt; \'User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:15.0) Gecko/20100101 Firefox/15.0&#91;/r&#93;&#91;/n&#93;\'INFO | jvm 1 | 2012/10/26 14:52:48 | [ qtp31541880-35 - /TestHost] wire DEBUG &gt;&gt; \'Accept-Encoding: gzip  deflate&#91;/r&#93;&#91;/n&#93;\'INFO | jvm 1 | 2012/10/26 14:52:48 | [ qtp31541880-35 - /TestHost] wire DEBUG &gt;&gt; \'Host: localhost:8090&#91;/r&#93;&#91;/n&#93;\'INFO | jvm 1 | 2012/10/26 14:52:48 | [ qtp31541880-35 - /TestHost] wire DEBUG &gt;&gt; \'Accept: text/html application/xhtml+xml application/xml;q=0.9 /;q=0.8&#91;/r&#93;&#91;/n&#93;\'INFO | jvm 1 | 2012/10/26 14:52:48 | [ qtp31541880-35 - /TestHost] wire DEBUG &gt;&gt; \'Accept-Language: en-us en;q=0.5&#91;/r&#93;&#91;/n&#93;\'INFO | jvm 1 | 2012/10/26 14:52:48 | [ qtp31541880-35 - /TestHost] wire DEBUG &gt;&gt; \'Connection: Keep-Alive&#91;/r&#93;&#91;/n&#93;\'INFO | jvm 1 | 2012/10/26 14:52:48 | [ qtp31541880-35 - /TestHost] wire DEBUG &gt;&gt; \'&#91;/r&#93;&#91;/n&#93;\'   ',0
'Update SqsConsumer to extend Visibility Timeout correctly   \tCurrently SqsConsumer will scheduled a future to happen start occruing 1/2 the visibility timeout  and reoccur again at the visibility timeout period. Because of the way SQS works  when you request a ChangeMessageVisibility timeout it does not add that to the time remaining on the message visibility. Instead it will set the message visibility to the time out given. This means that what actually happens in the camel code is that: we request the ChangeMessageVisibility timeout to be set to X seconds from now after X/2 seconds then every X seconds after that we we request the ChangeMessageVisibility timeout to be set to X from nowThis means that our message will become visible every now and again as the ChangeMessageVisibility timeout is not updated in time as period between successive executions is the same as the timeout period we request.I\'ve attached two patches which would fix this issue. \'aws_sqs_visibility_timeout_simple.patch\' - This patch changes the way we set up the future. The delay and period are now the same so that we call ChangeMessageVisibility every X/2 after the message has been pulled. \'aws_sqs_visibility_timeout_phased_timeout.patch\' - This one keeps the delay to 1/2 the period and requests ChangeMessageVisibility every period. This time though it requests the visibility to be 1.5 * the period. This means that it behaves as originally planned  as if it was adding duration to the visibility duration left. This means we call Amazon less times and still keep the message hidden as expected.This was looked at with Alex Hutter (both working on same project).   ',0
'Configuring jetty component with a different name dont work with jetty consumer   \tFor example if you do &lt;route&gt; &lt;from uri=\'jetty2:http://localhost:9090/myapp\'/&gt; &lt;transform&gt; &lt;simple&gt;Hello ${body}&lt;/simple&gt; &lt;/transform&gt; &lt;/route&gt;Then it fails withjava.net.SocketException: Unresolved address at sun.nio.ch.Net.translateToSocketException(Net.java:58) at sun.nio.ch.Net.translateException(Net.java:84) at sun.nio.ch.Net.translateException(Net.java:90) at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:61) at org.eclipse.jetty.server.nio.SelectChannelConnector.open(SelectChannelConnector.java:187) at org.eclipse.jetty.server.AbstractConnector.doStart(AbstractConnector.java:316) at org.eclipse.jetty.server.nio.SelectChannelConnector.doStart(SelectChannelConnector.java:265) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.Server.doStart(Server.java:286) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.apache.camel.component.jetty.JettyHttpComponent.connect(JettyHttpComponent.java:315) at org.apache.camel.component.http.HttpEndpoint.connect(HttpEndpoint.java:149) at org.apache.camel.component.http.HttpConsumer.doStart(HttpConsumer.java:56) at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)...   ',1
'Camel JMS producer can block a thread under specific circumstances   \tThis is an edge case  but when the following circumstances concur  the asynchronous routing engine in Camel become blocked: Sending an InOut exchange over JMS (request/reply)  where: Persistent messages are enabled (deliveryPersistent=true) useMessageIDasCorrelationID is enabled replyToType is Temporary queues (default) (using TemporaryQueueReplyManager) a timeout is setYou have to be really unlucky  but if the following condition is satisfied  a thread will become blocked:time the broker takes to ACK the produced message &gt; message timeoutHence  if we have a timeout of 3000ms  and the broker takes 4000ms to ACK the message (e.g. slow Disk I/O while the journal is rotating - it happened to us)  at some point we\'ll see this.2012-10-30 10:46:57 680 | WARN | CorrelationMap | 89 - org.apache.camel.camel-core - 2.8.0.fuse-06-11 | Exception occurred during purge task. This exception will be ignored.java.lang.NullPointerExceptionThe CorrelationMap is rendered useless  so if subsequent exchanges time out  the ReplyHandler may never get an onTimeout callback  thus leading to the waiting thread getting blocked forever if the async routing engine was in place.   ',0
'ActiveMQ target endpoint with transferExchange=true does not work together with source File endpoint with preMove option set   \tGot failure on a simple route reading from file and sending to ActiveMQ queue.On source File endpoint set preMove option to some folder  and on target activemq endpoint set transferExchange=true.It fails with FileNotFound exception  trying to read file from original location  not from temporary preMoved one.Without preMove all works perfect.Simplified Spring application context with Camel routes looks like this:&lt;?xml version=\'1.0\' encoding=\'UTF-8\'?&gt;&lt;beans xmlns=\'http://www.springframework.org/schema/beans\' xmlns:xsi=\'http://www.w3.org/2001/XMLSchema-instance\' xsi:schemaLocation=\' http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd\'&gt; &lt;bean id=\'brokerService\' class=\'org.apache.activemq.broker.BrokerService\' init-method=\'start\' destroy-method=\'stop\'&gt; &lt;property name=\'brokerName\' value=\'localhost\' /&gt; &lt;property name=\'useJmx\' value=\'false\' /&gt; &lt;property name=\'transportConnectorURIs\'&gt; &lt;list&gt; &lt;value&gt;vm://localhost&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; &lt;bean id=\'jmsConnectionFactory\' class=\'org.apache.activemq.ActiveMQConnectionFactory\' depends-on=\'brokerService\'&gt; &lt;property name=\'brokerURL\' value=\'vm://localhost\'/&gt; &lt;property name=\'redeliveryPolicy\' ref=\'redeliveryPolicyConfigActiveMQ\'/&gt; &lt;/bean&gt; &lt;bean id=\'pooledConnectionFactory\' class=\'org.apache.activemq.pool.PooledConnectionFactory\' init-method=\'start\' destroy-method=\'stop\'&gt; &lt;property name=\'maxConnections\' value=\'8\' /&gt; &lt;property name=\'maximumActive\' value=\'500\' /&gt; &lt;property name=\'connectionFactory\' ref=\'jmsConnectionFactory\' /&gt; &lt;/bean&gt; &lt;bean id=\'redeliveryPolicyConfigActiveMQ\' class=\'org.apache.activemq.RedeliveryPolicy\'&gt; &lt;property name=\'maximumRedeliveries\' value=\'1\'/&gt; &lt;property name=\'redeliveryDelay\' value=\'5000\'/&gt; &lt;/bean&gt; &lt;camelContext id=\'testCustomer\' xmlns=\'http://camel.apache.org/schema/spring\'&gt; &lt;endpoint id=\'sourceEndpoint\' uri=\'file:e:/work/ids/testCustomer/input/?preMove=.tmp&amp;delay=1000&amp;readLock=rename&amp;copyAndDeleteOnRenameFail=false&amp;move=.archive&amp;moveFailed=.failed\' /&gt; &lt;endpoint id=\'destJms\' uri=\'activemq:queue:source?transferExchange=true&amp;connectionFactory=#pooledConnectionFactory\' /&gt; &lt;route id=\'testRoute\'&gt; &lt;from ref=\'sourceEndpoint\' /&gt; &lt;to ref=\'destJms\' /&gt; &lt;/route&gt; &lt;/camelContext&gt;&lt;/beans&gt;Exception trace:org.apache.camel.TypeConversionException: Error during type conversion from type: java.io.File to the required type: byte[] with value e:/work/ids/testCustomer/input/payment.xml due java.io.FileNotFoundException: e:/work/ids/testCustomer/input/payment.xml (The system cannot find the file specified) at com.it.ids.exceptions.HandleException.process(HandleException.java:20) at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.Pipeline.process(Pipeline.java:117) at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.FatalFallbackErrorHandler.processNext(FatalFallbackErrorHandler.java:42) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:766) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:273) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:336) at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:189) at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:155) at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:142) at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:92) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662)Caused by: org.apache.camel.RuntimeCamelException: java.io.FileNotFoundException: e:/work/ids/testCustomer/input/payment.xml (The system cannot find the file specified) at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1270) at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:926) at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:47) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:253) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:155) at org.apache.camel.component.file.FileBinding.loadContent(FileBinding.java:57) at org.apache.camel.component.file.GenericFileConverter.genericFileToInputStream(GenericFileConverter.java:123) at org.apache.camel.component.file.GenericFileConverter.genericFileToSerializable(GenericFileConverter.java:152) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:922) at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:47) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:253) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:111) at org.apache.camel.impl.DefaultExchangeHolder.checkMapSerializableObjects(DefaultExchangeHolder.java:209) at org.apache.camel.impl.DefaultExchangeHolder.safeSetProperties(DefaultExchangeHolder.java:177) at org.apache.camel.impl.DefaultExchangeHolder.marshal(DefaultExchangeHolder.java:93) at org.apache.camel.impl.DefaultExchangeHolder.marshal(DefaultExchangeHolder.java:71) at org.apache.camel.component.jms.JmsBinding.createJmsMessage(JmsBinding.java:439) at org.apache.camel.component.jms.JmsBinding.makeJmsMessage(JmsBinding.java:287) at org.apache.camel.component.jms.JmsProducer$2.createMessage(JmsProducer.java:266) at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.doSendToDestination(JmsConfiguration.java:215) at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.access$100(JmsConfiguration.java:158) at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate$3.doInJms(JmsConfiguration.java:192) at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:466) at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.send(JmsConfiguration.java:189) at org.apache.camel.component.jms.JmsProducer.doSend(JmsProducer.java:398) at org.apache.camel.component.jms.JmsProducer.processInOnly(JmsProducer.java:352) at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:132) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122) at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334) ... 28 moreCaused by: java.io.FileNotFoundException: e:/work/ids/testCustomer/input/payment.xml (The system cannot find the file specified) at java.io.FileInputStream.open(Native Method) at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:106) at org.apache.camel.converter.IOConverter.toInputStream(IOConverter.java:73) at org.apache.camel.converter.IOConverter.toByteArray(IOConverter.java:243) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:922) ... 71 more   ',0
'regression : invalid SetQueueAttributesRequest created  works on 2.10.1   \tIn org.apache.camel.component.aws.sqs.SqsEndpoint.updateQueueAttributes if I don\'t have any configuration  the created SetQueueAttributesRequest contains a null atttribute collection and AWS emit an error.In 2.10.1  no problem.Workaround in 2.10.2 : force the create SetQueueAttributesRequest to contain a valid attribute collection by defining a configuration in camel. For exemple: from(\'aws-sqs://\'queue\'?amazonSQSClient=#amazonSQSClient&amp;delay=\'pollCycle.getMillis()\'&amp;maxMessagesPerPoll=10&amp;deleteAfterRead=false\')  -&gt; works on 2.10.1  fail on 2.10.2if I add an argument to my URI\'&amp;defaultVisibilityTimeout=30\'  -&gt; works on 2.10.1  works on 2.10.2Exception : {{Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route SQS-to-MongoDB-EVENTS: Route[[From[aws-sqs://EVENTS?amazonSQSClient=#amazonSQSClien... because of Failed to resolve endpoint: aws-sqs://EVENTS?amazonSQSClient=\%23amazonSQSClient&amp;delay=60000&amp;deleteAfterRead=false&amp;maxMessagesPerPoll=10 due to: The request must contain the parameter Attribute.Name. at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:176) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:722) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1789) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1575) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1444) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1412) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at com.netceler.iv5measure.contract.impl.sqs.CamelRoutesLauncher.start(CamelRoutesLauncher.java:55) ~&#91;webapp-0.1.2-SNAPSHOT.jar:0.1.2-SNAPSHOT&#93; at com.netceler.iv5measure.contract.impl.config.ConfiguredStreamInitializer.startStreams(ConfiguredStreamInitializer.java:39) ~&#91;webapp-0.1.2-SNAPSHOT.jar:0.1.2-SNAPSHOT&#93; ... 58 common frames omittedCaused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: aws-sqs://EVENTS?amazonSQSClient=\%23amazonSQSClient&amp;delay=60000&amp;deleteAfterRead=false&amp;maxMessagesPerPoll=10 due to: The request must contain the parameter Attribute.Name. at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:479) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:50) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:186) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:851) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:171) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; ... 66 common frames omittedCaused by: com.amazonaws.AmazonServiceException: The request must contain the parameter Attribute.Name. at com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:614) ~&#91;aws-java-sdk-1.3.23.jar:na&#93; at com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:312) ~&#91;aws-java-sdk-1.3.23.jar:na&#93; at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:165) ~&#91;aws-java-sdk-1.3.23.jar:na&#93; at com.amazonaws.services.sqs.AmazonSQSClient.invoke(AmazonSQSClient.java:812) ~&#91;aws-java-sdk-1.3.23.jar:na&#93; at com.amazonaws.services.sqs.AmazonSQSClient.setQueueAttributes(AmazonSQSClient.java:246) ~&#91;aws-java-sdk-1.3.23.jar:na&#93; at com.netceler.infra.aws.sqs.JMXSQS.setQueueAttributes(JMXSQS.java:108) ~&#91;infra-sqs-0.0.3-SNAPSHOT.jar:0.0.3-SNAPSHOT&#93; at com.netceler.infra.aws.sqs.AmazonSQSClientProxy.setQueueAttributes(AmazonSQSClientProxy.java:63) ~&#91;infra-sqs-0.0.3-SNAPSHOT.jar:0.0.3-SNAPSHOT&#93; at org.apache.camel.component.aws.sqs.SqsEndpoint.updateQueueAttributes(SqsEndpoint.java:139) ~&#91;camel-aws-2.10.2.jar:2.10.2&#93; at org.apache.camel.component.aws.sqs.SqsEndpoint.doStart(SqsEndpoint.java:93) ~&#91;camel-aws-2.10.2.jar:2.10.2&#93; at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:1763) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultCamelContext.doAddService(DefaultCamelContext.java:931) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:892) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:475) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; ... 74 common frames omitted}}   ',1
'Regression in validator component in 2.10.3   \tI get:CaughtExceptionType:java.lang.NullPointerException  CaughtExceptionMessage:null  StackTrace:java.lang.NullPointerException at org.apache.camel.converter.jaxp.XmlConverter.toStreamSource(XmlConverter.java:516) at org.apache.camel.converter.jaxp.XmlConverter.toSAXSource(XmlConverter.java:399) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:601) at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:923) at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:66) at org.apache.camel.support.TypeConverterSupport.convertTo(TypeConverterSupport.java:34) at org.apache.camel.processor.validation.ValidatingProcessor.getSource(ValidatingProcessor.java:343) at org.apache.camel.processor.validation.ValidatingProcessor.process(ValidatingProcessor.java:100) at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:101) at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:71) at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) atorg.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122) at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) /when I upgrade camel to 2.10.3 and use the validator component:&lt;camel:to uri=\'validator:META-INF/xsd/transactiongatetransfertransaction.xsd\' /&gt;this did not happen in 2.10.2 or versions before that.   ',1
'Pre-XSLT and Validator Type Conversions from byte[] may easily fail   \tXsltBuilder.getSource(Exchange e  Object o) tries to convert the payload to a Source. If you have a byte[] payload  then the following type converter will likely be picked:InstanceMethodTypeConverter: public javax.xml.transform.sax.SAXSource org.apache.camel.converter.jaxp.XmlConverter.toSAXSource(byte[] org.apache.camel.Exchange) throws java.io.IOException org.xml.sax.SAXException javax.xml.transform.TransformerExceptionThis type converter requires the Exchange (InstanceMethodTypeConverter.useExchange == true)  but line 461 of XsltBuilder doesn\'t pass it on.Therefore  a NullPointerException happens because the conversion method tries to access the Exchange.   ',1
'camel-quickfix: QuickfixjEndpoint should adhere the InOut exchange pattern if you would ask for this MEP   \tSee http://camel.465427.n5.nabble.com/camel-quickfix-RequestReplyExample-java-io-IOException-td5723769.html   ',0
'File consumer - When using done file name then delete the file when batch is complete   \tWhen using doneFileName then the file is deleted on each completion of files in the batch. And you get WARN logs about the done file cannot be deleted  because the 1st already deleted the file.We should defer and only delete the done file on the last in the batch.   ',0
'When call removeRouteDefinition the route doesn\'t removed from collection of route Definitions.   \tWhen I call removeRouteDefinition for DefaultCamelContext  the route doesn\'t removed from collection of routes. public synchronized void removeRouteDefinition(RouteDefinition routeDefinition) throws Exception { String id = routeDefinition.idOrCreate(nodeIdFactory); stopRoute(id); removeRoute(id); }it is just remove it from running route service if context is running.When we do restart context this route started again. Workaround for this issue is call removeRouteDefinitions and wrap single route into collection.But when I call removeRouteDefinitions - it is process correctly: remove from collections of definitions and after removed from running route services. public synchronized void removeRouteDefinitions(Collection&lt;RouteDefinition&gt; routeDefinitions) throws Exception { this.routeDefinitions.removeAll(routeDefinitions); for (RouteDefinition routeDefinition : routeDefinitions) { removeRouteDefinition(routeDefinition); } }   ',0
'NPE when jaxb fallback converter is used with RequestEntityConverter   \tAs the RequestEntityConverter.toRequestEntity(String str  Exchange exchange) doesn\'t has check if the exchange is null  it caused the NPE as the user complain in camel user mailing list&#91;1&#93;&#91;1&#93;http://camel.465427.n5.nabble.com/Content-Enrich-Error-when-upgrading-Apache-Camel-from-2-9-2-to-any-higher-version-td5724244.htmlHere is the stack trace.CaughtExceptionType:org.apache.camel.TypeConversionException  CaughtExceptionMessage:Error during type conversion from type: com.ecc.DamBean to the required type: org.apache.commons.httpclient.methods.RequestEntity with value com.ecc.DamBean@8811a59 due Error during type conversion from type: java.lang.String to the required type: org.apache.commons.httpclient.methods.RequestEntity with value ... The complete Stack Trace : Exchange[ExchangePattern:InOnly  BodyType:String  Body:  CaughtExceptionType:org.apache.camel.TypeConversionException  CaughtExceptionMessage:Error during type conversion from type: com.ecc.DamBean to the required type: org.apache.commons.httpclient.methods.RequestEntity with value com.ecc.DamBean@8811a59 due Error during type conversion from type: java.lang.String to the required type: org.apache.commons.httpclient.methods.RequestEntity with value due java.lang.NullPointerException  StackTrace:org.apache.camel.TypeConversionException: Error during type conversion from type: com.ecc.DamBean to the required type: org.apache.commons.httpclient.methods.RequestEntity with value com.ecc.DamBean@8811a59 due Error during type conversion from type: java.lang.String to the required type: org.apache.commons.httpclient.methods.RequestEntity with value due java.lang.NullPointerException at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:98) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:289) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:111) at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:72) at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:47) at org.apache.camel.component.http.HttpProducer.createRequestEntity(HttpProducer.java:390) at org.apache.camel.component.http.HttpProducer.createMethod(HttpProducer.java:343) at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:91) at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.Enricher.process(Enricher.java:114) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:61) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.Pipeline.process(Pipeline.java:148) at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:61) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:57) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:275) at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:185) at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:139) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:909) at java.lang.Thread.run(Thread.java:662)Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: org.apache.commons.httpclient.methods.RequestEntity with value due java.lang.NullPointerException at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:126) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:98) at org.apache.camel.converter.jaxb.FallbackTypeConverter.marshall(FallbackTypeConverter.java:222) at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:94) ... 44 moreCaused by: org.apache.camel.RuntimeCamelException: java.lang.NullPointerException at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1271) at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:927) at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:47) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:253) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:111) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:98) at org.apache.camel.converter.jaxb.FallbackTypeConverter.marshall(FallbackTypeConverter.java:222) at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:94) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:289) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:111) at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:72) at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:47) at org.apache.camel.component.http.HttpProducer.createRequestEntity(HttpProducer.java:390) at org.apache.camel.component.http.HttpProducer.createMethod(HttpProducer.java:343) at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:91) at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.Enricher.process(Enricher.java:114) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.Pipeline.process(Pipeline.java:117) at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:275) at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:183) at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:139) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) ... 1 moreCaused by: java.lang.NullPointerException at org.apache.camel.component.http.RequestEntityConverter.toRequestEntity(RequestEntityConverter.java:51) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:923) ... 50 more]   ',1
'camel-netty - Producer should avoid blocking while waiting for connection   \tWe should at most wait for the connection timeout to trigger.   ',0
'camel-jms - JmsPollingConsumer use the constant fields from JmsTemplate for receiveNoWait etc   \tSee nabblehttp://camel.465427.n5.nabble.com/JmsPollingConsumer-and-method-receiveNoWait-has-incorrect-timeout-value-tp5722817.html   ',0
'SJMS component\'s pom.xml missing taskmanager package in camel.osgi.private.pkg   \tHi I know it\'s not out in the wild yet but with this tiny patch SJMS is usable in my spike project.Sadly doesn\'t affect the number of passing/failing tests.The pom\'s &lt;camel.osgi.private.pkg&gt; section is missing an entry for the org.apache.camel.component.sjms.taskmanager package.thanks Caspar   ',0
'Cache producer is not thread safe   \tfrom(\'direct:causeFailure\') .split().body().parallelProcessing() .setHeader(CacheConstants.CACHE_OPERATION  constant(CacheConstants.CACHE_OPERATION_DELETEALL)) .to(\'cache://MyTestCache\');  String[] body = new String[] { \'a\'  \'b\' }; template.sendBody(body); net.sf.ehcache.ObjectExistsException: Cache MyTestCache already exists at net.sf.ehcache.CacheManager.addCacheNoCheck(CacheManager.java:1294) at net.sf.ehcache.CacheManager.addCache(CacheManager.java:1184) at org.apache.camel.component.cache.CacheEndpoint.initializeCache(CacheEndpoint.java:137) at org.apache.camel.component.cache.CacheProducer.process(CacheProducer.java:56) at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122) at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99) at org.apache.camel.processor.MulticastProcessor.doProcessParallel(MulticastProcessor.java:709) at org.apache.camel.processor.MulticastProcessor.access$200(MulticastProcessor.java:80) at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:290) at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:275) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334) at java.util.concurrent.FutureTask.run(FutureTask.java:166) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) at java.lang.Thread.run(Thread.java:722)   ',0
'ClassNotFoundException: weblogic.jndi.WLInitialContextFactory when starting the route via Karaf start-route(camel:route-start) command.   \tWe have a simple camel route definied in Java DSL:from(\'wmq:queue:ESB_TEST_IN\').routeId(\'IN\').autoStartup(true).log(\'${body}\');This route receives JMS messages from a WebLogicJMS queue with name ESB_TEST_IN and logs the body to the log file.The route works fine when autoStartup is set to true. But when autoStartup is set to false then the creation of the WebLogic InitialContext failed because of an ClassNotFoundException regarding weblogic.jndi.WLInitialContextFactory and the following message is written to the karaf log file:2012-12-07 12:03:21 502 WARN : DefaultJmsMessageListenerContainer | Setup of JMS message listener invoker failed for destination \'ESB_TEST_IN\' - trying to recover. Cause: Destination &#91;ESB_TEST_IN&#93; not found in JNDI; nested exception is javax.naming.NoInitialContextException: Cannot instantiate class: weblogic.jndi.WLInitialContextFactory &#91;Root exception is java.lang.ClassNotFoundException: weblogic.jndi.WLInitialContextFactory&#93; [org.springframework.jms.listener.DefaultMessageListenerContainer | mer&#91;ESB_TEST_IN&#93; | org.springframework.jms.3.0.7.RELEASE(id=135)]This issue\'s related to https://jira.talendforge.org/browse/TESB-7884   ',0
'Using annotations DSL in beans may cause async callback to be called twice   \tThe bean processor and bean invocation logic may in cases when the EIP annotations is used on beans  cause the callback to be called twice.Noticed this problem during investigation of See CAMEL-5905   ',0
'CamelJob implementation rely on some inconsistent endpoints LRU cache - Camel endpoints may not be called on quartz fire after some days of uptime   \tCamelJobs rely on some endpoints LRU cache from camel context. If i\'m not wrong  since LRU Cache relies on SoftReferences  Garbage Collector can decide to evict some entries and especially QuartzEndpoints.It happens that sometimes endpoints evicted from LRU Caches are QuartzEndpoints. Since QuartzEnpoints are searched from CamelJob in LRU cache  they are not reachable anymore.The side effect  is that CamelJob isntance initializes a new QuartzEndpoint  but loadbalancer is not initialized since it is initialized from QuartzConsumer.The result is that quartz triggers jobs that instanciate Quartz endpoints with unintialized load balancers which are unable to call processor from the routes associated.I have joined a fix that rely on the search of QuartzEndpoints from initalized routes of Camel context.Fundamentally  the search of endpoints should not rely on endpoints LRU cache. It is a broken design.Hope it helps.By the way  there are other issues related to QuartzEndpoint load balancer initalization: If quartz starts before startup of Camel routes you will have the same issue: Correctly initialized QuartzEndpoints are not in LRU cache since Camel has not started routes (and so endpoints and consumers). Quartz will trigger job  and camel job will search for QuartzEndpoint and put it in LRUCache with uninitialized load balancer.   ',0
'RestletComponent component is not removing added route from routers list although route is removed from Context.   \tIn RestletComponent class add entry to instance variable \'private final Map&lt;String  MethodBasedRouter&gt; routers = new HashMap&lt;String  MethodBasedRouter&gt;()\' map while invoking getMethodRouter method  but it never remove in disconnect method  also disconnect method has local variable with same name as instance variable \'routes\'.Camel Development Forums=========================http://camel.465427.n5.nabble.com/Camel-Restlet-2-10-3-RestletComponent-component-does-not-remove-added-route-form-routers-although-ro-td5726000.html   ',0
'NoRedeliveryOnShutdown doesn\'t work for DeadLetterChannel   \tSee http://camel.465427.n5.nabble.com/Wrong-test-for-allowRedeliveryWhileStopping-possible-bug-td5726184.html for details.The assumption is if we use \'allowRedeliveryWhileStopping(false)\' in an error handler definition which use a dead letter channel  the message should be send to the configured dead letter channel if we are in a delivery by stopping Camel (instead of dropping the message).   ',0
'Camel Email Component Missing Attachments   \tsee http://camel.465427.n5.nabble.com/Camel-Email-Component-Missing-Attachments-td3386382.html#a5727102The disposition field is optional(see RFC 2183)  so it is possible that camel misses attachments. if (disposition != null &amp;&amp; (disposition.equalsIgnoreCase(Part.ATTACHMENT) || disposition.equalsIgnoreCase(Part.INLINE))) { // only add named attachments String fileName = part.getFileName(); if (fileName != null) { LOG.debug(\'Mail contains file attachment: \' + fileName); // Parts marked with a disposition of Part.ATTACHMENT are clearly attachments CollectionHelper.appendValue(map  fileName  part.getDataHandler()); } }Adding the fileName check to the if should resolve the issue.   ',0
'camel-rss and camel-atom - Not installable in Karaf   \tkaraf@root&gt; features:install camel-rssError executing command: Manifest not present in the first entry of the zip mvn:org.apache.ws.commons.axiom/axiom-impl/1.2.14I think we got a JAR that is flawed 1.2.14   ',1
'CamelBlueprintContext may be wrongly started and this may lead to a deadlock   \tWe observed a deadlock situation that seems to be caused by the change that came in with CAMEL-5712  which changed the way how CamelBlueprintContext is started to solve another issue.The current code listens to the service registered event for org.osgi....BlueprintContainer (supposedly for its associated BP container) and decides to start itself if not started. From the description of the ticket  this change was intended to make sure the starting of the context occurs after its BP container is registered. In that case  should it be checking whether the received event belongs to the same bundle? This checking is missing in the current code and consequently  it may wrongly react to the event from another bundle\'s container registration event. When this happens under some specific timing situation  it may also lead to a deadlock.So  should we be checking the event source in CamelBlueprintContext\'s serviceChanged method?Regards  akiStack trace from 2.10.3========================================================================Name: Blueprint Extender: 3State: BLOCKED on java.lang.Object@9064b42 owned by: Blueprint Extender: 2Total blocked: 13 Total waited: 38Stack trace: org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:212)org.apache.aries.blueprint.container.BlueprintRepository.createInstance(BlueprintRepository.java:198)org.apache.aries.blueprint.container.BlueprintRepository.create(BlueprintRepository.java:137)org.apache.aries.blueprint.container.BlueprintContainerImpl.getComponentInstance(BlueprintContainerImpl.java:709)org.apache.camel.blueprint.BlueprintContainerRegistry.lookup(BlueprintContainerRegistry.java:41)org.apache.camel.impl.CompositeRegistry.lookup(CompositeRegistry.java:68)org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:49)org.apache.camel.blueprint.BlueprintComponentResolver.resolveComponent(BlueprintComponentResolver.java:39)org.apache.camel.impl.DefaultCamelContext.getComponent(DefaultCamelContext.java:314) locked java.util.HashMap@1660de94org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:456)org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:50)org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:186)org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114)org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90)org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:851)org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:171)org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:722)org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1789)org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1575)org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1444) locked org.apache.camel.blueprint.BlueprintCamelContext@5011bafaorg.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1412)org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:127)org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:96)org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:104)org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:861)org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148)org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:819)org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:771)org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.register(ServiceRegistrationImpl.java:130)org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.registerService(ServiceRegistry.java:214)org.eclipse.osgi.framework.internal.core.BundleContextImpl.registerService(BundleContextImpl.java:433)org.apache.aries.blueprint.container.BlueprintContainerImpl.registerService(BlueprintContainerImpl.java:410)org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:346)org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:230) locked java.util.concurrent.atomic.AtomicBoolean@3cb3ada locked java.util.concurrent.atomic.AtomicBoolean@31b4d206java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)java.util.concurrent.FutureTask.run(FutureTask.java:138)java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206)java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)java.lang.Thread.run(Thread.java:722)========================================================================Name: Blueprint Extender: 2State: BLOCKED onorg.apache.camel.blueprint.BlueprintCamelContext@5011bafa owned by: Blueprint Extender: 3Total blocked: 24 Total waited: 58Stack trace: org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:1053)org.apache.camel.util.EndpointHelper.setProperties(EndpointHelper.java:249)org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:222)org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:64)org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:36)org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:91)org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:461)org.apache.camel.core.xml.AbstractCamelEndpointFactoryBean.getObject(AbstractCamelEndpointFactoryBean.java:46)sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)java.lang.reflect.Method.invoke(Method.java:597)org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:226)org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:824)org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:234)org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:706)org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64) locked java.lang.Object@9064b42org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:219) locked java.lang.Object@9064b42org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:147)org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:631)org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:337)org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:230) locked java.util.concurrent.atomic.AtomicBoolean@53b00227 locked java.util.concurrent.atomic.AtomicBoolean@5648a168java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)java.util.concurrent.FutureTask.run(FutureTask.java:138)java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206)java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)java.lang.Thread.run(Thread.java:722)   ',1
'SOAP over JMS does not work with camel-cxf endpoint   \tIf we would like to use SOAP over JMS using CXF &amp; Camel (2.10) that fails.The CXF endpoint receives well the incoming request from the JMS queue[aultMessageListenerContainer-1] HelloWorldServicePortType INFO Inbound Message----------------------------ID: 1Content-Type: text/xmlHeaders: {JMSMessageType=[text]}Payload: &lt;soapenv:Envelope xmlns:soapenv=\'http://schemas.xmlsoap.org/soap/envelope/\' xmlns:hel=\'http://helloworld.mycompany.redhat.com\'&gt; &lt;soapenv:Header/&gt; &lt;soapenv:Body&gt; &lt;hel:sayHello&gt; &lt;hel:name&gt;fred&lt;/hel:name&gt; &lt;/hel:sayHello&gt; &lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;--------------------------------------[aultMessageListenerContainer-1] route1 INFO SOAP Request received message[aultMessageListenerContainer-1] route1 INFO Mock service repliedbut the response is not returned by CXF neither published in a (reply) queue.Here is the Camel Route @Override public void configure() throws Exception {from(\'cxf:bean:endpoint.service.worklist?dataFormat=MESSAGE\') .convertBodyTo(String.class) .log(\'SOAP Request received message\').setHeader(\'JMSReplyTo\').constant(\'supervisorworklist.response\') .transform().constant(response) // RESPONSE = SOAP MESSAGE .log(\'Mock service replied\'); }&amp; Config&lt;?xml version=\'1.0\' encoding=\'UTF-8\'?&gt;&lt;beans xmlns=\'http://www.springframework.org/schema/beans\' xmlns:xsi=\'http://www.w3.org/2001/XMLSchema-instance\' xmlns:camel=\'http://camel.apache.org/schema/spring\' xmlns:osgi=\'http://www.springframework.org/schema/osgi\' xmlns:cxf=\'http://camel.apache.org/schema/cxf\' xmlns:jms=\'http://cxf.apache.org/transports/jms\' xsi:schemaLocation=\' http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/osgi http://www.springframework.org/schema/osgi/spring-osgi.xsd http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf-2.10.0-spring.xsd http://cxf.apache.org/transports/jms http://cxf.apache.org/schemas/configuration/jms.xsd\'&gt; &lt;bean id=\'jms.connectionFactory\' class=\'org.apache.activemq.ActiveMQConnectionFactory\'&gt; &lt;!-- &lt;property name=\'brokerURL\' value=\'vm://myEmbeddedBroker?broker.persistent=false\' /&gt;--&gt; &lt;property name=\'brokerURL\' value=\'tcp://localhost:61616\'/&gt; &lt;/bean&gt; &lt;bean id=\'jms.config.service\' class=\'org.apache.cxf.transport.jms.JMSConfiguration\'&gt; &lt;property name=\'connectionFactory\' ref=\'jms.connectionFactory\' /&gt; &lt;property name=\'targetDestination\' value=\'supervisorworklist\' /&gt; &lt;property name=\'replyDestination\' value=\'supervisorworklist.response\'/&gt; &lt;/bean&gt; &lt;bean id=\'logginOutInterceptor\' class=\'org.apache.cxf.interceptor.LoggingOutInterceptor\'/&gt; &lt;bean id=\'logginInInterceptor\' class=\'org.apache.cxf.interceptor.LoggingInInterceptor\'/&gt; &lt;!-- Producer Endpoint --&gt; &lt;cxf:cxfEndpoint id=\'endpoint.service.worklist\' address=\'jms://\'serviceClass=\'com.redhat.mycompany.helloworld.HelloWorldService\' serviceName=\'s:HelloWorldService\' endpointName=\'s:HelloWorldOverJms\' xmlns:s=\'http://helloworld.atos.redhat.com\'&gt; &lt;cxf:features&gt; &lt;bean xmlns=\'http://www.springframework.org/schema/beans\'class=\'org.apache.cxf.transport.jms.JMSConfigFeature\'&gt; &lt;property name=\'jmsConfig\' ref=\'jms.config.service\' /&gt; &lt;/bean&gt; &lt;/cxf:features&gt; &lt;cxf:inInterceptors&gt; &lt;ref bean=\'logginInInterceptor\'/&gt; &lt;/cxf:inInterceptors&gt; &lt;cxf:outInterceptors&gt; &lt;ref bean=\'logginOutInterceptor\'/&gt; &lt;/cxf:outInterceptors&gt; &lt;/cxf:cxfEndpoint&gt; &lt;camelContext xmlns=\'http://camel.apache.org/schema/spring\'&gt; &lt;package&gt;com.redhat.mycompany.cxf&lt;/package&gt; &lt;/camelContext&gt;&lt;/beans&gt;   ',0
'CXFEndpoint blueprint config having binding element may lead to NPE   \tThere seems to be an error in the EndpointpointDefinitionParser in parsing the binding element. Concretely speaking  that element is not parsed from the right element but wrongly from its parent element.So  when you have something like &lt;camel-cxf:cxfEndpoint id=\'routerEndpoint\' ...&gt; ... &lt;camel-cxf:binding&gt; &lt;soap:soapBinding mtomEnabled=\'true\' version=\'1.2\'/&gt; &lt;/camel-cxf:binding&gt; &lt;/camel-cxf:cxfEndpoint&gt;you may get an NPE  as shown in:java.lang.NullPointerException: null at org.apache.aries.blueprint.container.RecipeBuilder.getValue(RecipeBuilder.java:335) ~&#91;na:na&#93; at org.apache.aries.blueprint.container.RecipeBuilder.createBeanRecipe(RecipeBuilder.java:258) ~&#91;na:na&#93; at org.apache.aries.blueprint.container.RecipeBuilder.createRecipe(RecipeBuilder.java:106) ~&#91;na:na&#93; at org.apache.aries.blueprint.container.RecipeBuilder.createRepository(RecipeBuilder.java:89) ~&#91;na:na&#93; at org.apache.aries.blueprint.container.BlueprintContainerImpl.getRepository(BlueprintContainerImpl.java:438) ~&#91;na:na&#93; at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:288) ~&#91;na:na&#93; at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:230) ~[na:naFixing this line in EndpointDefinitionParser will fix this issue.   ',0
'Race condition in AggregatorProcessor recovery sometimes causes duplicates   \tThere seems to be a race condition in org.apache.camel.processor.aggregate.AggregateProcessor\'s RecoverTask. That task calls recoverable.scan() to find Exchanges that may need to be recovered. Since scan() might return Exchanges that are actually just in progress  the RecoverTask then checks to see if the Exchange really is in progress. It does this by calling inProgressCompleteExchanges.contains(exchangeId). However  that collection may have been modified during the time between when scan() returned and when contains() is called. This would happen if the in-progress Exchange completes before contains() is called. In that situation  inProgress would evaluate to false  so the Exchange would be recovered. This results in a duplicate Exchange being output by the Aggregator component. One possible solution might be to prevent updating the inProgressCompleteExchanges during the critical section. Another possible solution might be to copy inProgressCompleteExchanges before calling scan(). I\'m sure that there are other ways to deal with this also.   ',0
'step in a  block runs when the  tag is closed in the wrong place   \tExample route:&lt;doTry&gt; &lt;to ... &gt;&lt;/doTry&gt;&lt;doCatch&gt; &lt;exception&gt;java.lang.Exception&lt;/exception&gt; &lt;to uri=\'log.... \'/&gt;&lt;/doCatch&gt;The &lt;to uri=\'log...\'/&gt; line will execute every time  regardless if there is an exception or not.I believe the preferred behavior would be that the route should fails to load/validate. Alternatively  the &lt;to uri=\'log..\' /&gt; should not run when there is not an exception.Thanks!   ',0
'camel-jms: InOut exchange can time out even if response was received   \tWhen performing an InOut JMS exchange with a certain requestTimeout  if the reply message is received in time  but the following formula stands true: T0 + T1 &gt;= T!  where:T0 = JMS response timeT1 = remaining route processing time following the replyT! = requestTimeoutThen camel-jms will throw an ExchangeTimedOutException regardless of the fact that the reply was truly received in time.I\'m surprised this bug has gone unnoticed until now  as it\'s been present since mid-2010.Example unit test: @Test public void testTimeoutNotTriggered() throws Exception { getMockEndpoint(\'mock:exception\').expectedMessageCount(0); template.requestBody(\'activemq:test\'  \'&lt;hello /&gt;\'); assertMockEndpointsSatisfied(); } @Override protected RouteBuilder createRouteBuilder() throws Exception { return new RouteBuilder() { @Override public void configure() throws Exception { onException(ExchangeTimedOutException.class) .handled(true) .to(\'mock:exception\'); from(\'activemq:test\') .inOut(\'activemq:test?requestTimeout=500\') .delay(constant(1000)); from(\'activemq:test\') .log(\'test\'); } }; }   ',0
'Simple language - bean function - issue when parameter value has comma   \tSee nabblehttp://camel.465427.n5.nabble.com/Prolems-with-parametrized-bean-method-call-via-simple-tp5728319.html   ',0
'NPE when using the imap mail component with quartz or the timer and pollEnrich   \tThere is a NPE when using the imap mail component with quartz or the timer and pollEnrich as dicussed here:http://camel.465427.n5.nabble.com/Schedule-file-mail-endpoint-td3356666.html#a3357538I reproduced it on version 2.10.3 and 2.10.4 with &lt;route id=\'myTest\'&gt; &lt;from uri=\'timer://foo?fixedRate=true&amp;period=10000\'/&gt; &lt;pollEnrich uri=\'imap://userName@hostName?password=***\'/&gt;  &lt;to uri=\'log:testroute?showAll=true&amp;level=INFO\'/&gt; &lt;/route&gt;We need to use it with the quartz component (so we can use a cron expression)  but get the same error &lt;route id=\'myTest\'&gt; &lt;from uri=\'quartz://testTimer?cron=0+?\'/&gt; &lt;pollEnrich uri=\'imap://userName@hostName?password=***\'/&gt;  &lt;to uri=\'log:testroute?showAll=true&amp;level=INFO\'/&gt; &lt;/route&gt;11/03/2013 10:32:04 &#91;DefaultQuartzScheduler-context_Worker-1&#93; ERROR org.apache.camel.processor.DefaultErrorHandler - Failed delivery for (MessageId: ID-W7-009430-52415-1362994261595-0-3 on ExchangeId: ID-W7-009430-52415-1362994261595-0-2). Exhausted after delivery attempt: 1 caught: org.apache.camel.CamelExchangeException: Error occurred during aggregation. Exchange[Message: &#91;Body is null&#93;]. Caused by: [org.apache.camel.RuntimeCamelException - Failed to extract body due to: null. Exchange: Exchange&#91;MailMessage: com.sun.mail.imap.IMAPMessage@411a3fe4&#93;. Message: com.sun.mail.imap.IMAPMessage@411a3fe4]org.apache.camel.CamelExchangeException: Error occurred during aggregation. Exchange[Message: &#91;Body is null&#93;]. Caused by: [org.apache.camel.RuntimeCamelException - Failed to extract body due to: null. Exchange: Exchange&#91;MailMessage: com.sun.mail.imap.IMAPMessage@411a3fe4&#93;. Message: com.sun.mail.imap.IMAPMessage@411a3fe4] at org.apache.camel.processor.PollEnricher.process(PollEnricher.java:194)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:308)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.loadbalancer.QueueLoadBalancer.process(QueueLoadBalancer.java:44)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.loadbalancer.QueueLoadBalancer.process(QueueLoadBalancer.java:71)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.component.quartz.QuartzEndpoint.onJobExecute(QuartzEndpoint.java:113)&#91;camel-quartz-2.10.4.jar:2.10.4&#93; at org.apache.camel.component.quartz.CamelJob.execute(CamelJob.java:61)&#91;camel-quartz-2.10.4.jar:2.10.4&#93; at org.quartz.core.JobRunShell.run(JobRunShell.java:216)&#91;quartz-1.8.5.jar:&#93; at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:549)&#91;quartz-1.8.5.jar:&#93;   ',0
'Camel stream producer never close the stream of file   \tWhen I was working on CAMEL-6147  I found the file stream is never closed  even it met the close condition.   ',0
'SQL component will not look for parameters in header when no body in message   \tLine 60 in SqlProducer checks if the body is null. This will cause any parameters in header fields not to be populated into the prepared statement. Sample scenario is with a camel-jetty enriching a response using camel-sql.   ',0
'Aggregate EIP - Completion from batch consumer should trigger first   \tSee nabblehttp://camel.465427.n5.nabble.com/Issue-Aggregator2-BatchCompletion-disturbed-by-other-completions-and-fails-to-happen-when-it-probabl-tp5728850.html   ',0
'camel-http - When bridging endpoints then there may be double parameter values if client sends uri parameters   \tIf you have a jetty/http bridge endpoint  and the caller sends in a parameter with a value that has url encodings  then you may have double values when calling the bridge.eg callinghttp://localhost:23001/jettyTestRouteA?param1=\%2B447777111222And having a jetty -&gt; http bridge  you can end up with double values.Caused by: java.lang.AssertionError: expected:&lt; 447777111222&gt; but was:&lt;[+447777111222  +447777111222]&gt;   ',0
'http4 component should default to charset based on content type   \tHttpProducer determines the charset of an outgoing StringEntity based on an Exchange property (Exchange.CHARSET_NAME)  using null if that property is not set. It also sets the content-type based on the content-type of the camel message (this may also contain a character encoding). If these two don\'t match the receiver of the http request will probably not be able to parse the message. It would be better if the charset of the StringEntity would by default match the charset specified in the content-type. Matching these two is done when receiving response messages (in HttpProducer.extractResponseBody())...Suggested fix (in HttpProducer.createRequestEntity())  you could of course also do something like org.apache.camel.component.http4.helper.HttpHelper.setCharsetFromContentType() but my approach uses org.apache.http.entity.ContentType and java.nio.charset.Charset instead of trying to determine the correct charset itself):// be a bit careful with String as any type can most likely be converted to String// so we only do an instanceof check and accept String if the body is really a String// do not fallback to use the default charset as it can influence the request// (for example application/x-www-form-urlencoded forms being sent)String charset = IOHelper.getCharsetName(exchange  false);if (charset == null &amp;&amp; contentType != null){ ContentType ct = ContentType.parse(contentType); if (ct != null) { Charset cs = ct.getCharset(); if (cs != null) { charset = cs.name(); } }}StringEntity entity = new StringEntity((String) data  charset);entity.setContentType(contentType);answer = entity;   ',0
'TransferExchage InOut ActiveMQ Exception   \tThe scnearios are : when using the transferExchange option only on the producer  I don\'t get the body back  but not the header. When I use the transferExchange option on both producer and consumer  I get the headers back  but not the body. And instead I get the following exception[ryQueueReplyManager[temporary]] TemporaryQueueReplyManager WARN Execution of JMS message listener failed. Caused by: [java.lang.NullPointerException - null]java.lang.NullPointerException at org.apache.camel.impl.DefaultExchangeHolder.unmarshal(DefaultExchangeHolder.java:107) at org.apache.camel.component.jms.JmsBinding.extractBodyFromJms(JmsBinding.java:128) at org.apache.camel.component.jms.JmsMessage.createBody(JmsMessage.java:214) at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:41) at org.apache.camel.component.jms.reply.ReplyManagerSupport.processReply(ReplyManagerSupport.java:136) at org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler.onReply(TemporaryQueueReplyHandler.java:54) at org.apache.camel.component.jms.reply.TemporaryQueueReplyManager.handleReplyMessage(TemporaryQueueReplyManager.java:71) at org.apache.camel.component.jms.reply.ReplyManagerSupport.onMessage(ReplyManagerSupport.java:113) at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560) at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498) at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947) at java.lang.Thread.run(Thread.java:662)   ',0
'camel-bindy - Multiple models in the same package lead to unpredictable results   \tBindyCsvDataFormat only holds one model. When multiple models are defined in the same package or field positions overlap  only one @DataField is kept (the last one) overwriting the previous mapping. This leads to unpredictable behavior  from the wrong field value being populated  to format mismatch exceptions for fields of different types.This behavior is by design  as camel supports deep models  spread over multiple files (see AnnotationModelLoader.loadModels() implementation where whole packages are scanned).The documentation is rather vague  but I believe supporting multiple models in the same package is not really feasible  and overkill at best. Therefore my preference would be to keep the functionality as is and document the limitation.Currently the BindyCVSFieldEndingWithSeparatorIssueTest fails due to a conflict between MyCsvRecord.class and BindyDoubleQuotesCsvUnmarshallTest.Order.class defined in the same package. Moving MyCsvRecord to a different package is a trivial fix. I will look into adding some model validation as well to WARN if the model is inconsistent (i.e. has overlaps or gaps).   ',0
'camel:run in blueprint is broken   \tDue the Aries blueprint upgrade then the blueprint extenders may run 2+ due classpath issues.   ',1
'camel-aws - Possible concurrent modification exception   \tNoticed this from CI test serversStacktracejava.util.ConcurrentModificationException at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:819) at java.util.ArrayList$Itr.next(ArrayList.java:791) at org.apache.camel.component.aws.sqs.SqsExtendMessageVisibilityTest.longReceiveExtendsMessageVisibility(SqsExtendMessageVisibilityTest.java:61) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:601) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30) at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:47) at org.junit.rules.RunRules.evaluate(RunRules.java:18) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30) at org.junit.runners.ParentRunner.run(ParentRunner.java:300) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:119) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:101) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:601) at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103) at com.sun.proxy.$Proxy0.invoke(Unknown Source) at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150) at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)Standard Output@SLTests run: 1  Failures: 0  Errors: 0  Skipped: 0  Time elapsed: 2.032 sec@SLRunning org.apache.camel.component.aws.sqs.SqsExtendMessageVisibilityTest   ',0
'Scheduled thread pools is not removed from JMX when shutting down   \tFor example if a route use the aggragate eip with a completion timeout  then the scheduled thread pool is enlisted in JMX. But not removed when the route is removed. Though as fail-safe we always remove the JMX when camel is stopping.But for people doing dynamic add/remove routes this can become a problem.   ',0
'Simple ognl expression - Possible NPE when using String replaceFirst and replacing with an empty string   \tSee nabblehttp://camel.465427.n5.nabble.com/2-11-NPE-with-replaceFirst-tp5730321.html   ',1
'org.apache.camel.support.ServiceSupport: InputStream not being explicitly closed   \tIn method getVersion() of ServiceSupport there is an InputStream opened around line 284:InputStream is = getClass().getResourceAsStream(\'/META-INF/maven/org.apache.camel/camel-core/pom.properties\');This stream is not closed explicitly.If you undeploy an application from a container like GlassFish you get a warning like this:[#|2013-04-11T18:02:00.783+0200|WARNING|glassfish3.1.2|javax.enterprise.system.core.classloading.com.sun.enterprise.loader|_ThreadID=137;_ThreadName=Thread-2;|Input stream has been finalized or forced closed without being explicitly closed; stream instantiation reported in following stack tracejava.lang.Throwable at com.sun.enterprise.loader.ASURLClassLoader$SentinelInputStream.&lt;init&gt;(ASURLClassLoader.java:1230) at com.sun.enterprise.loader.ASURLClassLoader$InternalJarURLConnection.getInputStream(ASURLClassLoader.java:1338) at java.net.URLClassLoader.getResourceAsStream(URLClassLoader.java:233) at com.sun.enterprise.loader.ASURLClassLoader.getResourceAsStream(ASURLClassLoader.java:872) at java.lang.Class.getResourceAsStream(Class.java:2049) at org.apache.camel.support.ServiceSupport.getVersion(ServiceSupport.java:284) at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1439) at org.apache.camel.cdi.CdiCamelContext.start(CdiCamelContext.java:61) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#91;...&#93;These were similar issues: XBEAN-190  JCR-2962   ',0
'camel-cxfrs blueprint configure could not be installed if there are some subelement settings   \tGot the OOM Exception when blueprint want to parser the setting like this.&lt;camelcxf:rsClient id=\'rsClient\' address=\'http://localhost:9002/rest\' serviceClass=\'org.apache.camel.itest.osgi.cxf.jaxrs.testbean.CustomerService\'&gt; &lt;camelcxf:features&gt; &lt;bean class=\'org.apache.cxf.feature.LoggingFeature\'/&gt; &lt;/camelcxf:features&gt; &lt;/camelcxf:rsClient&gt;   ',0
'StringQuoteHelper - Should ignore whitespace between quoted parameters   \tNeed to merge to 2.11 branch when created.   ',0
'camel-example-reportincident failed   \t2013-04-14 12:40:23 207 [main ] ERROR ContextLoader - Context initialization failedorg.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route route1: Route(route1)[[From[cxf:/incident?bus=#cxf&amp;serviceClass=org.... because of Failed to resolve endpoint: cxf:///incident?bus=\%23cxf&amp;serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&amp;wsdlURL=etc\%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn\'t a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1338) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:120) at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740) at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238) at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238) at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683) at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480) at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229) at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95) at org.eclipse.jetty.server.Server.doStart(Server.java:275) at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511) at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364) at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521) at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59) at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183) at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161) at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320) at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156) at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537) at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196) at org.apache.maven.cli.MavenCli.main(MavenCli.java:141) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290) at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230) at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409) at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route1: Route(route1)[[From[cxf:/incident?bus=#cxf&amp;serviceClass=org.... because of Failed to resolve endpoint: cxf:///incident?bus=\%23cxf&amp;serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&amp;wsdlURL=etc\%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn\'t a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:181) at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:749) at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1828) at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1608) at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1477) at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179) at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1445) at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118) ... 48 moreCaused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxf:///incident?bus=\%23cxf&amp;serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&amp;wsdlURL=etc\%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn\'t a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:507) at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:62) at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:191) at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108) at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114) at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72) at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:861) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:176) ... 57 moreCaused by: java.lang.IllegalArgumentException: Could not find a suitable setter for property: bus as there isn\'t a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:526) at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:536) at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:430) at org.apache.camel.util.EndpointHelper.setProperties(EndpointHelper.java:249) at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:258) at org.apache.camel.component.cxf.CxfComponent.createEndpoint(CxfComponent.java:84) at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:119) at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:487) ... 65 more2013-04-14 12:40:23.217:WARN:oejw.WebAppContext:Failed startup of context o.m.j.p.JettyWebAppContext{/ file:/Users/cmueller/workspaceRelease/camel/examples/camel-example-reportincident/src/main/webapp/} file:/Users/cmueller/workspaceRelease/camel/examples/camel-example-reportincident/src/main/webapp/org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route route1: Route(route1)[[From[cxf:/incident?bus=#cxf&amp;serviceClass=org.... because of Failed to resolve endpoint: cxf:///incident?bus=\%23cxf&amp;serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&amp;wsdlURL=etc\%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn\'t a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1338) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:120) at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740) at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238) at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238) at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683) at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480) at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229) at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95) at org.eclipse.jetty.server.Server.doStart(Server.java:275) at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511) at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364) at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521) at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59) at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183) at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161) at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320) at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156) at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537) at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196) at org.apache.maven.cli.MavenCli.main(MavenCli.java:141) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290) at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230) at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409) at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)Caused by:org.apache.camel.FailedToCreateRouteException: Failed to create route route1: Route(route1)[[From[cxf:/incident?bus=#cxf&amp;serviceClass=org.... because of Failed to resolve endpoint: cxf:///incident?bus=\%23cxf&amp;serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&amp;wsdlURL=etc\%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn\'t a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:181) at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:749) at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1828) at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1608) at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1477) at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179) at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1445) at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118) at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740) at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238) at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238) at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683) at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480) at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229) at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95) at org.eclipse.jetty.server.Server.doStart(Server.java:275) at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511) at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364) at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521) at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59) at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183) at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161) at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320) at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156) at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537) at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196) at org.apache.maven.cli.MavenCli.main(MavenCli.java:141) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290) at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230) at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409) at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)Caused by:org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxf:///incident?bus=\%23cxf&amp;serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&amp;wsdlURL=etc\%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn\'t a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:507) at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:62) at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:191) at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108) at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114) at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72) at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:861) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:176) at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:749) at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1828) at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1608) at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1477) at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179) at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1445) at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118) at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740) at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238) at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238) at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683) at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480) at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229) at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95) at org.eclipse.jetty.server.Server.doStart(Server.java:275) at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511) at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364) at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521) at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59) at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183) at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161) at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320) at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156) at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537) at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196) at org.apache.maven.cli.MavenCli.main(MavenCli.java:141) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290) at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230) at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409) at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)Caused by:java.lang.IllegalArgumentException: Could not find a suitable setter for property: bus as there isn\'t a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:526) at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:536) at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:430) at org.apache.camel.util.EndpointHelper.setProperties(EndpointHelper.java:249) at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:258) at org.apache.camel.component.cxf.CxfComponent.createEndpoint(CxfComponent.java:84) at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:119) at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:487) at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:62) at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:191) at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108) at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114) at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72) at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:861) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:176) at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:749) at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1828) at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1608) at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1477) at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179) at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1445) at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118) at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740) at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238) at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238) at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683) at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480) at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229) at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95) at org.eclipse.jetty.server.Server.doStart(Server.java:275) at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511) at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364) at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521) at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59) at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183) at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161) at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320) at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156) at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537) at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196) at org.apache.maven.cli.MavenCli.main(MavenCli.java:141) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290) at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230) at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409) at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)2013-04-14 12:40:23.241:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:9080   ',0
'camel-example-cxf-tomcat failed   \tBy accessing \'http://localhost:8080/camel-example-cxf-tomcat/webservices/incident?wsdl\' I get the following exception:Apr 14  2013 7:56:37 PM org.apache.catalina.core.StandardWrapperValve invokeSEVERE: Allocate exception for servlet CXFServletorg.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named \'cxf\' is defined at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:549) at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1095) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:277) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1109) at org.apache.cxf.transport.servlet.CXFServlet.loadBus(CXFServlet.java:77) at org.apache.cxf.transport.servlet.CXFNonSpringServlet.init(CXFNonSpringServlet.java:71) at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1280) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1193) at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:865) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:136) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:936) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407) at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1004) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589) at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:310) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918) at java.lang.Thread.run(Thread.java:680)   ',1
'Restarting routes using sql aggregation repository may lead to Class loading issues   \tIts the code in ClassLoadingAwareObjectInputStream in camel-sql that has the bug.   ',0
'AdviceWith doesn\'t work with doTry   \tI have the following route definition: from(\'direct:billing_\' + operation) .routeId(getRouteId(operation)) .errorHandler(noErrorHandler()) // propagate exceptions to the parent route .validate(body().isInstanceOf( com.cleverlance.cleverbss.integration.modules.in.customer.model.Customer.class)) .beanRef(BILLING_CUSTOMER_ROUTE_BEAN  \'createRequestFor\' + WordUtils.capitalize(operation)) // SetCustomer -&gt; XML .marshal(jaxbIn) .doTry() .to(uri + \'?messageSender=#billingSender\').id(\'toURI\') .doCatch(AlreadyExistsException.class) .setProperty(exPropertyName  property(Exchange.EXCEPTION_CAUGHT)) .end() .choice() .when(property(exPropertyName).isNull()) // XML -&gt; SetCustomerResponse .unmarshal(jaxbOut) .endChoice();And I would like to replace TO in the tests: getCamelContext().getRouteDefinition(BillingCustomerRoutes.ROUTE_ID_UPDATE_CUSTOMER) .adviceWith(getCamelContext()  new AdviceWithRouteBuilder() { @Override public void configure() throws Exception { weaveByType(ToDefinition.class).replace().process(new Processor() { @Override public void process(Exchange exchange) throws Exception { throw new AlreadyExistsException(\'msg\'  new AlreadyExists()); } }); } });When I use weaveById(\'toURI\') or weaveByToString()  it doesn\'t work neither.   ',0
'Mina UDP default codec should keep the data as byte[]   \tThe MinaUdpProtocolCodecFactory on the consumer side decodes data from an udp datagram to a byte[]. byte[] bytes = context.getTypeConverter().convertTo(byte[].class  in);On the provider side where it gets back to the wire it gets converted to a string: String value = context.getTypeConverter().convertTo(String.class  message);and then set to the ByteBuffer with the given charset.The result is that the original datagram is not valid anymore. The default codec should the data convert to a byte array or keep the data as byte array.   ',0
'debugBefore() and debugAfter() not called if unit test extends CamelBlueprintTestSupport   \tA test that extends CamelBlueprintTestSupport does not get its debugBefore() and debugAfter() methods called.   ',0
'Property placeholder optimization broke placeholders in Spring camelContext configuration   \tWe are upgrading from 2.10.0 to 2.11.0  and are getting an error on startup.Example Spring configuration:&lt;camelContext id=\'camel\' handleFault=\'true\' autoStartup=\'{{autoStartup}}\' xmlns=\'http://camel.apache.org/schema/spring\'&gt; &lt;contextScan /&gt; &lt;jmxAgent id=\'camelAgent\' createConnector=\'true\' registryPort=\'{{jmxPort}}\' /&gt;&lt;/camelContext&gt;&lt;bean id=\'properties\' class=\'org.apache.camel.component.properties.PropertiesComponent\'&gt; &lt;property name=\'location\' value=\'classpath:foo.properties\'/&gt;&lt;/bean&gt;As you can see  we use the Camel properties component to configure Camel auto-startup  JMX port  etc.This is the error we\'re getting on startup:org.springframework.beans.factory.BeanCreationException: Error creating bean with name \'properties\' defined in class path resource [org/apache/camel/component/properties/SpringPropertiesComponentTest.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name \'camel-1\': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: PropertiesComponent with name properties must be defined in CamelContext to support property placeholders. at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:607) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:925) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:472) at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:139) at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:83) at org.apache.camel.component.properties.SpringPropertiesComponentTest.createApplicationContext(SpringPropertiesComponentTest.java:30) at org.apache.camel.spring.SpringTestSupport.setUp(SpringTestSupport.java:52) at junit.framework.TestCase.runBare(TestCase.java:139) at org.apache.camel.TestSupport.runBare(TestSupport.java:58) at junit.framework.TestResult$1.protect(TestResult.java:122) at junit.framework.TestResult.runProtected(TestResult.java:142) at junit.framework.TestResult.run(TestResult.java:125) at junit.framework.TestCase.run(TestCase.java:129) at junit.framework.TestSuite.runTest(TestSuite.java:255) at junit.framework.TestSuite.run(TestSuite.java:250) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name \'camel-1\': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: PropertiesComponent with name properties must be defined in CamelContext to support property placeholders. at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1455) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1109) at org.apache.camel.spring.CamelBeanPostProcessor$1.getOrLookupCamelContext(CamelBeanPostProcessor.java:69) at org.apache.camel.impl.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:85) at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:148) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:394) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1448) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) ... 27 moreCaused by: java.lang.IllegalArgumentException: PropertiesComponent with name properties must be defined in CamelContext to support property placeholders. at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:1063) at org.apache.camel.util.CamelContextHelper.parseBoolean(CamelContextHelper.java:337) at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.initCamelContext(AbstractCamelContextFactoryBean.java:543) at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.afterPropertiesSet(AbstractCamelContextFactoryBean.java:266) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1514) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1452) ... 40 moreI believe this is a side-effect of the optimization introduced in CAMEL-5508  which was incorporated into 2.10.1 and 2.11.0.I\'ll attach a small patch that modifies one of the unit tests in the camel-spring component to reproduce the issue.   ',1
'Camel-validator not able to resolve schema when using useSharedSchema=false   \tThis one works: &lt;to uri=\'validator:META-INF/xsd/fundscheckmaintainavailablebalance.xsd\' /&gt;This one doesn\'t: &lt;to uri=\'validator:META-INF/xsd/fundscheckmaintainavailablebalance.xsd?useSharedSchema=false\' /&gt;it fails with:org.xml.sax.SAXParseException: schema_reference.4: Failed to read schema document \'null\'  because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not &lt;xsd:schema&gt;.The streamsource object in the validator is populated  but the buffered inputstream object has no content   ',0
'DefaultShutdownStrategy shutdown timeout of 0 will never timeout and go in negative time   \tA timeout of 0 won\'t timeout in the instant  the time will go negative. camelcontext.stopRoute(routeId  0  TimeUnit.SECONDS  false); &#91;org.apache.camel.impl.DefaultShutdownStrategy&#93; : Waiting as there are still 3 inflight and pending exchanges to complete  timeout in -1 seconds.&#91;org.apache.camel.impl.DefaultShutdownStrategy&#93; : Waiting as there are still 3 inflight and pending exchanges to complete  timeout in -2 seconds.&#91;org.apache.camel.impl.DefaultShutdownStrategy&#93; : Waiting as there are still 3 inflight and pending exchanges to complete  timeout in -3 seconds. Found a post related to it there : http://camel.465427.n5.nabble.com/Forcefully-shutting-down-routes-td5722447.html   ',0
'vm component - Stopping a route when using multipleConsumers should not stop MP if there is other routes using it   \tSee nabblehttp://camel.465427.n5.nabble.com/Removing-route-stops-other-routes-from-the-same-producer-tp5732616.html   ',0
'Headers are not set correctly in some situation   \tIf I define a route like this: from(\'&lt;MyUrl&gt;/test\') .setHeader(Exchange.HTTP_RESPONSE_CODE  simple(\'400\')); my http client get a 200 response code. If a add something else on the route like: from(\'&lt;MyUrl&gt;/test\') .setHeader(Exchange.HTTP_RESPONSE_CODE  simple(\'400\')) .log(\'400\').my http client get a 400 response code as expected. forum :http://camel.465427.n5.nabble.com/route-http-code-td5732728.html   ',0
'New restlet endpoints don\'t work if route is created after restlet server is started.   \tIf a route with restlet endponit is created after restlet server is started  restlet can\'t handle the endpoint correctly  because restlet translate all URI pattern of routes at server starting  but don\'t it for later attached routes. So we must translate the URI pattern before attach it to restlet after restlet server is started. See http://restlet.tigris.org/issues/show_bug.cgi?id=988.   ',0
'Route with suspended SedaConsumer can\'t be stopped correctly   \tRoute with suspended SedaConsumer can\'t be stopped correctly. Here is test: @Test public void testOriginalSedaShutdownSuspended() throws Exception { SedaEndpoint endpoint = context().getEndpoint(\'seda:test\'  SedaEndpoint.class); context().addRouteDefinition(new RouteDefinition() .id(\'testRoute\') .from(endpoint) .to(\'log:body\') ); Set&lt;SedaConsumer&gt; consumers = endpoint.getConsumers(); Assert.assertFalse(consumers.isEmpty()); for (SedaConsumer sedaConsumer: consumers) { sedaConsumer.suspend(); } Assert.assertTrue(context().stopRoute(\'testRoute\'  2  TimeUnit.SECONDS  true)); }   ',0
'File consumer - Race condition for markerFile read lock strategy   \tSee nabblehttp://camel.465427.n5.nabble.com/File-markerFile-strategy-race-condition-tp5733561.htmlWe should delete the .camelLock file last  as currently we move the processed file first. And there is a very tiny tiny window where another process could potential see the file and pickup it.   ',0
'baseResource of Jetty ServletContextHandler does not work when project deployed as a bundle   \tIf we package a camel websocket route (\'websocket://0.0.0.0:9090/newsTopic?sendToAll=true&amp;staticResources=classpath:webapp\') as a bundle and set the staticResources as parameter (classpath:webapp)  then the pages cannot be accessed from the browserCode should be  if (resources[0].equals(\'classpath\')) { URL url = this.getCamelContext().getClassResolver().loadResourceAsURL(resources[1]); context.setBaseResource(Resource.newResource(url)); } else if (resources[0].equals(\'file\')) { context.setBaseResource(Resource.newResource(resources[1])); }   ',0
'endChoice() has no effect in nested choice definition   \tI just upgraded from 2.10.4 to 2.11.0 and noticed that nested choice definitions started acting strangely. For example: .choice() .when(header(Exchange.EXCEPTION_CAUGHT).isNotNull()) // 1 .setBody(exceptionMessage().append(SystemUtils.LINE_SEPARATOR).append(exceptionStackTrace())) .choice() .when(header(HEADER_CONTROLLER_ID).isNotNull()) // 1a .setHeader(Exchange.FILE_NAME  simple(AUDIT_CONTROLLER_FAILED_FILENAME + \'.error.log\')) .to(ENDPOINT_AUDIT_DIR) .otherwise() // 1b .setHeader(Exchange.FILE_NAME  simple(AUDIT_FAILED_FILENAME + \'.error.log\')) .to(ENDPOINT_AUDIT_DIR) // INSERTING .end() here solves the issue .endChoice() .log(LoggingLevel.WARN  \'DLQ written: ${in.header.CamelExceptionCaught}\' .otherwise() // 2 .log(LoggingLevel.WARN  \'DLQ written\' + MESSAGE_LOG_FORMAT) .end()I have a test that is supposed to go through 1 and 1a. However it now passes through 1 and 2!It looks like the endChoice() in 1b has no effect and the otherwise() in 2 is executed instead of 1b. Inserting and end() statement as shown seems to solve the issue  but it looks suspicious.It\'s probably a regression introduced by the fix for CAMEL-5953  but I\'m not 100\% sure.   ',1
'camel-quartz - Stateful job - Redeploying bundle/war and having changed endpoint uri issue   \tSeehttp://camel.465427.n5.nabble.com/In-came-quartz-route-after-bundle-update-jobs-are-not-triggred-tp5734196.htmlIn these situations we should use job.name to name the job unique so when you change the endpoint uri and redeploy the apps/bundles  then camel-quartz can find the old job in the quartz persistent store.There may be logic needed to lookup using job.name as the unique name in these situations  and then allow endpoint uri options to change over time  such as the cron trigger etc. Which should be adjusted accordingly as well.   ',0
'connectionTimeout property is ignored by JavaMail   \tJavaMail ignores the timeout values set via the connectionTimeout property. Within MailConfiguration::createJavaMailProperties the mail.&lt;protocol&gt;.timeout and mail.&lt;protocol&gt;.connectionTimeout parameters are set as long values In com.sun.mail.util.PropUtil::getInt (line 141) the property is ignored since it is a long valueChanging the type of connectionTimeout from long to int would be the cleanest solution - another suggestion would be to downcast the connectionTimeout in MailConfiguration::createJavaMailProperties   ',0
'NULL values are not supported in named parameters   \tDue to the bug in the DefaultSqlPrepareStatementStrategy there no ability to use NULL values.Following query will be failed  if we try to use NULL as a parameter value:select a  b from foo where (:#param1 IS NOT NULL AND a &gt; 12 ) OR (:#param2 IS NOT NULL AND b &gt; 12)We\'ll get an error: Caused by: java.sql.SQLException: Number of parameters mismatch. Expected: 2  was:1at org.apache.camel.component.sql.DefaultSqlPrepareStatementStrategy.populateStatement(DefaultSqlPrepareStatementStrategy.java:132) ~&#91;camel-sql-2.11.0.jar:2.11.0&#93; at org.apache.camel.component.sql.SqlProducer$1.doInPreparedStatement(SqlProducer.java:74) ~&#91;camel-sql-2.11.0.jar:2.11.0&#93; at org.apache.camel.component.sql.SqlProducer$1.doInPreparedStatement(SqlProducer.java:57) ~&#91;camel-sql-2.11.0.jar:2.11.0&#93; at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:587) ~&#91;spring-jdbc-3.1.4.RELEASE.jar:3.1.4.RELEASE&#93;Fix is quite simple: iterator implementation (returned by DefaultSqlPrepareStatementStrategy.createPopulateIterator()) should be changed as follows: return new Iterator&lt;Object&gt;() { private NamedQueryParser parser = new NamedQueryParser(query); private String nextParam; private boolean done; @Override public boolean hasNext() { if (done) { return false; } if (nextParam == null) { nextParam = parser.next(); if (nextParam == null) { done = true; } } return nextParam != null; } @Override public Object next() { if(!hasNext()){ throw new NoSuchElementException(); } boolean contains = bodyMap != null ? bodyMap.containsKey(nextParam) : false; contains |= headerMap != null ? headerMap.containsKey(nextParam) : false; if (!contains) { throw new RuntimeExchangeException(\'Cannot find key [\' + nextParam + \'] in message body or headers to use when setting named parameter in query [\' + query + \']\'  exchange); } // get from body before header Object next = bodyMap != null ? bodyMap.get(nextParam) : null; if (next == null) { next = headerMap != null ? headerMap.get(nextParam) : null; } nextParam = null; return next; } @Override public void remove() { // noop } };   ',0
'org.apache.camel.main.Main#doStop() throws java.lang.IndexOutOfBoundsException   \tWhen calling a Camel application with parameter -h all parameters are printed an the program exits.But it is no clean exit; it throws an java.lang.IndexOutOfBoundsException.The reason for this is the expression in doStop():+getCamelContexts().get(0).stop();get(0) returns null  if no context is initialized yet.See camel-users mailinglist  thread \'Bug in org.apache.camel.main.Main#doStop() ?\'   ',0
'SFTP: NPE if no private key file is supplied   \tHi a NPE is thrown if no private key file is supplied in the configuration for SFTP. The error isCaused by: java.lang.NullPointerException: while trying to get the length of an array loaded from local variable \'foo\'at com.jcraft.jsch.Buffer.putString(Buffer.java:59)I have analysed the code a bit and found that the problem is causedby the class SftpOperations. The method createSession sets the userInfo for the seesion by an inline class. Here the method promptKeyboardInteractive does not work correctly if no private key file is supplied. In that case JSCH switches to user/pw authorization and this method is called. But since there is no password maintained the configation object returns NULL. The present implementation adds it to the string array causing the error in JSCH. JSCH either wants a NULL string array or an empty string array (I have tested both). So the code should look e.g. as follows: public String[] promptKeyboardInteractive(String destination  String name  String instruction  String[] prompt  boolean[] echo) { String password = configuration.getPassword(); if (password == null) { return new String[0]; } else { return new String[] { password }; } }With that change JSCH returnsCaused by: java.io.FileNotFoundException: ./data/ssh/id_rsa (No such file or directory) at java.io.FileInputStream.open(Native Method)and that is the real cause of the error Best Regards J?rg   ',0
'Routing slip EIP - Does not send ExchangeSentEvent notifications   \tWhen using routing slip eip  then we only get the ExchangeSendingEvent  what we miss is the ExchangSentEvent.   ',0
'camel-netty - unable to consume on UDP multicast addresses   \tWhen using a route to listen to UDP multicast address   no messages seem to get consumed. No exceptions are observed. Multicast address is defined as addresses in the range of 224.0.0.0 through 239.255.255.255 (http://en.wikipedia.org/wiki/Multicast_address)Input was simple string (e.g. \'Test String\')Example Route:&lt;route&gt; &lt;from uri=\'netty:udp://225.1.1.1:8001?allowDefaultCodec=false&amp;sync=false&amp;broadcast=true\'/&gt;&lt;/route&gt;Found an old topic in the user discussion forum that seems related. Did not find any unit tests in the Camel source code exercising this behavior. (http://camel.465427.n5.nabble.com/camel-netty-and-multicast-tt4638622.html)   ',0
'Wrong InputStream reference is used in method storeFile of class ScpOperations   \tIn method storeFile(String name  Exchange exchange) of class org.apache.camel.component.jsch.ScpOperations the wrong reference of the required input stream is used (line 131). Should be write(channel  file  is  cfg); instead of write(channel  file  exchange.getIn().getMandatoryBody(InputStream.class)  cfg);   ',0
'camel-cxf should shutdown the bus when the endpoint is stopped.   \tIf the bus is create by cxfEndpoint itself  cxfEndpoint should shutdown it when the endpoint is stopped.   ',0
'JMX - browsable endpoints such as seda has some attributes listed as unavaiable   \tSee screenshotThe problem is related to extending a ManagedEndpoint then some options is shown as unavaiable in JMX consoles.   ',0
'Predicates from java dsl are not dumped to xml correctly   \tPredicates defined in the java dsl are not dumped to xml when using jmx.Eg  this java dsl route:from(\'seda:a\').choice().when(header(\'test\').isNotNull()).log(\'not null\').end().to(\'mock:a\');Will be dumped as this:&lt;?xml version=\'1.0\' encoding=\'UTF-8\' standalone=\'yes\'?&gt;&lt;route group=\'com.example.TestRoute\' id=\'route1\' xmlns=\'http://camel.apache.org/schema/spring\'&gt; &lt;from uri=\'seda:a\'/&gt; &lt;choice id=\'choice23\'&gt; &lt;when id=\'when24\'&gt; &lt;expressionDefinition/&gt; &lt;log message=\'not null\' id=\'log20\'/&gt; &lt;/when&gt; &lt;/choice&gt; &lt;to uri=\'mock:a\' id=\'to17\'/&gt;&lt;/route&gt;The &lt;expressionDefinition&gt; element should contain the expression.This seems similar to CAMEL-4733.   ',0
'camel-cmis component: test packages have the wrong name   \tUnit tests for camel-cmis are under package org.apache.camel.componenet instead of org.apache.camel.componentActions:1) Rename folder src/test/java/org/apache/camel/componenet to src/test/java/org/apache/camel/component/2) Fix the package name in each unit testAffected version: 2.12-SNAPSHOT and before   ',0
'camel-cxf ClassCastException when use cxf FailoverFeature   \tWith PAYLOAD data format used  the first element in argument is casted to a CxfPayload instance and the argument is changed into a List&lt;DOMSource&gt; instance by the method \'setParameters\' in class org.apache.camel.component.cxf.CxfEndpoint.Then FailoverFeature calls retry  the class-cast action throws a ClassCastException.btw: \'message.remove(DataFormat.class)\' at the end of the method \'setParameters\' dosn\'t work. The method \'remove\' is inherited from Map  and a new message with data format PAYLOAD is created when retry.   ',0
'SJMS component throws class cast error when used with IBM Webshpere MQ   \tWhen using the IBM MQ JMS classes and pub/sub over a TOPIC the JmsObjectFactory.createMessageConsumer method throws a cast class exception. The session is being cast to a TopicSession which for MQ it is not.Using pure jms this cast is not required as the session class is aware of the destination type.   ',0
'camel-dozer - Does not work well in OSGi Blueprint   \tDozer doesnt work to well in OSGi. It seems to work with spring  but fails with OSGi blueprint.2013-08-29 14:44:51 302 | ERROR | l Console Thread | BlueprintContainerImpl | container.BlueprintContainerImpl 393 | 7 - org.apache.aries.blueprint.core - 1.1.0 | Unable to start blueprint container for bundle blueorg.osgi.service.blueprint.container.ComponentDefinitionException: Error when instantiating bean dozerMapper of class class org.dozer.DozerBeanMapper at org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:333)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:806)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:787)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)[7:org.apache.aries.blueprint.core:1.1.0] at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)[:1.7.0_25] at java.util.concurrent.FutureTask.run(FutureTask.java:166)[:1.7.0_25] at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:668)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:370)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:261)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:259)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:222)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)[11:org.apache.aries.util:1.1.0] at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)[11:org.apache.aries.util:1.1.0] at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)[11:org.apache.aries.util:1.1.0] at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)[11:org.apache.aries.util:1.1.0] at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)[11:org.apache.aries.util:1.1.0] at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1103)[org.apache.felix.framework-4.0.3.jar:] at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:695)[org.apache.felix.framework-4.0.3.jar:] at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:483)[org.apache.felix.framework-4.0.3.jar:] at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4244)[org.apache.felix.framework-4.0.3.jar:] at org.apache.felix.framework.Felix.startBundle(Felix.java:1923)[org.apache.felix.framework-4.0.3.jar:] at org.apache.felix.framework.Felix.updateBundle(Felix.java:2235)[org.apache.felix.framework-4.0.3.jar:] at org.apache.felix.framework.BundleImpl.update(BundleImpl.java:962)[org.apache.felix.framework-4.0.3.jar:] at org.apache.felix.framework.BundleImpl.update(BundleImpl.java:949)[org.apache.felix.framework-4.0.3.jar:] at org.apache.karaf.shell.osgi.UpdateBundle.doExecute(UpdateBundle.java:37)[43:org.apache.karaf.shell.osgi:2.3.2] at org.apache.karaf.shell.osgi.BundleCommand.doExecute(BundleCommand.java:42)[43:org.apache.karaf.shell.osgi:2.3.2] at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:38)[14:org.apache.karaf.shell.console:2.3.2] at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35)[14:org.apache.karaf.shell.console:2.3.2] at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)[14:org.apache.karaf.shell.console:2.3.2] at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:474)[14:org.apache.karaf.shell.console:2.3.2] at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:400)[14:org.apache.karaf.shell.console:2.3.2] at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[14:org.apache.karaf.shell.console:2.3.2] at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)[14:org.apache.karaf.shell.console:2.3.2] at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)[14:org.apache.karaf.shell.console:2.3.2] at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)[14:org.apache.karaf.shell.console:2.3.2] at org.apache.karaf.shell.console.jline.Console.run(Console.java:173)[14:org.apache.karaf.shell.console:2.3.2] at java.lang.Thread.run(Thread.java:724)[:1.7.0_25]Caused by: org.dozer.MappingException: java.lang.ClassNotFoundException: org.dozer.util.DefaultClassLoader at org.dozer.util.MappingUtils.throwMappingException(MappingUtils.java:82) at org.dozer.util.DefaultClassLoader.loadClass(DefaultClassLoader.java:38) at org.dozer.DozerInitializer.loadBeanType(DozerInitializer.java:115) at org.dozer.DozerInitializer.initialize(DozerInitializer.java:97) at org.dozer.DozerInitializer.init(DozerInitializer.java:74) at org.dozer.DozerBeanMapper.init(DozerBeanMapper.java:173) at org.dozer.DozerBeanMapper.&lt;init&gt;(DozerBeanMapper.java:99) at org.dozer.DozerBeanMapper.&lt;init&gt;(DozerBeanMapper.java:94) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)[:1.7.0_25] at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)[:1.7.0_25] at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)[:1.7.0_25] at java.lang.reflect.Constructor.newInstance(Constructor.java:526)[:1.7.0_25] at org.apache.aries.blueprint.utils.ReflectionUtils.newInstance(ReflectionUtils.java:329)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BeanRecipe.newInstance(BeanRecipe.java:962)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:331)[7:org.apache.aries.blueprint.core:1.1.0] ... 39 moreCaused by: java.lang.ClassNotFoundException: org.dozer.util.DefaultClassLoader at java.net.URLClassLoader$1.run(URLClassLoader.java:366)[:1.7.0_25] at java.net.URLClassLoader$1.run(URLClassLoader.java:355)[:1.7.0_25] at java.security.AccessController.doPrivileged(Native Method)[:1.7.0_25] at java.net.URLClassLoader.findClass(URLClassLoader.java:354)[:1.7.0_25] at java.lang.ClassLoader.loadClass(ClassLoader.java:424)[:1.7.0_25] at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)[:1.7.0_25] at java.lang.ClassLoader.loadClass(ClassLoader.java:357)[:1.7.0_25] at java.lang.Class.forName0(Native Method)[:1.7.0_25] at java.lang.Class.forName(Class.java:270)[:1.7.0_25] at org.apache.commons.lang3.ClassUtils.getClass(ClassUtils.java:823) at org.apache.commons.lang3.ClassUtils.getClass(ClassUtils.java:889) at org.apache.commons.lang3.ClassUtils.getClass(ClassUtils.java:872) at org.dozer.util.DefaultClassLoader.loadClass(DefaultClassLoader.java:36) ... 52 more   ',0
'Using simple language OGNL expressions doesn\'t work for Bean Binding when a field is null   \tThe following functionality doesn\'t work  when one of the fields is null: http://camel.apache.org/bean-binding.htmlYou can also use the OGNL support of the Simple expression language. Now suppose the message body is an object which has a method named asXml. To invoke the asXml method we can do as follows:.bean(OrderService.class  \'doSomething(${body.asXml}  ${header.high})\')Instead of using .bean as shown in the examples above  you may want to use .to instead as shown:.to(\'bean:orderService?method=doSomething(${body.asXml}  ${header.high})\')A test case is provided. Instead of getting values of fields \'foo\' and \'bar\' respectively  the first parameter (which should be null) receives value of pojo.toString()  while the second parameter receives the correct value.   ',0
'Memory leak SoapOutInterceptor.writeSoapEnvelopeStart with security headers   \tWhen proxying the WS-Security request through camel route with CXF_MESSAGE data format  we will get the endless loop that eat up the memory.\'qtp967241364-210\' prio=10 tid=0x00007f1de4306800 nid=0x1c9f runnable [0x00007f1d8d451000] java.lang.Thread.State: RUNNABLE at org.apache.cxf.staxutils.W3CDOMStreamWriter.writeCharacters(W3CDOMStreamWriter.java:292) at org.apache.cxf.staxutils.DelegatingXMLStreamWriter.writeCharacters(DelegatingXMLStreamWriter.java:91) at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:588) at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:564) at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:542) at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor.writeSoapEnvelopeStart(SoapOutInterceptor.java:160) at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor.handleMessage(SoapOutInterceptor.java:81) at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor.handleMessage(SoapOutInterceptor.java:61) at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:262) - locked &lt;0x00000000e28af4a0&gt; (a org.apache.cxf.phase.PhaseInterceptorChain) at org.apache.cxf.endpoint.ClientImpl.doInvoke(ClientImpl.java:530) at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:456) at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:112) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122) at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) at org.apache.camel.processor.interceptor.HandleFaultInterceptor.process(HandleFaultInterceptor.java:41) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.fabric.FabricTraceProcessor.process(FabricTraceProcessor.java:81) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220) at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:308) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.Pipeline.process(Pipeline.java:117) at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) at org.apache.camel.component.cxf.CxfConsumer$1.asyncInvoke(CxfConsumer.java:93) - locked &lt;0x00000000e2533d18&gt; (a org.apache.cxf.transport.http_jetty.continuations.JettyContinuationWrapper) at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:72) at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334) at java.util.concurrent.FutureTask.run(FutureTask.java:166) at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37) at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:107) - locked &lt;0x00000000e28af958&gt; (a org.apache.cxf.interceptor.ServiceInvokerInterceptor$2) at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:262) - locked &lt;0x00000000e26edb48&gt; (a org.apache.cxf.phase.PhaseInterceptorChain) at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121) at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:236) at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:214) at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:194) at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:130) at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:221) at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:141) at javax.servlet.http.HttpServlet.service(HttpServlet.java:713) at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:197) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.ops4j.pax.web.service.internal.HttpServiceStarted$1.invoke(HttpServiceStarted.java:182) at org.ops4j.pax.web.service.internal.$Proxy6.service(Unknown Source) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:652) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:447) at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.doHandle(HttpServiceServletHandler.java:70) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137) at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:534) at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:227) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1038) at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doHandle(HttpServiceContext.java:117) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:374) at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:189) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:972) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135) at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:75) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116) at org.eclipse.jetty.server.Server.handle(Server.java:363) at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:483) at org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:931) at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:992) at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:856) at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235) at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82) at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:627) at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:51) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608) at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543) at java.lang.Thread.run(Thread.java:724)   ',0
'seda - queue size compare should use equals   \tSee nabblehttp://camel.465427.n5.nabble.com/Camel-2-11-1-SedaComponent-issues-with-Queue-size-tp5738258.html   ',0
'mbeansRegistered in DefaultManagementAgent isn\'t ThreadSafe   \tThis is more or less a \'corner-case\' I stumbled upon  thoughthe HashSet/HashMap (2.5/2.10 camel versions) in the DefaultManagementAgent containing the registered Mbean mbeansRegistered isn\'t Thread-Safe. This has been an issue for us while using the ProducerTemplate in a wrongful way  by instantiating the ProducerTemplate during every Route run. As this might be a common mistake by users I\'d suggest to improve the mbeansRegistered by using a Synchronized Map.   ',0
'camel-blueprint - Using  and referrring to SSLContextParameters with property placeholders can lead to CircularDependencyException   \tConfiguring a blueprint xml file with &lt;endpoint id=\'myNettyServer\' uri=\'netty-http:http://0.0.0.0:{{port}}/foo?ssl=true&amp;amp;sslContextParameters=#mySsl\'/&gt;Can lead to ciruclar exceptionsCaused by: org.apache.aries.blueprint.di.CircularDependencyException: [BeanRecipe[name=\'mySsl\']  BeanRecipe[name=\'.camelBlueprint.factory.mySsl\']  BeanRecipe[name=\'camel-4\']  BeanRecipe[name=\'myNettyServer\']  BeanRecipe[name=\'mySsl\']] at org.apache.aries.blueprint.container.BlueprintRepository.push(BlueprintRepository.java:343)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:71)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BlueprintRepository.createInstance(BlueprintRepository.java:230)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BlueprintRepository.create(BlueprintRepository.java:145)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BlueprintContainerImpl.getComponentInstance(BlueprintContainerImpl.java:746)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.camel.blueprint.BlueprintContainerRegistry.lookupByNameAndType(BlueprintContainerRegistry.java:54) at org.apache.camel.impl.CompositeRegistry.lookupByNameAndType(CompositeRegistry.java:52) ... 125 more   ',0
'camel-yammer - Endpoint yammer:current throwns JsonMappingException exception   \tGetting org.codehaus.jackson.map.JsonMappingException: Can not deserialize instance of java.util.ArrayList out of START_OBJECT tokenwhen trying to return the current user using yammer:current. Workaround is to just add ?useJson=true and do marshaling manually. Fixing on master shortly.   ',0
'Installation of camel-stomp feature fails   \tChristians-MacBook-Pro:bin cmueller$ ./karaf clean __ __ ____ / //_/____ __________ _/ __/ /  &lt; / __ \'/ ___/ __ \'/ /_ / /| |/ /_/ / / / /_/ / __/ /_/ |_|/__ _/_/ /__ _/_/ Apache Karaf (2.3.2)Hit \'&lt;tab&gt;\' for a list of available commandsand \'[cmd] --help\' for help on a specific command.Hit \'&lt;ctrl-d&gt;\' or type \'osgi:shutdown\' or \'logout\' to shutdown Karaf.karaf@root&gt; features:chooseurl camel 2.12.0adding feature url mvn:org.apache.camel.karaf/apache-camel/2.12.0/xml/featureskaraf@root&gt; features:install camel-stompError executing command: Could not start bundle mvn:org.apache.geronimo.specs/geronimo-jms_1.1_spec/1.1.1 in feature(s) spring-jms-3.1.4.RELEASE  camel-spring-ws-2.12.0  spring-jms-3.2.3.RELEASE  spring-jms-3.0.7.RELEASE  camel-jms-2.12.0  camel-bam-2.12.0  camel-stomp-2.12.0  camel-sjms-2.12.0  camel-jpa-2.12.0: Unresolved constraint in bundle org.apache.geronimo.specs.geronimo-jms_1.1_spec [62]: Unable to resolve 62.0: missing requirement [62.0] osgi.wiring.package; (osgi.wiring.package=javax.transaction.xa)   ',0
'Camel-Redis: Serializer passed through URI is used only on consumer   \tPlease add camel-redis componentThe serializer passed through URI is used only on consumer and not on producer. Beside been unexpected and undocumented I think it can cause problems on interacting with the Redis DB if the same serializer is not used in both ways.You can find the example and discussion of this problem on this thread on the forum:http://camel.465427.n5.nabble.com/camel-redis-strings-serialization-td5738994.htmlI put as minor because from the discussion it looks like it is possible to have a workaround using a RedisTemplate.   ',0
'XML Signature Component: Stream not closed in XmlSignerHelper.getXslTransform(String path)   \tComponent camel-xmlsecurity: InputStream is not closed after it is read in method XmlSignerHelper.getXslTransform(String path)   ',0
'Bean binding to covariant methods throws AmbiguousMethodCallException   \tAttached is a patch and test case for an issue in the bean binding code which prevents binding to an overloaded method with a covariant return type from the base class. The fix is to check for method covariance at the last moment before throwing AmbiguousMethodCallException. If all methods remaining are covariant  any one of them can be called. Unfortunately this happens in 3 places in the code- if we pre-filtered the list of methods then we could lose annotations on either of the method signature which could be problematic depending on the resolution type.   ',0
'scp task does not respect StrictHostKeyChecking option   \tThe SCP component does not currently do anything with the StrictHostKeyChecking option  as documented. The attached patch fixes this (no test case I\'m afraid).   ',0
'Null Pointer exception when removing SjmsComponent   \tNullPointer exception in SjmsComponent when trying to remove it from camel context:2013-09-16 11:51:54 201 &#91;WARN&#93; org.apache.camel.impl.DefaultCamelContext.removeComponent(DefaultCamelContext.java:388):org.apache.camel.spring.SpringCamelContext: Error stopping component org.apache.camel.component.sjms.SjmsComponent@232560ec. This exception will be ignored.java.lang.NullPointerException at org.apache.camel.component.sjms.SjmsComponent.doStop(SjmsComponent.java:143) at org.apache.camel.support.ServiceSupport.stop(ServiceSupport.java:102) at org.apache.camel.util.ServiceHelper.stopService(ServiceHelper.java:116) at org.apache.camel.impl.DefaultCamelContext.stopServices(DefaultCamelContext.java:1902) at org.apache.camel.impl.DefaultCamelContext.removeComponent(DefaultCamelContext.java:386)   ',0
'HttpConnectionManagerParams doesn\'t take effect when it is set to HttpComponent   \tHere is the user complain.It is caused by the patch of CAMEL-6296 which override the setting of HttpConnectionManagerParams.   ',1
'rabbitmq component sends basic ack after channel closed when endpoint is set to autoAck   \tConsuming from a rabbitmq endpoint uri that is configured to autoAck generates errors and fails.Example URI: rabbitmq://localhost:5672/test?autoAck=true&amp;queue=test&amp;autoDelete=false&amp;username=guest&amp;password=guestHere\'s the relevant log output:12:19:03.746 - osis-ht TRACE o.a.c.c.rabbitmq.RabbitMQConsumer - Acknowleding receipt &#91;delivery_tag=10&#93;12:19:03.747 - osis-ht WARN o.a.c.c.rabbitmq.RabbitMQConsumer - Error processing exchange. Exchange&#91;Message: WTF-9-1379531943713&#93;. Caused by: &#91;com.rabbitmq.client.AlreadyClosedException - clean connection shutdown; reason: Attempt to use closed channel&#93;com.rabbitmq.client.AlreadyClosedException: clean connection shutdown; reason: Attempt to use closed channel at com.rabbitmq.client.impl.AMQChannel.ensureIsOpen(AMQChannel.java:190) ~&#91;amqp-client-3.1.3.jar:na&#93; at com.rabbitmq.client.impl.AMQChannel.transmit(AMQChannel.java:291) ~&#91;amqp-client-3.1.3.jar:na&#93; at com.rabbitmq.client.impl.AMQChannel.transmit(AMQChannel.java:285) ~&#91;amqp-client-3.1.3.jar:na&#93; at com.rabbitmq.client.impl.ChannelN.basicAck(ChannelN.java:907) ~&#91;amqp-client-3.1.3.jar:na&#93; at org.apache.camel.component.rabbitmq.RabbitMQConsumer$RabbitConsumer.handleDelivery(RabbitMQConsumer.java:126) ~&#91;camel-rabbitmq-2.12.0.jar:2.12.0&#93; at com.rabbitmq.client.impl.ConsumerDispatcher$4.run(ConsumerDispatcher.java:121) &#91;amqp-client-3.1.3.jar:na&#93; at com.rabbitmq.client.impl.ConsumerWorkService$WorkPoolRunnable.run(ConsumerWorkService.java:76) &#91;amqp-client-3.1.3.jar:na&#93; at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) &#91;na:1.7.0_21&#93; at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) &#91;na:1.7.0_21&#93; at java.lang.Thread.run(Thread.java:722) &#91;na:1.7.0_21&#93;   ',0
